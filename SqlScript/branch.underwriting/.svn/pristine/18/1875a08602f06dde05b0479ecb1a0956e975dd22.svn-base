using Entity.UnderWriting.Entities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web.UI.WebControls;
using WEB.UnderWriting.Common;

namespace WEB.UnderWriting.Case.UserControls.Common
{
    public partial class UCPopSentToReinsurance : UC
    {
        public int? _StepCaseNo
        {
            get { return String.IsNullOrWhiteSpace(hdnSRStepCaseNo.Value) ? (int?)null : int.Parse(hdnSRStepCaseNo.Value); }
            set { hdnSRStepCaseNo.Value = value.HasValue ? value.Value.ToString() : ""; }
        }
        public int? _StepId
        {
            get { return String.IsNullOrWhiteSpace(hdnSRStepId.Value) ? (int?)null : int.Parse(hdnSRStepId.Value); }
            set { hdnSRStepId.Value = value.HasValue ? value.Value.ToString() : ""; }
        }
        public int? _StepTypeId
        {
            get { return String.IsNullOrWhiteSpace(hdnSRStepTypeId.Value) ? (int?)null : int.Parse(hdnSRStepTypeId.Value); }
            set { hdnSRStepTypeId.Value = value.HasValue ? value.Value.ToString() : ""; }
        }
        public String _StepSeqReference
        {
            get { return hdnSRStepSeqReference.Value; }
            set { hdnSRStepSeqReference.Value = value; }
        }
        public int? _ReinsurerId
        {
            get { return String.IsNullOrWhiteSpace(hdnSRReinsurerId.Value) ? (int?)null : int.Parse(hdnSRReinsurerId.Value); }
            set { hdnSRReinsurerId.Value = value.HasValue ? value.Value.ToString() : ""; }
        }
        public int? _CommTypeId
        {
            get { return String.IsNullOrWhiteSpace(hdnSRCommunicationTypeId.Value) ? (int?)null : int.Parse(hdnSRCommunicationTypeId.Value); }
            set { hdnSRCommunicationTypeId.Value = value.HasValue ? value.Value.ToString() : ""; }
        }
        public String _EmailRecipient
        {
            get { return hdnSREmailRecipient.Value; }
            set { hdnSREmailRecipient.Value = value; }
        }


        List<Tools.EmailAttachmentItem> EmailAttachmentList
        {
            get { return Session["EmailAttachmentList"] == null ? new List<Tools.EmailAttachmentItem>() : (List<Tools.EmailAttachmentItem>)Session["EmailAttachmentList"]; }
            set { Session["EmailAttachmentList"] = value; }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
        }

        protected void btnSRView_Click(object sender, EventArgs e)
        {
            var gridRow = (GridViewRow)((Button)sender).NamingContainer;

            var stepTypeId = int.Parse(gvInbox.DataKeys[gridRow.RowIndex]["StepTypeId"].ToString());
            var stepId = int.Parse(gvInbox.DataKeys[gridRow.RowIndex]["StepId"].ToString());
            var stepCaseNo = int.Parse(gvInbox.DataKeys[gridRow.RowIndex]["StepCaseNo"].ToString());
            var communicationId = int.Parse(gvInbox.DataKeys[gridRow.RowIndex]["CommunicationId"].ToString());
            var hasAttachment = Boolean.Parse(gvInbox.DataKeys[gridRow.RowIndex]["CommAttachment"].ToString());

            var commItem = new Reinsurance.Communication()
              {
                  CorpId = Service.Corp_Id,
                  RegionId = Service.Region_Id,
                  CountryId = Service.Country_Id,
                  DomesticRegId = Service.Domesticreg_Id,
                  StateProvId = Service.State_Prov_Id,
                  CityId = Service.City_Id,
                  OfficeId = Service.Office_Id,
                  CaseSeqNo = Service.Case_Seq_No,
                  HistSeqNo = Service.Hist_Seq_No,
                  StepTypeId = stepTypeId,
                  StepId = stepId,
                  StepCaseNo = stepCaseNo,
                  CommunicationId = communicationId
              };

            //Get email and Attachments
            var commData = Service.GetRCHtmlAndAttach(commItem);

            //Get email Text
            ltCorreo.Text = commData.First().CommText;
            lblSRSubject.Text = commData.First().CommSubject;

            //Fill attachments
            gvEmailAttachments.Visible = hasAttachment;
            gvEmailAttachments.DataSource = hasAttachment ? commData : null;
            gvEmailAttachments.DataBind();
        }

        public void FillData(IEnumerable<Reinsurance.Communication> data, Reinsurance.StepAvailable stepInfo)
        {
            EmailAttachmentList = new List<Tools.EmailAttachmentItem>();

            ClearFields();

            gvInbox.DataSource = data;
            gvInbox.DataBind();

            GetRequirementDocs();

            FillDrops();
            FillAttachmentsGrid();
            FillDocumentsFromDrops();

            FillStepInfo(stepInfo);
        }

        private void FillDocumentsData(Tools.PolicyKeyItem policyKey = null, int? docCategoryId = null, int? documentTypeid = null)
        {
            var policyDocuments = Service.GetCategoryDocuments(policyKey, docCategoryId, documentTypeid);

            policyDocuments = policyDocuments.Where(r => !EmailAttachmentList.Any(a => a.DocumentId == r.DocumentId && a.DocCategoryId == r.DocCategoryId && a.DocTypeId == r.DocTypeId));

            gvSRPolicyDocument.DataSource = policyDocuments.ToList();
            gvSRPolicyDocument.DataBind();

            if (gvSRPolicyDocument.BottomPagerRow != null)
            {
                var totalItems = (Literal)gvSRPolicyDocument.BottomPagerRow.FindControl("totalItems");
                totalItems.Text = policyDocuments.ToList().Count + "";
            }

            setPagerIndex(gvSRPolicyDocument);
        }

        private void FillAttachmentsGrid()
        {
            gvSREmailSendAttachments.DataSource = EmailAttachmentList;
            gvSREmailSendAttachments.DataBind();
        }

        private void ClearFields()
        {
            ltCorreo.Text = "";
            lblSRSubject.Text = "";
            gvEmailAttachments.Visible = false;
            gvEmailAttachments.DataSource = null;
            gvEmailAttachments.DataBind();
        }

        protected void btnSRPreviewAttach_Click(object sender, EventArgs e)
        {
            var gridRow = (GridViewRow)((Button)sender).NamingContainer;
            var grid = (GridView)gridRow.NamingContainer;

            var docCategoryId = int.Parse(grid.DataKeys[gridRow.RowIndex]["DocCategoryId"].ToString());
            var docTypeId = int.Parse(grid.DataKeys[gridRow.RowIndex]["DocTypeId"].ToString());
            var documentId = int.Parse(grid.DataKeys[gridRow.RowIndex]["DocumentId"].ToString());

            var doc = Service.GetCommDocBinary(docCategoryId, docTypeId, documentId);

            if (doc != null)
                PreviewDoc(doc);
            else
                this.MessageBox("This document is Empty, please try with another one.", 500, 150, true, "Empty Document");
        }

        protected void btnSRDownloadAttach_Click(object sender, EventArgs e)
        {
            var gridRow = (GridViewRow)((LinkButton)sender).NamingContainer;

            var docCategoryId = int.Parse(gvEmailAttachments.DataKeys[gridRow.RowIndex]["DocCategoryId"].ToString());
            var docTypeId = int.Parse(gvEmailAttachments.DataKeys[gridRow.RowIndex]["DocTypeId"].ToString());
            var documentId = int.Parse(gvEmailAttachments.DataKeys[gridRow.RowIndex]["DocumentId"].ToString());
            var documentName = gvEmailAttachments.DataKeys[gridRow.RowIndex]["DocumentName"].ToString();


            var commDoc = Service.GetCommDocument(docCategoryId, docTypeId, documentId);

            var docFullName = documentName + commDoc.Extension;
            var doc = commDoc.DocumentBinary;

            Tools.StreamFileToBrowser(docFullName, doc);
        }

        protected void btnSRCloseEmail_Click(object sender, EventArgs e)
        {
            ClearFields();
        }

        protected void ddlSRDocumentTypes_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillDocumentsFromDrops();
        }

        protected void ddlSRPolicy_SelectedIndexChanged(object sender, EventArgs e)
        {
            var policyArray = ddlSRPolicy.SelectedValue.Split('|');

            var policyKey = new Tools.PolicyKeyItem()
            {
                CorpId = int.Parse(policyArray[0]),
                RegionId = int.Parse(policyArray[1]),
                CountryId = int.Parse(policyArray[2]),
                DomesticregId = int.Parse(policyArray[3]),
                StateProvId = int.Parse(policyArray[4]),
                CityId = int.Parse(policyArray[5]),
                OfficeId = int.Parse(policyArray[6]),
                CaseSeqNo = int.Parse(policyArray[7]),
                HistSeqNo = int.Parse(policyArray[8])
            };

            FillDocumentsFromDrops();
            FillDrops(policyKey, false);
        }

        protected void gvSRPolicyDocument_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvSRPolicyDocument.PageIndex = e.NewPageIndex;
            gvSRPolicyDocument.DataBind();
            FillDocumentsFromDrops();
            setPagerIndex(gvSRPolicyDocument);
        }

        protected void gvSREmailSendAttachments_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {

        }

        protected void btnSRCancelEmail_Click(object sender, EventArgs e)
        {
            ClearEmailInfo();
        }

        private Step.Note GetNewNote()
        {


            var step = new Entity.UnderWriting.Entities.Step.Note
            {
                StepId = (int)_StepId,
                StepTypeId = (int)_StepTypeId,
                StepCaseNo = (int)_StepCaseNo,
                CorpId = Service.Corp_Id,
                RegionId = Service.Region_Id,
                CountryId = Service.Country_Id,
                DomesticregId = Service.Domesticreg_Id,
                StateProvId = Service.State_Prov_Id,
                CityId = Service.City_Id,
                OfficeId = Service.Office_Id,
                CaseSeqNo = Service.Case_Seq_No,
                HistSeqNo = Service.Hist_Seq_No,
                NoteDesc = txtSRSendEmail.Text,
                UserId =  Service.Underwriter_Id,
                OriginatedBy =  Service.Underwriter_Id
            };

            return step;

        }

        protected void btnSRSendEmail_Click(object sender, EventArgs e)
        {
            try
            {
                if (!_StepCaseNo.HasValue || _StepCaseNo.Value < 1)
                {
                    var newStep = new Step.NewStep
                    {
                        StepCaseNo = -1,

                        //Send To Reinsurance Step Key
                        StepTypeId = 1,
                        StepId = 61,
                        Note = txtSRSendEmail.Text
                    };

                    _StepCaseNo = Service.InsertNewStep(newStep);

                    var stepInfo = Service.StepAvailable();

                    FillStepInfo(stepInfo);
                }
                else
                {


                    Services.StepManager.InsertNote(GetNewNote());


                }

                const string subjectFormat = "{0} - [Step#{1}]";
                var subject = string.Format(subjectFormat, txtSRSendSubject.Text.Trim(), _StepSeqReference);

                var reinsuranceComm = new Reinsurance.Communication()
                {
                    //Key
                    CommunicationId = -1,
                    StepCaseNo = _StepCaseNo.Value,
                    StepId = _StepId.Value,
                    StepTypeId = _StepTypeId.Value,
                    ReinsurerId = _ReinsurerId.Value,
                    CommTypeId = _CommTypeId.Value,

                    //Communication Info
                    CommDate = DateTime.Now,
                    CommFrom = Service.FromEmail,
                    CommSubject = subject,
                    CommText = txtSRSendEmail.Text,
                    CommAttachment = EmailAttachmentList.Any(),

                    //UserInfo
                    UserId = Service.Underwriter_Id,
                };

                //Insert Communication
                var insertedComm = Service.InsertReinsuranceCommunication(reinsuranceComm);

                //Insert Communication Attachments
                if (EmailAttachmentList.Any())
                {
                    var commAttachmentsList = new List<Reinsurance.Communication>();

                    foreach (var item in EmailAttachmentList)
                    {
                        var docId = Services.PolicyManager.SetDocument(
                            item.FileTypeId.Value,
                            172 /*ReinsuranceEmailAttachment*/,
                            -1,
                            Tools.ReadBinaryFile(item.FilePath),
                            item.DocName,
                            DateTime.Now,
                            null,
                            Service.Underwriter_Id
                            );

                        var commAttachItem = new Reinsurance.Communication()
                        {
                            //Key
                            CommunicationId = insertedComm.CommunicationId,
                            StepCaseNo = insertedComm.StepCaseNo,
                            StepId = insertedComm.StepId,
                            StepTypeId = insertedComm.StepTypeId,

                            //Document Info
                            DocumentId = docId,
                            DocCategoryId = 172 /*ReinsuranceEmailAttachment*/,
                            DocTypeId = item.FileTypeId.Value,

                            //UserInfo
                            UserId = Service.Underwriter_Id
                        };

                        commAttachmentsList.Add(commAttachItem);
                    }

                    if (commAttachmentsList.Any())
                        Service.SetReinsuranceCommunicationAttachment(commAttachmentsList);
                }

                //Send Email
                MailManager.SendMessage(_EmailRecipient,
                             "",
                             "",
                             txtSRSendEmail.Text,
                             "",
                             Service.FromEmail,
                             subject,
                             EmailAttachmentList,
                             false,
                             Service.SmtpServer);

                //Clear Email
                ClearEmailInfo();

                ///Reload Data
                //Get Step Info
                var stepsInfo = Service.StepAvailable();

                //Get Communications Data
                var commItem = new Reinsurance.Communication()
                {
                    CorpId = Service.Corp_Id,
                    RegionId = Service.Region_Id,
                    CountryId = Service.Country_Id,
                    DomesticRegId = Service.Domesticreg_Id,
                    StateProvId = Service.State_Prov_Id,
                    CityId = Service.City_Id,
                    OfficeId = Service.Office_Id,
                    CaseSeqNo = Service.Case_Seq_No,
                    HistSeqNo = Service.Hist_Seq_No,
                    StepId = stepsInfo.StepId,
                    StepCaseNo = stepsInfo.StepCaseNo,
                    StepTypeId = stepsInfo.StepTypeId
                };

                var data = Service.FillResinsuranceComm(commItem);
                FillData(data, stepsInfo);
                var right = (Right)this.Parent.Parent.Parent;
                right.fillPointSteps();
            }
            catch (Exception)
            {

                throw;
            }
        }

        protected void btnSRAttachDoc_Click(object sender, EventArgs e)
        {
            var reloadGrid = false;

            foreach (GridViewRow gvRow in gvSRPolicyDocument.Rows)
            {
                var chkAttach = (CheckBox)gvRow.FindControl("chkAttach");

                if (!chkAttach.Checked) continue;
                var docCategoryId = int.Parse(gvSRPolicyDocument.DataKeys[gvRow.RowIndex]["DocCategoryId"].ToString());
                var docTypeId = int.Parse(gvSRPolicyDocument.DataKeys[gvRow.RowIndex]["DocTypeId"].ToString());
                var documentId = int.Parse(gvSRPolicyDocument.DataKeys[gvRow.RowIndex]["DocumentId"].ToString());

                reloadGrid = AttachPolicyDocs(docCategoryId, docTypeId, documentId, true);
            }

            if (!reloadGrid) return;
            FillAttachmentsGrid();
            FillDocumentsFromDrops();
        }

        protected void btnSRRemoveAttachment_Click(object sender, EventArgs e)
        {
            var gridRow = (GridViewRow)((Button)sender).NamingContainer;

            var docId = int.Parse(gvSREmailSendAttachments.DataKeys[gridRow.RowIndex]["DocCountId"].ToString());

            var tempList = new List<Tools.EmailAttachmentItem>(EmailAttachmentList);
            tempList.Remove(tempList.First(r => r.DocCountId == docId));
            EmailAttachmentList = tempList;

            FillAttachmentsGrid();
            FillDocumentsFromDrops();
            lblSRTotalSize.Text = "Total Size: " + EmailAttachmentList.Sum(r => r.DocSize).ToString("N2") + "MB";
        }

        private void FillDrops(Tools.PolicyKeyItem policyItem = null, Boolean FillPolicies = true)
        {
            if (policyItem == null)
            {
                policyItem = new Tools.PolicyKeyItem()
                {
                    CorpId = Service.Corp_Id,
                    RegionId = Service.Region_Id,
                    CountryId = Service.Country_Id,
                    DomesticregId = Service.Domesticreg_Id,
                    StateProvId = Service.State_Prov_Id,
                    CityId = Service.City_Id,
                    OfficeId = Service.Office_Id,
                    CaseSeqNo = Service.Case_Seq_No,
                    HistSeqNo = Service.Hist_Seq_No

                };
            }

            if (FillPolicies)
            {
                //Contact Policies
                ddlSRPolicy.DataSource = Service.DropDowns.GetDropDown(
                    DropDownType.OwnerPolicy, 
                    contactId: Service.Contact_Id, 
                    corpId: Service.Corp_Id,
                    regionId: Service.Region_Id,
                    countryId: Service.Country_Id,
                    domesticregId: Service.Domesticreg_Id,
                    stateProvId: Service.State_Prov_Id,
                    cityId:Service.City_Id,
                    officeId:Service.Office_Id,
                    caseSeqNo:Service.Case_Seq_No,
                    histSeqNo:Service.Hist_Seq_No,
                    projectId: Service.ProjectId,
                    companyId: Service.CompanyId);
                ddlSRPolicy.DataBind();

                if (ddlSRPolicy != null)
                    ddlSRPolicy.SelectedValue = ddlSRPolicy.Items.FindByText(Service.Policy_Id).Value;
            }

            //Document Categories
            Service.DropDowns.GetDropDown(ref ddlSRDocumentTypes, Language.English, DropDownType.PolicyDocument,
                policyItem.CorpId,
                policyItem.RegionId,
                policyItem.CountryId,
                policyItem.DomesticregId,
                policyItem.StateProvId,
                policyItem.CityId,
                policyItem.OfficeId,
                policyItem.CaseSeqNo,
                policyItem.HistSeqNo, projectId: Service.ProjectId, companyId: Service.CompanyId);
        }

        void setPagerIndex(GridView gv)
        {
            if (gv.BottomPagerRow != null)
            {
                var lnkPrev = (Button)gv.BottomPagerRow.FindControl("prevButton");
                var lnkFirst = (Button)gv.BottomPagerRow.FindControl("firstButton");
                var lnkNext = (Button)gv.BottomPagerRow.FindControl("nextButton");
                var lnkLast = (Button)gv.BottomPagerRow.FindControl("lastButton");
                var indexText = (Literal)gv.BottomPagerRow.FindControl("indexPage");
                var totalText = (Literal)gv.BottomPagerRow.FindControl("totalPage");


                var count = gv.PageCount;
                var index = gv.PageIndex + 1;

                indexText.Text = index.ToString();
                totalText.Text = count.ToString();

                if (index == 1)
                {
                    DisableLinkButton(lnkPrev, "prev_dis");
                    DisableLinkButton(lnkFirst, "rewd_dis");
                }
                else if (index == count)
                {
                    DisableLinkButton(lnkNext, "next_dis");
                    DisableLinkButton(lnkLast, "fwrd_dis");
                }
            }
        }

        public void DisableLinkButton(Button linkButton, string disable_class)
        {
            linkButton.CssClass = disable_class;
            linkButton.Enabled = false;
        }

        protected void btnSRViewEmailAttach_Click(object sender, EventArgs e)
        {
            var gridRow = (GridViewRow)((Button)sender).NamingContainer;

            var docId = int.Parse(gvSREmailSendAttachments.DataKeys[gridRow.RowIndex]["DocCountId"].ToString());
            var doc = EmailAttachmentList.First(r => r.DocCountId == docId);

            PreviewDoc(Tools.ReadBinaryFile(doc.FilePath));
        }

        protected void fuSRUploadFile_FileUploadComplete(object sender, DevExpress.Web.FileUploadCompleteEventArgs e)
        {
            var message = "";
            try
            {
                var file = e.UploadedFile;
                if (file.IsValid)
                {
                    var fileName = Tools.GetSerialId() + "~~" + file.FileName.Trim();
                    var savePath = Service.TempFilePath + "\\" + fileName;
                    file.SaveAs(savePath);

                    message = String.Format("{{ \"file\": \"{0}\", \"error\": \"{1}\"}}", fileName, "");
                }
                else
                    message = String.Format("{{ \"file\": \"{0}\", \"error\": \"{1}\"}}", "", "Error");
            }
            catch (Exception ex)
            {
                message = String.Format("{{ \"file\": \"{0}\", \"error\": \"{1}\"}}", "", ex.Message);
            }
            e.CallbackData = message;
        }

        private void FillDocumentsFromDrops()
        {
            var policyArray = ddlSRPolicy.SelectedValue.Split('|');

            var policyKey = new Tools.PolicyKeyItem()
            {
                CorpId = int.Parse(policyArray[0]),
                RegionId = int.Parse(policyArray[1]),
                CountryId = int.Parse(policyArray[2]),
                DomesticregId = int.Parse(policyArray[3]),
                StateProvId = int.Parse(policyArray[4]),
                CityId = int.Parse(policyArray[5]),
                OfficeId = int.Parse(policyArray[6]),
                CaseSeqNo = int.Parse(policyArray[7]),
                HistSeqNo = int.Parse(policyArray[8])
            };

            var docHasValue = ddlSRDocumentTypes.SelectedIndex > 0;
            var docArray = ddlSRDocumentTypes.SelectedValue.Split('|');

            var docTypeId = docHasValue ? int.Parse(docArray[0]) : (int?)null;
            var docCategoryId = docHasValue ? int.Parse(docArray[1]) : (int?)null;

            FillDocumentsData(policyKey, docCategoryId, docTypeId);
        }

        private void PreviewDoc(Byte[] documentBinary)
        {
            UCPdfViewer1.LoadPdf(documentBinary, new Unit(1185, UnitType.Pixel), new Unit(709, UnitType.Pixel));
            hdnNSShowPDFPop.Value = "true";
        }

        protected void btnSRSaveUploadedAttach_Click(object sender, EventArgs e)
        {
            var savePath = Service.TempFilePath + "\\" + hdnSRUploadedFile.Value;
            if (String.IsNullOrWhiteSpace(hdnSRUploadedFile.Value))
            {
                this.MessageBox("There is not document to save", 500, 150, true, "Empty Document");
                return;
            }
            var fileInfo = new FileInfo(savePath);

            var origFileName = fileInfo.Name.Split(new string[] { "~~" }, StringSplitOptions.None)[1];

            var fileSize = fileInfo.Length;
            var fileName = Tools.GetFileNameWithoutExt(origFileName);
            var fileExt = fileInfo.Extension;

            var emailAttachItem = new Tools.EmailAttachmentItem()
            {
                DocCountId = EmailAttachmentList.Count + 1,
                DocName = fileName,
                DocExtension = fileExt,
                DocSize = (Decimal.Parse(fileSize.ToString()) / Decimal.Parse("1048576")),
                FilePath = savePath,
                FileTypeId = Tools.GetFileTypeFromExt(fileExt)
            };

            var tempList = new List<Tools.EmailAttachmentItem>(EmailAttachmentList);
            tempList.Add(emailAttachItem);
            EmailAttachmentList = tempList;

            //Reload Grids
            FillAttachmentsGrid();
            lblSRTotalSize.Text = "Total Size: " + EmailAttachmentList.Sum(r => r.DocSize).ToString("N2") + "MB";
            hdnSRUploadedFile.Value = "";
        }

        private void ClearEmailInfo()
        {
            EmailAttachmentList = new List<Tools.EmailAttachmentItem>();
            txtSRSendEmail.Text = "";
            txtSRSendRecipients.Text = "";
            txtSRSendSubject.Text = "";

            FillAttachmentsGrid();
            FillDocumentsFromDrops();
            lblSRTotalSize.Text = "Total Size: 0.00MB";
        }

        private void FillStepInfo(Reinsurance.StepAvailable stepInfo)
        {
            _StepCaseNo = stepInfo.StepCaseNo;
            _StepId = stepInfo.StepId;
            _StepTypeId = stepInfo.StepTypeId;
            _StepSeqReference = stepInfo.StepSeqReference;
            _ReinsurerId = stepInfo.ReinsurerId;
            _CommTypeId = stepInfo.CommTypeId;
            _EmailRecipient = stepInfo.ReinsurerEmail;
            txtSRSendRecipients.Text = stepInfo.ReinsurerEmail;
        }

        private bool AttachPolicyDocs(int docCategoryId, int docTypeId, int documentId, bool showMessage = false)
        {
            var doc = Service.GetCommDocument(docCategoryId, docTypeId, documentId);

            if (doc.DocumentBinary == null)
            {
                if (showMessage)
                    this.MessageBox("This document is Empty, please try with another one.", 500, 150, true, "Empty Document");
                return false;
            }

            var fileName = Tools.GetFileNameWithoutExt(doc.DocumentName);
            var savePath = Service.TempFilePath + "\\" + Tools.GetSerialId() + "~~" + fileName + doc.Extension;
            var fileSize = doc.DocumentBinary.SaveByteToFile(savePath);

            var emailAttachItem = new Tools.EmailAttachmentItem()
            {
                DocCountId = EmailAttachmentList.Count + 1,
                DocumentId = documentId,
                DocCategoryId = docCategoryId,
                DocTypeId = docTypeId,
                DocName = fileName,
                DocExtension = doc.Extension,
                DocSize = (Decimal.Parse(fileSize.ToString()) / Decimal.Parse("1048576")),
                FilePath = savePath,
                FileTypeId = Tools.GetFileTypeFromExt(doc.Extension),
            };

            var tempList = new List<Tools.EmailAttachmentItem>(EmailAttachmentList) { emailAttachItem };
            EmailAttachmentList = tempList;

            lblSRTotalSize.Text = "Total Size: " + EmailAttachmentList.Sum(r => r.DocSize).ToString("N2") + "MB";
            return true;
        }

        private void GetRequirementDocs()
        {
            var requirementData = Services.RequirementManager.GetAll(
                 Service.Corp_Id
               , Service.Region_Id, Service.Country_Id, Service.Domesticreg_Id, Service.State_Prov_Id, Service.City_Id, Service.Office_Id
               , Service.Case_Seq_No, Service.Hist_Seq_No, Service.LanguageId
               ).Where(r => r.SendToReinsurance).ToList();

            foreach (var recDoc in from recDoc in requirementData where recDoc.DocCategoryId != null where recDoc.DocTypeId != null where recDoc.DocumentId != null select recDoc)
                AttachPolicyDocs(recDoc.DocCategoryId.Value, recDoc.DocTypeId.Value, recDoc.DocumentId.Value);
        }
    }
}