using DI.UnderWriting;
using DI.UnderWriting.Interfaces;
using Entity.UnderWriting.Entities;
using RESOURCE.UnderWriting.NewBussiness;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using System.Xml.Serialization;
using Transunion.EncryptDecrypt;
using WEB.NewBusiness.Common.Thunderhead;
using WEB.NewBusiness.oSysFlexService;
using WEB.NewBusiness.TransunionServiceReference;
using WEB.NewBusiness.WSGPPayments;
using OnbaseFileTransfer;
using Statetrust.Framework.Security.Bll;
using GlobalServices = WebServices.GlobalService;
using Ionic.Zip;

namespace WEB.NewBusiness.Common
{
    /// <summary>
    /// Author       : Lic. Carlos Ml. Lebron
    /// Created Date : 10/05/2014
    /// </summary>
    public class Services
    {
        public delegate void DeclineCaseHandler(Utility.DeclineType declineType, List<Utility.Reason> Reasons = null);
        public event DeclineCaseHandler DeclineCase;
        private string key = "SessionData";
        private bool hasError;
        public string[] ErrorCode { get { return new string[] { "001", "002" }; } }
        const string GenericMessage = "No se puede continuar con la emisión de esta póliza";

        public Common.SessionList datos;
        private static UnderWritingDIManager idManager = new UnderWritingDIManager();
        #region Service Reference
        private ServicesApi.ContactService.ContactServiceClient _oContactServicesClient;
        private oSysFlexService.SysFlexPolicyServiceClient _oSFPolicyServiceClient;
        private global::WebServices.GlobalService.PolicyServiceClient _oPolicyGlobalServiceClient;

        #endregion

        private System.Text.StringBuilder sb = new System.Text.StringBuilder();

        public Services(string KeyName = "SessionData")
        {

            key = KeyName;

            if (HttpContext.Current.Session == null)
            {
                HttpContext.Current.Session.Add(key, new SessionList(KeyName));
                (HttpContext.Current.Session[key] as SessionList).ContactInfo = new SessionContact();
                (HttpContext.Current.Session[key] as SessionList).IllustrationInfo = new SessionIllustration();
            }
            else
                if (HttpContext.Current.Session[key] == null)
            {
                HttpContext.Current.Session.Add(key, new SessionList(KeyName));
                (HttpContext.Current.Session[key] as SessionList).ContactInfo = new SessionContact();
                (HttpContext.Current.Session[key] as SessionList).IllustrationInfo = new SessionIllustration();
            }


            datos = (HttpContext.Current.Session[key] as SessionList);
        }

        #region Services

        #region New Business Field
        /// <summary>
        /// Contact Services
        /// </summary>
        public ServicesApi.ContactService.ContactServiceClient oContactServicesClient
        {
            get
            {
                return _oContactServicesClient ?? new ServicesApi.ContactService.ContactServiceClient();
            }
        }

        public global::WebServices.GlobalService.PolicyServiceClient oPolicyGlobalService
        {
            get
            {
                return _oPolicyGlobalServiceClient ?? new global::WebServices.GlobalService.PolicyServiceClient();
            }
        }

        // SysFlex Policy Service
        public oSysFlexService.SysFlexPolicyServiceClient oSFPolicyServiceClient
        {
            get
            {
                return _oSFPolicyServiceClient ?? new oSysFlexService.SysFlexPolicyServiceClient();
            }
        }

        /// <summary>
        /// Manager de Contactos
        /// </summary>
        public IContact oContactManager
        {
            get
            {
                return
                    idManager.ContactManager;
            }
        }

        /// <summary>
        ///   Propiedad
        /// </summary>
        public IProperty oPropertyManager
        {
            get
            {
                return
                    idManager.PropertyManager;
            }
        }

        /// <summary>
        ///  Barco
        /// </summary>
        public INavy oNavyManager
        {
            get
            {
                return
                    idManager.NavyManager;
            }
        }

        /// <summary>
        ///  Transporte Terrestre
        /// </summary>
        public ITransport oTransportManager
        {
            get
            {
                return
                    idManager.TransportManager;
            }
        }

        /// <summary>
        /// Fianza
        /// </summary>
        public IBail oBailManager
        {
            get
            {
                return
                    idManager.BailManager;
            }
        }

        /// <summary>
        /// Aereo
        /// </summary>
        public IAirPlane oAirPlaneManager
        {
            get
            {
                return
                    idManager.AirPlaneManager;
            }
        }

        /// <summary>
        /// Manager de Eforms
        /// </summary>
        public IForm oFormManager
        {
            get
            {
                return
                    idManager.FormManager;
            }
        }

        /// <summary>
        /// Manager de Casos
        /// </summary>
        public ICase oCaseManager
        {
            get
            {
                return
                    idManager.CaseManager;
            }
        }

        /// <summary>
        /// Manager de requirements
        /// </summary>
        public IRequirement oRequirementManager
        {
            get
            {
                return
                    idManager.RequirementManager;
            }
        }

        /// <summary>
        ///  Manager de Ammedment
        /// </summary>      
        public IAmmendment oAmmedmentManager
        {
            get
            {
                return
                    idManager.AmmendmentManager;
            }
        }

        /// <summary>
        ///  Manager de Declaration
        /// </summary>
        public IHealthDeclaration oHealthDeclarationManager
        {
            get
            {
                return
                    idManager.HealthDeclarationManager;
            }
        }
        /// <summary>
        ///Manager de Health
        /// </summary>
        public IHealth oHealthManager
        {
            get
            {
                return
                    idManager.HealthManager;
            }
        }

        /// <summary>
        /// Manager de DataReview Manager
        /// </summary>
        public IDataReview oDataReviewManager
        {
            get
            {
                return
                    idManager.DataReviewManager;
            }
        }

        /// <summary>
        /// Manager de Polizas
        /// </summary>
        public IPolicy oPolicyManager
        {
            get
            {
                return
                    idManager.PolicyManager;
            }
        }
        /// <summary>
        /// Manager de IPayment
        /// </summary>
        public IPayment oPaymentManager
        {
            get
            {
                return
                    idManager.PaymentManager;
            }
        }
        /// <summary>
        /// Manger de DropDown
        /// </summary>
        public IDropDown oDropDownManager
        {
            get
            {
                return
                    idManager.DropDownManager;
            }
        }
        /// <summary>
        /// Manager de Rider 
        /// </summary>
        public IRider oRider
        {
            get
            {
                return
                    idManager.RiderManager;
            }
        }
        /// <summary>
        /// Manager de Beneficiary 
        /// </summary>
        public IBeneficiary oBeneficiaryManager
        {
            get
            {
                return
                    idManager.BeneficiaryManager;
            }
        }

        /// <summary>
        /// Manager de Notas 
        /// </summary>
        public INote oNote
        {
            get
            {
                return
                    idManager.NoteManager;
            }
        }

        /// <summary>
        /// Manager de Vehiculos
        /// </summary>
        public IVehicle oVehicleManager
        {
            get
            {
                return
                    idManager.VehicleManager;
            }
        }

        /// <summary>
        /// Manager Inspeccion de Líneas aliadas
        /// </summary>
        public IAlliedLinesReview oAlliedLinesReviewManager
        {
            get
            {
                return
                    idManager.AlliedLinesReviewManager;
            }
        }

        /// <summary>
        /// Representa la linea de productos con la que se esta trabajando
        /// </summary>
        public Utility.ProductLine ProductLine
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ProductLine; }
            set
            {
                datos.ContactInfo.ProductLine = value;
                datos.Save();
            }
        }

        public bool RefreshInbox
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.RefreshInbox; }
            set
            {
                datos.ContactInfo.RefreshInbox = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Si la poliza es financiada
        /// </summary>
        public bool CanViewContactInformation
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CanViewContactInformation; }
            set
            {
                datos.ContactInfo.CanViewContactInformation = value;
                datos.Save();
            }
        }

        public bool CanDomitiliationPayment
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CanDomitiliationPayment; }
            set
            {
                datos.ContactInfo.CanDomitiliationPayment = value;
                datos.Save();
            }
        }

        public decimal? MonthlyPayment
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.MonthlyPayment; }
            set
            {
                datos.ContactInfo.MonthlyPayment = value;
                datos.Save();
            }
        }

        public double TaxPercentage
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.TaxPercentage; }
            set
            {
                datos.ContactInfo.TaxPercentage = value;
                datos.Save();
            }
        }

        public int? Period
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Period; }
            set
            {
                datos.ContactInfo.Period = value;
                datos.Save();
            }
        }

        public decimal? annualPremium
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.annualPremium; }
            set
            {
                datos.ContactInfo.annualPremium = value;
                datos.Save();
            }
        }

        public decimal PorcKCO
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PorcKCO; }
            set
            {
                datos.ContactInfo.PorcKCO = value;
                datos.Save();
            }
        }

        public bool ECreateLoanKCO
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ECreateLoanKCO; }
            set
            {
                datos.ContactInfo.ECreateLoanKCO = value;
                datos.Save();
            }
        }

        public string BlacklistMember
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.BlacklistMember; }
            set
            {
                datos.ContactInfo.BlacklistMember = value;
                datos.Save();
            }
        }

        public string BlacklistCheckUserName
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.BlacklistCheckUserName; }
            set
            {
                datos.ContactInfo.BlacklistCheckUserName = value;
                datos.Save();
            }
        }

        public int? BlacklistCheckUser
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.BlacklistCheckUser; }
            set
            {
                datos.ContactInfo.BlacklistCheckUser = value;
                datos.Save();
            }
        }

        public bool? BlacklistCheck
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.BlacklistCheck; }
            set
            {
                datos.ContactInfo.BlacklistCheck = value;
                datos.Save();
            }
        }

        public bool HasFacultative
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.HasFacultative;
            }
            set
            {
                datos.ContactInfo.HasFacultative = value;
                datos.Save();
            }
        }

        public int RefreshFrecuency
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.RefreshFrecuency; }
            set
            {
                datos.ContactInfo.RefreshFrecuency = value;
                datos.Save();
            }
        }

        public string PolicyNoMain
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PolicyNoMain; }
            set
            {
                datos.ContactInfo.PolicyNoMain = value;
                datos.Save();
            }
        }

        public bool BlackListHasProblem
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.BlackListHasProblem; }
            set
            {
                datos.ContactInfo.BlackListHasProblem = value;
                datos.Save();
            }
        }

        public Statetrust.Framework.Security.Bll.Usuarios.UserTypeEnum UserType
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.UserType; }
            set
            {
                datos.ContactInfo.UserType = value;
                datos.Save();
            }
        }

        //Traer datos del session 
        //Oficina
        public int Corp_Id
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Corp_Id; }
            set
            {
                datos.ContactInfo.Corp_Id = value;
                datos.Save();
            }
        }

        /// <summary>
        /// La descripcion de la nacionalidad del Asegurado
        /// </summary>
        public string Nationality
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Nationality; }
            set
            {
                datos.ContactInfo.Nationality = value;
                datos.Save();
            }
        }

        public int NationalityCountryId
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.NationalityCountryId; }
            set
            {
                datos.ContactInfo.NationalityCountryId = value;
                datos.Save();
            }
        }

        /// <summary>
        ///  Tipos de productos de lineas aliadas
        /// </summary>
        public Utility.AlliedLinesType AlliedLinesProductBehavior
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AlliedLinesProductBehavior; }
            set
            {
                datos.ContactInfo.AlliedLinesProductBehavior = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Setea o devuelte el Tab seleccionado
        /// </summary>
        public Utility.Tab TabSelected
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.TabSelected; }
            set
            {
                datos.ContactInfo.TabSelected = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Verifica si el plan ha sido salvado
        /// </summary>
        public bool isSavePlan
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isSavePlan; }
            set
            {
                datos.ContactInfo.isSavePlan = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Verifica si ha cambiado el lenguage
        /// </summary>
        public bool isChangingLang
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isChangingLang; }
            set
            {
                datos.ContactInfo.isChangingLang = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool isUserCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsUserCot; }
            set
            {
                datos.ContactInfo.IsUserCot = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool isDescuentocot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isDescuentocot; }
            set
            {
                datos.ContactInfo.isDescuentocot = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool isDescuentoCot100Porc
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isDescuentoCot100Porc; }
            set
            {
                datos.ContactInfo.isDescuentoCot100Porc = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsConfirmationCallCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsConfirmationCallCot; }
            set
            {
                datos.ContactInfo.IsConfirmationCallCot = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool CanViewPersonalInfo
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CanViewPersonalInfo; }
            set
            {
                datos.ContactInfo.CanViewPersonalInfo = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool CanViewStatistics
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CanViewStatistics; }
            set
            {
                datos.ContactInfo.CanViewStatistics = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="hdnLang"></param>
        public void SetHiddenFieldLanguage(HiddenField hdnLang)
        {
            hdnLang.Value = Language.ToString();
        }

        /// <summary>
        /// Key Name del Producto seleccionado en Plan Policy
        /// </summary>
        public string KeyNameProduct
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.KeyNameProduct; }
            set
            {
                datos.ContactInfo.KeyNameProduct = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Name Key de el estatus de una Cotizacion / Poliza
        /// </summary>
        public string StatusNameKey
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.StatusNameKey; }
            set
            {
                datos.ContactInfo.StatusNameKey = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Setea o devuelte el lenguage actual
        /// </summary>
        public Utility.Language Language
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Language; }
            set
            {
                datos.ContactInfo.Language = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Setea o devuelte el proyecto actual
        /// </summary>
        public Utility.Project CurrentProject
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Proyect; }
            set
            {
                datos.ContactInfo.Proyect = value;
                datos.Save();
            }
        }

        /// <summary>
        /// RegionID es el id de la region
        /// </summary>
        public int Region_Id
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Region_Id; }
            set
            {
                datos.ContactInfo.Region_Id = value;
                datos.Save();
            }
        }

        public IEnumerable<DropDown> dataConfig
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.DataConfig; }
            set
            {
                datos.ContactInfo.DataConfig = value;
                datos.Save();
            }
        }

        public string CustomerName
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CustomerName; }
            set
            {
                datos.ContactInfo.CustomerName = value;
                datos.Save();
            }
        }

        public bool IsConfirmationCallManagerCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsConfirmationCallManagerCot; }
            set
            {
                datos.ContactInfo.IsConfirmationCallManagerCot = value;
                datos.Save();
            }
        }

        public bool IsCreditoCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsCreditoCot; }
            set
            {
                datos.ContactInfo.IsCreditoCot = value;
                datos.Save();
            }
        }
        public List<String> UsuarioPropiedades
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.UsuarioPropiedades; }
            set
            {
                datos.ContactInfo.UsuarioPropiedades = value;
                datos.Save();
            }
        }

        public bool IsFacultativeCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsFacultativeCot; }
            set
            {
                datos.ContactInfo.IsFacultativeCot = value;
                datos.Save();
            }
        }

        public bool IsValidateBlackListCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsValidateBlackListCot; }
            set
            {
                datos.ContactInfo.IsValidateBlackListCot = value;
                datos.Save();
            }
        }

        public bool IsViewPrimeAndRateCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsViewPrimeAndRateCot; }
            set
            {
                datos.ContactInfo.IsViewPrimeAndRateCot = value;
                datos.Save();
            }
        }

        public bool IsValidateFacultativeCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsValidateFacultativeCot; }
            set
            {
                datos.ContactInfo.IsValidateFacultativeCot = value;
                datos.Save();
            }
        }

        public bool CanPrintInvoice
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CanPrintInvoice; }
            set
            {
                datos.ContactInfo.CanPrintInvoice = value;
                datos.Save();
            }
        }

        public bool IsPreSuscribcionDescuentoCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsPreSuscribcionDescuentoCot; }
            set
            {
                datos.ContactInfo.IsPreSuscribcionDescuentoCot = value;
                datos.Save();
            }
        }

        public bool IsPreSuscribcionRecargoCot
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsPreSuscribcionRecargoCot; }
            set
            {
                datos.ContactInfo.IsPreSuscribcionRecargoCot = value;
                datos.Save();
            }
        }

        public string DefaulltPassword
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.DefaulltPassword; }
            set
            {
                datos.ContactInfo.DefaulltPassword = value;
                datos.Save();
            }
        }

        public string DefaulltPasswordEF
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.DefaulltPasswordEF; }
            set
            {
                datos.ContactInfo.DefaulltPasswordEF = value;
                datos.Save();
            }
        }

        public string user
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.user; }
            set
            {
                datos.ContactInfo.user = value;
                datos.Save();
            }
        }
        public string pass
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.pass; }
            set
            {
                datos.ContactInfo.pass = value;
                datos.Save();
            }
        }

        public string userEF
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.userEF; }
            set
            {
                datos.ContactInfo.userEF = value;
                datos.Save();
            }
        }
        public string passEF
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.passEF; }
            set
            {
                datos.ContactInfo.passEF = value;
                datos.Save();
            }
        }

        public bool isExclusion
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isExclusion; }
            set
            {
                datos.ContactInfo.isExclusion = value;
                datos.Save();
            }
        }

        public bool isVehicleChange
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isVehicleChange; }
            set
            {
                datos.ContactInfo.isVehicleChange = value;
                datos.Save();
            }
        }

        public string FuelTypeDesc
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.FuelTypeDesc; }
            set
            {
                datos.ContactInfo.FuelTypeDesc = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public int QuotationAgentId
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.QuotationAgentId; }
            set
            {
                datos.ContactInfo.QuotationAgentId = value;
                datos.Save();
            }
        }

        public bool isReclamacionesQuotRole
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isReclamacionesQuotRole; }
            set
            {
                datos.ContactInfo.isReclamacionesQuotRole = value;
                datos.Save();
            }
        }

        public bool IsDataReviewMode
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsDataReviewMode;
            }
            set
            {
                datos.ContactInfo.IsDataReviewMode = value;
                datos.Save();
            }
        }

        public bool ContactServicesIsActive
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ContactServicesIsActive; }
            set
            {
                datos.ContactInfo.ContactServicesIsActive = value;
                datos.Save();
            }
        }

        public int Country_Id
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Country_Id; }
            set
            {
                datos.ContactInfo.Country_Id = value;
                datos.Save();
            }
        }

        public int CompanyId
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CompanyId; }
            set
            {
                datos.ContactInfo.CompanyId = value;
                datos.Save();
            }
        }

        public int ProjectId
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ProjectId; }
            set
            {
                datos.ContactInfo.ProjectId = value;
                datos.Save();
            }
        }

        public int? AssignedSubscriberId
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AssignedSubscriberId; }
            set
            {
                datos.ContactInfo.AssignedSubscriberId = value;
                datos.Save();
            }
        }

        public string hdnQuotationTabs
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.hdnQuotationTabs; }
            set
            {
                datos.ContactInfo.hdnQuotationTabs = value;
                datos.Save();
            }
        }

        public string hdnTabGroup
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.hdnTabGroup; }
            set
            {
                datos.ContactInfo.hdnTabGroup = value;
                datos.Save();
            }
        }

        public int? PaymentDetId
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PaymentDetId; }
            set
            {
                datos.ContactInfo.PaymentDetId = value;
                datos.Save();
            }
        }

        public int? PaymentId
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PaymentId; }
            set
            {
                datos.ContactInfo.PaymentId = value;
                datos.Save();
            }
        }

        public int Domesticreg_Id
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Domesticreg_Id;
            }
            set
            {
                datos.ContactInfo.Domesticreg_Id = value;
                datos.Save();
            }
        }

        public int State_Prov_Id
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.State_Prov_Id; }
            set
            {
                datos.ContactInfo.State_Prov_Id = value;
                datos.Save();
            }
        }

        public int City_Id
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.City_Id; }
            set
            {
                datos.ContactInfo.City_Id = value;
                datos.Save();
            }
        }

        public int Office_Id
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Office_Id; }
            set
            {
                datos.ContactInfo.Office_Id = value;
                datos.Save();
            }
        }
        //Fin Oficina 

        public string InsuredFullName
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InsuredFullName; }
            set
            {
                datos.ContactInfo.InsuredFullName = value;
                datos.Save();
            }
        }

        public string AgentName
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AgentName; }
            set
            {
                datos.ContactInfo.AgentName = value;
                datos.Save();
            }
        }

        public string Office
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Office; }
            set
            {
                datos.ContactInfo.Office = value;
                datos.Save();
            }
        }

        public string Policy_Id
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Policy_Id; }
            set
            {
                datos.ContactInfo.Policy_Id = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Nombre del Usuario
        /// </summary>        

        public string UserName
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.UserName; }
            set
            {
                datos.ContactInfo.UserName = value;
                datos.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>            
        public string UserFullName
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.UserFullName; }
            set
            {
                datos.ContactInfo.UserFullName = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Pais de ejecucion
        /// </summary>
        public Utility.Country Country
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Country; }
            set
            {
                datos.ContactInfo.Country = value;
                datos.Save();
            }
        }

        public int Case_Seq_No
        {
            get
            {
                var sessionKey = (HttpContext.Current.Session[key] as SessionList);
                return
                        sessionKey.Stored.ContactInfo.Case_Seq_No != 0
                            ? sessionKey.Stored.ContactInfo.Case_Seq_No
                            : 0;
            }
            set
            {
                datos.ContactInfo.Case_Seq_No = value;
                datos.Save();
            }
        }

        public int Agent_LoginId
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Agent_LoginId != 0) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Agent_LoginId : 0;
            }
            set
            {
                datos.ContactInfo.Agent_LoginId = value;
                datos.Save();
            }
        }

        public int? DesignatedPensionerContactId
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.DesignatedPensionerContactId.HasValue) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.DesignatedPensionerContactId : -1;
            }
            set
            {
                datos.ContactInfo.DesignatedPensionerContactId = value;
                datos.Save();
            }
        }

        public bool HasInsured
        {

            get
            {
                return InsuredAddContactId > 0;
            }

        }

        public int? InsuredAddContactId
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InsuredAddContactId.HasValue) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InsuredAddContactId : -1;
            }
            set
            {
                datos.ContactInfo.InsuredAddContactId = value;
                datos.Save();
            }

        }

        public int Hist_Seq_No
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Hist_Seq_No != 0) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Hist_Seq_No : 0;
            }
            set
            {
                datos.ContactInfo.Hist_Seq_No = value;
                datos.Save();
            }
        }

        //Informacion del Agente
        public int? Agent_Id
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Agent_Id != 0) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Agent_Id : 0;
            }
            set
            {
                datos.ContactInfo.Agent_Id = value;
                datos.Save();
            }
        }
        public int? InspectorAgentId
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InspectorAgentId != 0) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InspectorAgentId : 0;
            }
            set
            {
                datos.ContactInfo.InspectorAgentId = value;
                datos.Save();
            }
        }
        //Informacion del Usuario
        public int? UserID
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.UserID;
            }
            set
            {
                datos.ContactInfo.UserID = value;
                datos.Save();
            }
        }
        public Boolean isUser
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isUser;
            }
            set
            {
                datos.ContactInfo.isUser = value;
                datos.Save();
            }
        }

        public int CounterFreQRefresh
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.CounterFreQRefresh;
            }
            set
            {
                datos.ContactInfo.CounterFreQRefresh = value;
                datos.Save();
            }
        }

        public bool IsAgentQuotRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsAgentQuotRole;
            }
            set
            {
                datos.ContactInfo.IsAgentQuotRole = value;
                datos.Save();
            }
        }
        public bool IsSuscripcionQuotRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsSuscripcionQuotRole;
            }
            set
            {
                datos.ContactInfo.IsSuscripcionQuotRole = value;
                datos.Save();
            }
        }
        public bool IsInspectorQuotRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsInspectorQuotRole;
            }
            set
            {
                datos.ContactInfo.IsInspectorQuotRole = value;
                datos.Save();
            }
        }
        public bool IsSuscripcionManagerQuotRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsSuscripcionManagerQuotRole;
            }
            set
            {
                datos.ContactInfo.IsSuscripcionManagerQuotRole = value;
                datos.Save();
            }
        }
        public bool IsDirectorQuotRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsDirectorQuotRole;
            }
            set
            {
                datos.ContactInfo.IsDirectorQuotRole = value;
                datos.Save();
            }
        }
        public bool IsSucripcionDirectorQuotRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsSucripcionDirectorQuotRole;
            }
            set
            {
                datos.ContactInfo.IsSucripcionDirectorQuotRole = value;
                datos.Save();
            }
        }
        public bool IsAngetInspectorQuotRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsAngetInspectorQuotRole;
            }
            set
            {
                datos.ContactInfo.IsAngetInspectorQuotRole = value;
                datos.Save();
            }
        }

        public string Bandeja
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Bandeja;
            }
            set
            {
                datos.ContactInfo.Bandeja = value;
                datos.Save();
            }
        }

        public DataTable AgentChain
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AgentChain;
            }
            set
            {
                datos.ContactInfo.AgentChain = value;
                datos.Save();
            }
        }

        public bool ViewCreditCardInformation
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ViewCreditCardInformation;
            }
            set
            {
                datos.ContactInfo.ViewCreditCardInformation = value;
                datos.Save();
            }
        }


        public bool IsAgentServiceQuoRole
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsAgentServiceQuoRole;
            }
            set
            {
                datos.ContactInfo.IsAgentServiceQuoRole = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Indica la relacion del Owner con el agente
        /// </summary>
        public int? Relationship_With_Owner_ToAgentId
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Relationship_With_Owner_ToAgentId.HasValue) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Relationship_With_Owner_ToAgentId.Value : -1;
            }
            set
            {
                datos.ContactInfo.Relationship_With_Owner_ToAgentId = value;
                datos.Save();
            }
        }

        public int? InsuredVehicleId
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InsuredVehicleId.HasValue) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InsuredVehicleId.Value : -1;
            }
            set
            {
                datos.ContactInfo.InsuredVehicleId = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Número de prestamo
        /// </summary>
        public string LoanPetitionNo
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.LoanPetitionNo;
            }
            set
            {
                datos.ContactInfo.LoanPetitionNo = value;
                datos.Save();
            }
        }

        public int? ReviewId
        {
            get
            {
                return ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ReviewId.HasValue) ?
                    (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ReviewId.Value : -1;
            }
            set
            {
                datos.ContactInfo.ReviewId = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Indica si se hizo una busqueda
        /// </summary>
        public bool IsDataSearch
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsDataSearch;
            }
            set
            {
                datos.ContactInfo.IsDataSearch = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Indica si el registro esta en solo lectura
        /// </summary>
        public bool IsReadOnly
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsReadOnly;
            }
            set
            {
                datos.ContactInfo.IsReadOnly = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Indica si el caso esta en ready To Review
        /// </summary>
        public bool IsReadyToReview
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsReadyToReview;
            }
            set
            {
                datos.ContactInfo.IsReadyToReview = value;
                datos.Save();
            }
        }

        public bool IsPlanChange
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.IsPlanChange;
            }
            set
            {
                datos.ContactInfo.IsPlanChange = value;
                datos.Save();
            }
        }

        public int getCurrentLanguage()
        {
            var NameLanguage = Enum.GetName(typeof(Utility.Language), this.Language);
            var result = Utility.getvalueFromEnumType(NameLanguage, typeof(Utility.Language));
            return result;
        }

        public int getCurrentProyect()
        {
            var NameProject = Enum.GetName(typeof(Utility.Project), this.CurrentProject);
            var result = Utility.getvalueFromEnumType(NameProject, typeof(Utility.Project));
            return result;
        }

        /// <summary>
        /// Indica la relacion del agente con el asegurado
        /// </summary>
        public int? Relationship_With_Insured_Id
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Relationship_With_Insured_Id;
            }
            set
            {
                datos.ContactInfo.Relationship_With_Insured_Id = value;
                datos.Save();
            }
        }

        //Informacion del Owner//
        public int? ContactEntityID
        {
            get
            {
                return
                  ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ContactEntityID.HasValue) ?
                  (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ContactEntityID : -1;
            }
            set
            {
                datos.ContactInfo.ContactEntityID = value;
                datos.Save();

            }
        }

        //Informacion del Owner//
        public int? Owner_Id
        {
            get
            {
                return
                  ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Owner_Id.HasValue) ?
                  (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Owner_Id : -1;
            }
            set
            {
                datos.ContactInfo.Owner_Id = value;
                datos.Save();

            }
        }
        //Informacion del Representante Legal//
        public int? Agent_Legal
        {
            get
            {
                return
                  ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Agent_Legal.HasValue) ?
                  (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Agent_Legal : -1;
            }
            set
            {
                datos.ContactInfo.Agent_Legal = value;
                datos.Save();

            }
        }

        //Informacion del Contacto//
        public int? Contact_Id
        {
            get
            {
                return
                  ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Contact_Id.HasValue) ?
                  (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Contact_Id : -1;
            }
            set
            {
                datos.ContactInfo.Contact_Id = value;
                datos.Save();

            }
        }


        //Informacion del Contacto//
        public int? StudentContactId
        {
            get
            {
                return
                  ((HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.StudentContactId.HasValue) ?
                  (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.StudentContactId : -1;
            }
            set
            {
                datos.ContactInfo.StudentContactId = value;
                datos.Save();

            }
        }

        /// <summary>
        /// Indica a que tab se va a redireccionar
        /// </summary>
        public String TabRedirect
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.TabRedirect; }
            set
            {
                datos.ContactInfo.TabRedirect = value;
                datos.Save();

            }
        }

        public Utility.Tabs InboxTabRedirect
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InboxTabRedirect; }
            set
            {
                datos.ContactInfo.InboxTabRedirect = value;
                datos.Save();

            }
        }

        /// <summary>
        /// Indica si se mostrara el form de add new contact
        /// </summary>
        public Boolean ShowAddNewContact
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.ShowAddNewContact; }
            set
            {
                datos.ContactInfo.ShowAddNewContact = value;
                datos.Save();

            }
        }

        /// <summary>
        /// Indica a que tab se va a redireccionar
        /// </summary>
        public int PagerSize
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PagerSize; }
            set
            {
                datos.ContactInfo.PagerSize = value;
                datos.Save();

            }
        }


        /// <summary>
        /// Indica si es un nuevo caso que se esta trabajando
        /// </summary>
        public bool isNewCase
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isNewCase; }
            set
            {
                datos.ContactInfo.isNewCase = value;
                datos.Save();

            }
        }

        /// <summary>
        /// Indica si es el Contacto es el Owner
        /// </summary>
        public bool isOwnerContact
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isOwnerContact; }
            set
            {
                datos.ContactInfo.isOwnerContact = value;
                datos.Save();

            }
        }

        /// <summary>
        /// Indica si el owner es una compañia
        /// </summary>
        public bool isCompanyOwner
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.isCompanyOwner;
            }
            set
            {
                datos.ContactInfo.isCompanyOwner = value;
                datos.Save();
            }
        }

        public IEnumerable<Policy.TabRol> TabsByRol
        {
            get
            {
                return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.TabsByRol;
            }
            set
            {
                datos.ContactInfo.TabsByRol = value;
                datos.Save();
            }
        }
        public string PolicyOffice
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PolicyOffice; }
            set
            {
                datos.ContactInfo.PolicyOffice = value;
                datos.Save();
            }
        }
        public decimal InsuranceAmount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.InsuranceAmount; }
            set
            {
                datos.ContactInfo.InsuranceAmount = value;
                datos.Save();
            }
        }

        /// <summary>
        /// Inicializa la session con los valores por defecto
        /// </summary>
        public void CleanSessionCase()
        {
            datos.ContactInfo.CleanSessionCase();
        }


        /// <summary>
        /// Devuelve la oficina actual con el agente actual
        /// </summary>
        /// <returns></returns>
        public Utility.itemOfficce GetCurrentOffice()
        {
            return new Utility.itemOfficce
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticregId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id,
                AgentId = Agent_Id.Value
            };
        }

        /// <summary>
        /// Devuelve la oficina actual sin el agente
        /// </summary>
        /// <returns></returns>
        public Utility.itemOfficceWithoutAgent GetCurrentOfficeWithoutAgent()
        {
            return new Utility.itemOfficceWithoutAgent
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticregId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id
            };
        }

        /// <summary>
        /// Devuelve la linea de negocios basandose en el Producto
        /// </summary>
        /// <param name="ProductBehavior"></param>
        /// <returns></returns>
        public Utility.ProductLine GetProductLine(Utility.ProductBehavior ProductBehavior)
        {

            Utility.ProductLine result = Utility.ProductLine.None;

            switch (ProductBehavior)
            {
                #region Planes de Retiro
                case Utility.ProductBehavior.Horizon:
                case Utility.ProductBehavior.Axys:
                    result = Utility.ProductLine.Retirement;
                    break;
                #endregion
                #region Planes de Educacion
                case Utility.ProductBehavior.EduPlan:
                case Utility.ProductBehavior.Scholar:
                    result = Utility.ProductLine.Education;
                    break;
                #endregion
                #region Planes a Termino
                case Utility.ProductBehavior.CompassIndex:
                case Utility.ProductBehavior.Legacy:
                case Utility.ProductBehavior.Sentinel:
                case Utility.ProductBehavior.Lighthouse:
                    result = Utility.ProductLine.TermInsurance;
                    break;
                #endregion
                #region Panes de vida
                case Utility.ProductBehavior.Guardian:
                case Utility.ProductBehavior.GuardianPlus:
                case Utility.ProductBehavior.Orion:
                case Utility.ProductBehavior.OrionPlus:
                    result = Utility.ProductLine.LifeInsurance;
                    break;
                #endregion
                #region Planes Funerarios
                case Utility.ProductBehavior.Luminis:
                case Utility.ProductBehavior.LuminisVIP:
                case Utility.ProductBehavior.Exequium:
                case Utility.ProductBehavior.ExequiumVIP:
                    result = Utility.ProductLine.Funeral;
                    break;
                #endregion
                #region Planes de Salud
                case Utility.ProductBehavior.Elite:
                case Utility.ProductBehavior.Select:
                case Utility.ProductBehavior.Fortis:
                case Utility.ProductBehavior.Serenity:
                case Utility.ProductBehavior.Asistencia30dias:
                case Utility.ProductBehavior.Asistencia60dias:
                case Utility.ProductBehavior.Asistencia90dias:
                    result = Utility.ProductLine.HealthInsurance;
                    break;
                #endregion
                default:
                    break;
            }

            return result;
        }

        /// <summary>
        /// Devuelve el caso actual, el que se esta trabajando en el momento
        /// </summary>
        /// <returns></returns>
        public Case GetCurrentCase()
        {
            return new Entity.UnderWriting.Entities.Case()
            {
                CorpId = datos.ContactInfo.Corp_Id,
                RegionId = datos.ContactInfo.Region_Id,
                CountryId = datos.ContactInfo.Country_Id,
                DomesticregId = datos.ContactInfo.Domesticreg_Id,
                StateProvId = datos.ContactInfo.State_Prov_Id,
                CityId = datos.ContactInfo.City_Id,
                CaseSeqNo = datos.ContactInfo.Case_Seq_No,
                HistSeqNo = datos.ContactInfo.Hist_Seq_No,
                OfficeId = datos.ContactInfo.Office_Id,
                UserId = UserID.Value
            };
        }
        #endregion

        #endregion

        #region Setting's
        /// <summary>
        /// Insert a new phone to contact
        /// </summary>
        /// 
        public void SetPhoneContact(List<Contact.Phone> itemList)
        {
            //Validaciones o reglas del negocio  
            foreach (var item in itemList)
            {
                oContactManager.SetPhone(item);
            }
        }

        /// <summary>
        /// Actualiza
        /// </summary>
        /// <param name="item"></param>
        public int SetPhoneContact(Contact.Phone item)
        {
            //oContactServicesClient.SetContactPhone(Utility.Encrypt(item.CorpId), Utility.Encrypt(item.ContactId));

            return
                oContactManager.SetPhone(item);
        }

        /// <summary>
        /// Inserta o actualiza un email address
        /// </summary>
        /// <param name="item"></param>
        public int SetEmailContact(Contact.Email item)
        {
            //oContactServicesClient.SetContactEmail(Utility.Encrypt(item.CorpId), Utility.Encrypt(item.ContactId));

            return oContactManager.SetEmail(item);
        }

        /// <summary>
        /// Inserta o actualiza un email address
        /// </summary>
        /// <param name="item"></param>
        public int SetEmailContactJuridico(Contact.Email item)
        {
            //oContactServicesClient.SetContactEmail(Utility.Encrypt(item.CorpId), Utility.Encrypt(item.ContactId));

            return oContactManager.SetEmail(item);
        }

        /// <summary>
        /// Inserta o actualiza una address
        /// </summary>
        /// <param name="item"></param>
        public void SetAddressContact(Contact.Address item)
        {
            //Validaciones o reglas del negocio  
            oContactManager.SetAddress(item);
        }

        /// <summary>
        /// Inserta o actualiza una lista de Address
        /// </summary>
        /// <param name="itemList"></param>
        public void SetAddressContact(List<Contact.Address> itemList)
        {
            foreach (var item in itemList)
                oContactManager.SetAddress(item);
        }

        /// <summary>
        /// Inserta o modifica un documento 
        /// </summary>
        /// <param name="item"></param>
        public int SetIdentificationsContact(Contact.IdDocument item)
        {
            int Result;
            // oContactServicesClient.SetContactEmail(Utility.Encrypt(Corp_Id.ToString()), Utility.Encrypt(item.ContactId));
            Result = oContactManager.SetIdDocument(item);
            //Validaciones o reglas del negocio  
            return Result;
        }

        /// <summary>
        /// Inserta o modifica un documento para juridico
        /// </summary>
        /// <param name="item"></param>
        public int SetIdentificationsContactJuridico(Contact.IdDocument item)
        {
            int Result;
            // oContactServicesClient.SetContactEmail(Utility.Encrypt(Corp_Id.ToString()), Utility.Encrypt(item.ContactId));
            Result = oContactManager.SetIdDocumentJuridico(item);
            //Validaciones o reglas del negocio  
            return Result;
        }

        /// <summary>
        /// Inserta o actualiza una direccion de correo electronico
        /// </summary>
        /// <param name="itemList"></param>
        public void SetEmailContact(List<Contact.Email> itemList)
        {
            //Validaciones o reglas del negocio  
            foreach (var item in itemList)
                oContactManager.SetEmail(item);
        }

        /// <summary>
        /// Inserta o actualiza una direccion de correo electronico
        /// </summary>
        /// <param name="itemList"></param>
        public void SetEmailContactJuridico(List<Contact.Email> itemList)
        {
            //Validaciones o reglas del negocio  
            foreach (var item in itemList)
                oContactManager.SetEmail(item);
        }

        /// <summary>
        /// Inserta o actualiza una lista de documentos de identificacion
        /// </summary>
        /// <param name="itemList"></param>
        public void SetIdentificationsContact(List<Contact.IdDocument> itemList)
        {
            //Validaciones o reglas del negocio  
            if (itemList == null || !itemList.Any()) return;

            foreach (var item in itemList)
                oContactManager.SetIdDocument(item);
        }

        /// <summary>
        /// Inserta o actualiza una lista de documentos de identificacion para juridico
        /// </summary>
        /// <param name="itemList2"></param>
        public void SetIdentificationsContactJuridico(List<Contact.IdDocument> itemList2)
        {
            //Validaciones o reglas del negocio  
            if (itemList2 == null || !itemList2.Any()) return;

            foreach (var item2 in itemList2)
                oContactManager.SetIdDocumentJuridico(item2);
        }


        /// <summary>
        /// Inserta o actualiza una lista de contacto politico
        /// </summary>
        /// <param name="itemList"></param>
        public void SetCitizenContact(List<Contact.CitizenContact> itemList)
        {
            //Validaciones o reglas del negocio  
            if (itemList == null || !itemList.Any()) return;

            foreach (var item in itemList)
                oContactManager.SetCitizenContact(item);
        }

        /// <summary>
        /// Genera un nuevo caso
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public Policy SetNewContact(Case.NewCase item)
        {
            //Validaciones o reglas del negocio  
            var newPolicy = oCaseManager.GenerateNewCase(item);
            return newPolicy;
        }

        /// <summary>
        /// Crea un nueva poliza y un contacto a la vez devuelve el mismo contacto
        /// Genera un nuevo caso si se le envia un contacto este es agregado como asegurado y si no entonces crea
        /// uno nuevo contacto como asegurado del caso.
        /// </summary>
        /// <returns></returns>
        public Contact SaveNewContact()
        {
            var newPolicy = new Policy();

            var decimalresult = decimal.Multiply(500.6m, 9);

            if (isNewCase)
            {
                newPolicy = SetNewContact(new Entity.UnderWriting.Entities.Case.NewCase()
                {
                    CorpId = Corp_Id,
                    RegionId = Region_Id,
                    CountryId = Country_Id,
                    DomesticregId = Domesticreg_Id,
                    StateProvId = State_Prov_Id,
                    CityId = City_Id,
                    OfficeId = Office_Id,
                    AgentId = Agent_Id.Value,
                    RelationshiptoAgent = Relationship_With_Insured_Id.HasValue ? Relationship_With_Insured_Id.Value : (int?)null,
                    ContactId = Contact_Id.HasValue ? Contact_Id.Value : (int?)null,
                    ContactTypeId = Utility.ContactTypeId.Contact.ToInt(),
                    UserId = UserID.Value
                });

                Case_Seq_No = newPolicy.CaseSeqNo;
                Hist_Seq_No = newPolicy.HistSeqNo;
                Contact_Id = newPolicy.ContactId;
                ContactEntityID = this.Contact_Id;
                PaymentId = newPolicy.PaymentId;
            }

            var newContact = this.oContactManager.GetContact(Corp_Id,
                                                                 Region_Id,
                                                                 Country_Id,
                                                                 Domesticreg_Id,
                                                                 State_Prov_Id,
                                                                 City_Id,
                                                                 Office_Id,
                                                                 Case_Seq_No,
                                                                 Hist_Seq_No,
                                                                 Contact_Id,
                                                                 Utility.ContactRoleIDType.Client.ToInt(),
                                                                 languageId: getCurrentLanguage()
                                                                 );

            return newContact;
        }

        /// <summary>
        /// Eliminar la poliza
        /// </summary>
        /// <returns></returns>
        public int DeletePolicy()
        {

            return oPolicyManager.DeletePolicy(
                                               Corp_Id,
                                               Region_Id,
                                               Country_Id,
                                               Domesticreg_Id,
                                               State_Prov_Id,
                                               City_Id,
                                               Office_Id,
                                               Case_Seq_No,
                                               Hist_Seq_No,
                                               UserID.Value
                                               );


        }

        public int AddOwnerToPolicy(bool IsCompany, bool SameAsInsured)
        {
            var contactID = oPolicyManager.AddContactToPolicy(Corp_Id,
                                                             Region_Id,
                                                             Country_Id,
                                                             Domesticreg_Id,
                                                             State_Prov_Id,
                                                             City_Id,
                                                             Office_Id,
                                                             Case_Seq_No,
                                                             Hist_Seq_No,
                                                             //Rabel was here.
                                                             SameAsInsured
                                                                ? Contact_Id.HasValue ? Contact_Id.Value : -1
                                                                : Owner_Id.HasValue ? Owner_Id.Value : -1,
                                                             IsCompany ? (int)Utility.ContactTypeId.Company : (int)Utility.ContactTypeId.Contact, //ContactTypeId 5 Para Compañia
                                                             1, //ContactRoleTypeId para el tipo Owner
                                                             Agent_Id.Value,
                                                            UserID.Value
                                                           );

            return contactID;
        }


        /// <summary>
        /// Agregamos el contacto del agente legal
        /// </summary>
        /// <returns></returns>
        public int AddAgentLegalToPolicy()
        {
            var contactID = oPolicyManager.AddContactToPolicy(Corp_Id,
                                                             Region_Id,
                                                             Country_Id,
                                                             Domesticreg_Id,
                                                             State_Prov_Id,
                                                             City_Id,
                                                             Office_Id,
                                                             Case_Seq_No,
                                                             Hist_Seq_No,
                                                             Agent_Legal.HasValue ? Agent_Legal.Value : -1,
                                                             (int)Utility.ContactTypeId.AgentLegal,
                                                             (int)Utility.ContactRoleIDType.Legal,
                                                             Agent_Id.Value,
                                                             UserID.Value
                                                           );

            return contactID;
        }

        public int AddInsuredToPolicy(int vContactID)
        {
            var contactID = oPolicyManager.AddContactToPolicy(Corp_Id,
                                                            Region_Id,
                                                            Country_Id,
                                                            Domesticreg_Id,
                                                            State_Prov_Id,
                                                            City_Id,
                                                            Office_Id,
                                                            Case_Seq_No,
                                                            Hist_Seq_No,
                                                            vContactID,
                                                            1,
                                                            (int)Utility.ContactRoleIDType.Client, //ContactRoleTypeId para el tipo insured Utility.ContactRoleIDType.Client
                                                            Agent_Id.Value,
                                                            UserID.Value
                                                            );

            return contactID;
        }

        public bool GP(Utility.itemGp item)
        {
            var vSourcePlatform = "New Business";

            var result = false;

            var wsGPPayment = new GPPaymentsClient();

            Func<WSGPPayments.CashPayment> NewCashPayment = () => new WSGPPayments.CashPayment
            {
                QuoteNumber = string.Empty,
                CheckbookID = string.Empty,
                PaymentNotes = string.Empty,
                PolicyNumber = item.PolicyNo,
                PaymentDate = item.pPaymentDate,
                PaymentAmount = item.pAmount,
                SourcePlatform = vSourcePlatform,
                SourceTransactionID = item.DetailId.ToString(),
                CurrencyID = item.currencyCode,
                ReceivedBy = item.UserName
            };

            switch (item.PaymentSourceType)
            {

                case Utility.PaymentSourceType.ACH:
                    {
                        ACHPayment objPayment = new ACHPayment
                        {
                            QuoteNumber = string.Empty,
                            CheckbookID = string.Empty,
                            PaymentNotes = string.Empty,
                            PolicyNumber = item.PolicyNo,
                            PaymentDate = item.pPaymentDate,
                            PaymentAmount = item.pAmount,
                            SourcePlatform = vSourcePlatform,
                            SourceTransactionID = item.DetailId.ToString(),
                            CurrencyID = item.currencyCode,
                            ReceivedBy = item.UserName
                        };

                        objPayment.BankRoutingNumber = item.AbaNumber;
                        objPayment.BankAccountNumber = item.AccountNumber;
                        objPayment.BankAccountType = item.PaymentTypeId;
                        objPayment.BankAccountHolder = item.AccountName;
                        result = wsGPPayment.NewACHPayment(objPayment).Result;
                        break;
                    }
                case Utility.PaymentSourceType.CreditCard:
                    {
                        CreditCardPayment objPayment = new CreditCardPayment
                        {
                            QuoteNumber = string.Empty,
                            CheckbookID = string.Empty,
                            PaymentNotes = string.Empty,
                            PolicyNumber = item.PolicyNo,
                            PaymentDate = item.pPaymentDate,
                            PaymentAmount = item.pAmount,
                            SourcePlatform = vSourcePlatform,
                            SourceTransactionID = item.DetailId.ToString(),
                            CurrencyID = item.currencyCode,
                            ReceivedBy = item.UserName
                        };

                        objPayment.CreditCardIssuer = "CardNet";
                        objPayment.CreditCardMaskedCardNumber = item.AccountNumber;
                        objPayment.CreditCardProcessorTransactionNumber = item.transactionNumber;
                        result = wsGPPayment.NewCreditCardPayment(objPayment).Result;
                        break;
                    }
                case Utility.PaymentSourceType.Deposit:
                    break;
                case Utility.PaymentSourceType.Check:
                    {
                        CheckPayment objPayment = new CheckPayment
                        {
                            QuoteNumber = string.Empty,
                            CheckbookID = string.Empty,
                            PaymentNotes = string.Empty,
                            PolicyNumber = item.PolicyNo,
                            PaymentDate = item.pPaymentDate,
                            PaymentAmount = item.pAmount,
                            SourcePlatform = vSourcePlatform,
                            SourceTransactionID = item.DetailId.ToString(),
                            CurrencyID = item.currencyCode,
                            ReceivedBy = item.UserName
                        };

                        objPayment.CheckNumber = item.AccountNumber;
                        result = wsGPPayment.NewCheckPayment(objPayment).Result;
                        break;
                    }
                case Utility.PaymentSourceType.Wire:
                    break;
                case Utility.PaymentSourceType.Cash:
                    {
                        CashPayment objPayment = new CashPayment
                        {
                            QuoteNumber = string.Empty,
                            CheckbookID = string.Empty,
                            PaymentNotes = string.Empty,
                            PolicyNumber = item.PolicyNo,
                            PaymentDate = item.pPaymentDate,
                            PaymentAmount = item.pAmount,
                            SourcePlatform = vSourcePlatform,
                            SourceTransactionID = item.DetailId.ToString(),
                            CurrencyID = item.currencyCode,
                            ReceivedBy = item.UserName
                        };
                        result = wsGPPayment.NewCashPayment(objPayment).Result;
                        break;
                    }
                default:
                    break;
            }

            return result;
        }

        #endregion

        #region Getting's
        /// <summary>
        /// Devuelve un Enumerable con la informacion de todos los tab validados
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Policy.Tab> getTabConfig()
        {
            //Buscar la configuracion de acceso a los tabs
            var TabConfig = this.oPolicyManager.GetTabValidation(this.Corp_Id,
                                                                 this.Region_Id,
                                                                 this.Country_Id,
                                                                 this.Domesticreg_Id,
                                                                 this.State_Prov_Id,
                                                                 this.City_Id,
                                                                 this.Office_Id,
                                                                 this.Case_Seq_No,
                                                                 this.Hist_Seq_No
                                                                );
            return TabConfig;

        }

        /// <summary>
        /// Obtiene un objeto json con los datos de la oficina
        /// </summary>
        /// <returns></returns>
        public string GetInfoAgentJSON()
        {
            String Data = null;

            try
            {
                //Armar el item de la oficina con su agente
                var itemOffice = new Utility.itemOfficce()
                {
                    CorpId = Corp_Id,
                    RegionId = Region_Id,
                    CountryId = Country_Id,
                    DomesticregId = Domesticreg_Id,
                    StateProvId = State_Prov_Id,
                    CityId = City_Id,
                    OfficeId = Office_Id,
                    AgentId = Agent_Id.Value
                };

                Data = Utility.serializeToJSON<Utility.itemOfficce>(itemOffice);
            }
            catch (Exception)
            {

            }

            return Data;
        }

        /// <summary>
        /// Devuelve un contacto pasando como parametro el id del agente
        /// </summary>
        /// <param name="agentID"></param>
        /// <returns></returns>
        public IEnumerable<Contact.Search> GettingContactByAgent(int agentID, Utility.ContactTypeId ContactTypeID)
        {
            var corpId = (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.Corp_Id;
            return oContactManager.ContactSearchByAgent(corpId, agentID, (int)ContactTypeID);
        }

        /// <summary>
        /// Obtiene informacion del contacto
        /// </summary>
        /// <param name="ContactID"></param>
        /// <returns></returns>
        public Contact GetContact(int ContactID)
        {
            var contactItem = this.oContactManager.GetContact(Corp_Id, ContactID, languageId: Language.ToInt());
            return contactItem;
        }

        /// <summary>
        /// Obtiene un informacion del contacto
        /// </summary>
        /// <param name="ContactType"></param>
        /// <returns></returns>
        public Contact GetContactInfo(Utility.ContactRoleIDType ContactType)
        {
            var contactItem = this.oContactManager.GetContact(Corp_Id,
                                                                  Region_Id,
                                                                  Country_Id,
                                                                  Domesticreg_Id,
                                                                  State_Prov_Id,
                                                                  City_Id,
                                                                  Office_Id,
                                                                  Case_Seq_No,
                                                                  Hist_Seq_No,
                                                                  null,
                                                                  Convert.ToInt32(ContactType),
                                                                  languageId: getCurrentLanguage()
                                                                 );
            return contactItem;
        }

        /// <summary>
        /// Obtiene una lista de CitizenShip
        /// </summary>
        /// <returns></returns>
        public Contact.Citizenship GetContactCitizenship()
        {
            var CitizenshipList = oContactManager.GetContactCitizenshipByContact(ContactEntityID.Value);

            Contact.Citizenship Citizenship = null;

            if (CitizenshipList.Any())
                Citizenship = CitizenshipList.FirstOrDefault();

            return Citizenship;
        }

        /// <summary>
        /// Obtiene una lista de CitizenShip
        /// </summary>
        /// <returns></returns>
        public Contact.Citizenship GetContactCitizenship(int id)
        {
            var CitizenshipList = oContactManager.GetContactCitizenshipByContact(id);

            Contact.Citizenship Citizenship = null;

            if (CitizenshipList.Any())
                Citizenship = CitizenshipList.FirstOrDefault();

            return Citizenship;
        }

        /// <summary>
        /// Obtiene una lista de address
        /// </summary>
        /// <returns></returns>
        public List<Contact.Address> GetCommunicatonAdress()
        {
            var addressList = oContactManager.GetCommunicatonAdress(Corp_Id, ContactEntityID.Value, languageId: Language.ToInt()).ToList();

            return addressList;
        }

        /// <summary>
        /// Obtiene una lista de address para juridico
        /// </summary>
        /// <returns></returns> 
        public List<Contact.Address> GetCommunicatonAdressJuridico()
        {
            var addressList = oContactManager.GetCommunicatonAdress(Corp_Id, Agent_Legal.Value, languageId: Language.ToInt()).ToList();

            return addressList;
        }

        /// <summary>
        /// Obtiene una lista de Emails
        /// </summary>
        /// <returns></returns>
        public List<Contact.Email> GetCommunicationEmail()
        {
            var emailList = oContactManager.GetCommunicatonEmail(Corp_Id, ContactEntityID.Value, languageId: Language.ToInt()).ToList();

            return emailList;
        }

        /// <summary>
        /// Obtiene una lista de Emails para juridico
        /// </summary>
        /// <returns></returns>
        public List<Contact.Email> GetCommunicationEmailJuridico()
        {
            var emailList = oContactManager.GetCommunicatonEmailJuridico(Corp_Id, Agent_Legal.Value, languageId: Language.ToInt()).ToList();

            return emailList;
        }

        /// <summary>
        /// Obtiene una lista de Phones
        /// </summary>
        /// <returns></returns>
        public List<Contact.Phone> GetCommunicatonPhoneLegal(int idContactAgentLegal)
        {
            var phoneList = oContactManager.GetCommunicatonPhone(Corp_Id, idContactAgentLegal, languageId: Language.ToInt()).ToList();

            return phoneList;
        }

        /// <summary>
        /// Obtiene una lista de Phones
        /// </summary>
        /// <returns></returns>
        public List<Contact.Phone> GetCommunicatonPhone()
        {
            var phoneList = oContactManager.GetCommunicatonPhone(Corp_Id, ContactEntityID.Value, languageId: Language.ToInt()).ToList();

            return phoneList;
        }

        /// <summary>
        /// Obtiene una lista de Id Documents
        /// </summary>
        /// <returns></returns>
        public List<Contact.IdDocument> GetAllIdDocumentInformation()
        {

            var documentList = oContactManager.GetAllIdDocumentInformation(ContactEntityID.Value, Language.ToInt()).ToList();

            return documentList;
        }

        /// <summary>
        /// Obtiene una lista de contacto politico
        /// </summary>
        /// <returns></returns>
        public List<Contact.CitizenContact> GetAllCitizenContact(Contact.CitizenContact Contact)
        {

            var documentList = oContactManager.GetAllCitizenContact(Contact).ToList();

            return documentList;
        }

        /// <summary>
        /// Obtiene una lista de Id Documents
        /// </summary>
        /// <returns></returns>
        public List<Contact.IdDocument> GetAllIdDocumentInformationJuridico()
        {

            var documentList = oContactManager.GetAllIdDocumentInformationJuridico(Agent_Legal.Value, Language.ToInt()).ToList();

            return documentList;
        }

        /// <summary>
        /// Obtiene una lista de Social Exposure
        /// </summary>
        /// <returns></returns>
        public List<Entity.UnderWriting.Entities.Contact.SocialExposure> GetContactSocialExposureByContact()
        {
            var SocialExposureList = this.oContactManager.GetContactSocialExposureByContact(Corp_Id,
                                                                                      Region_Id,
                                                                                      Country_Id,
                                                                                      Domesticreg_Id,
                                                                                      State_Prov_Id,
                                                                                      City_Id, Office_Id,
                                                                                      Case_Seq_No,
                                                                                      Hist_Seq_No,
                                                                                      ContactEntityID,
                                                                                      languageId: getCurrentLanguage()
                                                                                      ).ToList();

            return SocialExposureList;
        }

        /// <summary>
        /// Obtiene una lista de Social Exposure para Juridico
        /// </summary>
        /// <returns></returns>
        public List<Entity.UnderWriting.Entities.Contact.SocialExposure> GetContactSocialExposureByContactJuridico()
        {
            var SocialExposureList = this.oContactManager.GetContactSocialExposureByContactJuridico(Corp_Id,
                                                                                      Region_Id,
                                                                                      Country_Id,
                                                                                      Domesticreg_Id,
                                                                                      State_Prov_Id,
                                                                                      City_Id, Office_Id,
                                                                                      Case_Seq_No,
                                                                                      Hist_Seq_No,
                                                                                      Agent_Legal,
                                                                                      languageId: getCurrentLanguage()
                                                                                      ).ToList();

            return SocialExposureList;
        }

        /// <summary>
        /// Obtiene una lista de Social Exposure Relationship
        /// </summary>
        /// <returns></returns>
        public List<Entity.UnderWriting.Entities.Contact.SocialExposureRelationship> GetContactSocialExposureRelationshipByContact()
        {
            var SocialExposureRelationshipList = this.oContactManager.GetContactSocialExposureRelationshipByContact(Corp_Id,
                                                                                                                        Region_Id,
                                                                                                                        Country_Id,
                                                                                                                        Domesticreg_Id,
                                                                                                                        State_Prov_Id,
                                                                                                                        City_Id, Office_Id,
                                                                                                                        Case_Seq_No,
                                                                                                                        Hist_Seq_No,
                                                                                                                        ContactEntityID,
                                                                                                                        languageId: getCurrentLanguage()
                                                                                                                       ).ToList();

            return SocialExposureRelationshipList;
        }

        /// <summary>
        /// Obtiene una lista de Social Exposure Relationship
        /// </summary>
        /// <returns></returns>
        public List<Entity.UnderWriting.Entities.Contact.SocialExposureRelationship> GetContactSocialExposureRelationshipByContactJuridico()
        {
            var SocialExposureRelationshipList = this.oContactManager.GetContactSocialExposureRelationshipByContactJuridico(Corp_Id,
                                                                                                                        Region_Id,
                                                                                                                        Country_Id,
                                                                                                                        Domesticreg_Id,
                                                                                                                        State_Prov_Id,
                                                                                                                        City_Id, Office_Id,
                                                                                                                        Case_Seq_No,
                                                                                                                        Hist_Seq_No,
                                                                                                                        Agent_Legal,
                                                                                                                        languageId: getCurrentLanguage()
                                                                                                                       ).ToList();

            return SocialExposureRelationshipList;
        }

        /// <summary>
        /// Obtiene una lista de Citizen Question        
        ///</summary>
        /// <returns></returns>
        public List<Entity.UnderWriting.Entities.Contact.CitizenQuestion> GetContactCitizenQuestionByContact()
        {
            var CitizenQuestionList = this.oContactManager.GetContactCitizenQuestionByContact(Corp_Id,
                                                                                              Region_Id,
                                                                                              Country_Id,
                                                                                              Domesticreg_Id,
                                                                                              State_Prov_Id,
                                                                                              City_Id, Office_Id,
                                                                                              Case_Seq_No,
                                                                                              Hist_Seq_No,
                                                                                              ContactEntityID,
                                                                                              languageId: getCurrentLanguage()
                                                                                            ).ToList();

            return CitizenQuestionList;
        }

        /// <summary>
        /// Obtiene una lista de Citizen Question        
        ///</summary>
        /// <returns></returns>
        public List<Entity.UnderWriting.Entities.Contact.CitizenQuestion> GetContactCitizenQuestionByContactJuridico()
        {
            var CitizenQuestionList = this.oContactManager.GetContactCitizenQuestionByContactJuridico(Corp_Id,
                                                                                              Region_Id,
                                                                                              Country_Id,
                                                                                              Domesticreg_Id,
                                                                                              State_Prov_Id,
                                                                                              City_Id, Office_Id,
                                                                                              Case_Seq_No,
                                                                                              Hist_Seq_No,
                                                                                              Agent_Legal,
                                                                                              languageId: getCurrentLanguage()
                                                                                            ).ToList();

            return CitizenQuestionList;
        }

        #endregion

        /// <summary>
        /// Author       : Lic. Carlos Ml. Lebron
        /// Created Date : 06-26-2015        
        /// 
        /// </summary>
        /// <returns></returns>
        public bool esFunerario(bool isfuneral = false)
        {
            var result = false;

            if (!isNewCase)
            {
                var datos = oPolicyManager.GetPlanData(Corp_Id, Region_Id, Country_Id, Domesticreg_Id, State_Prov_Id, City_Id, Office_Id, Case_Seq_No, Hist_Seq_No);

                if (datos != null)
                {
                    result = (datos.NameKey == Utility.ProductBehavior.Luminis.ToString() ||
                              datos.NameKey == Utility.ProductBehavior.LuminisVIP.ToString() ||
                              datos.NameKey == Utility.ProductBehavior.Exequium.ToString() ||
                              datos.NameKey == Utility.ProductBehavior.ExequiumVIP.ToString());
                }
            }
            else
                result = isfuneral;

            return result;
        }

        public bool validateEditBeneficiarie()
        {
            var isZeroBen = oBeneficiaryManager.GetAllBeneficiary(Corp_Id, Region_Id, Country_Id, Domesticreg_Id, State_Prov_Id, City_Id, Office_Id, Case_Seq_No, Hist_Seq_No, null, null, null,
                                                                  languageId: Language.ToInt()).Where(x => x.BenefitsPercent == null).Any();

            return isZeroBen;
        }

        public bool validateExistBeneficiarie(int contactId)
        {
            var result = oBeneficiaryManager.GetAllBeneficiary(Corp_Id, Region_Id, Country_Id, Domesticreg_Id, State_Prov_Id, City_Id, Office_Id, Case_Seq_No, Hist_Seq_No, null, null, contactId,
                                                            languageId: Language.ToInt()).Any();

            return result;
        }

        /// <summary>
        /// Verifica si una cotizacion ya ha sido completada con los documentos que se le corresponden al agente
        /// </summary>
        /// <returns></returns>
        public bool isQuotationComplete(IEnumerable<Policy.Vehicle.Requirement> ResultData)
        {
            var dataDocRequirement = ResultData.Where(r => r.IsMandatory.GetValueOrDefault() && r.AssingTo == Utility.AgentRoleType.Agent.ToString());
            var dataDocUploaded = dataDocRequirement.Any(d => d.DocumentId == null);
            return !dataDocUploaded;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ResultData"></param>
        /// <returns></returns>
        public bool isQuotationCompleteVehicle(IEnumerable<Requirement.Product> ResultData)
        {
            var dataDocRequirement = ResultData.Where(r => r.IsMandatory.GetValueOrDefault() && r.AssingTo == Utility.AgentRoleType.Agent.ToString());
            var dataDocUploaded = dataDocRequirement.Any(d => d.DocumentId == null);
            return !dataDocUploaded;
        }


        /// <summary>
        /// Verifica si una cotizacion ya ha sido completada con los documentos que se le corresponden al agente para los requeridos de propiedad
        /// </summary>
        /// <param name="ResultData"></param>
        /// <returns></returns>
        public bool isQuotationCompleteIL(IEnumerable<Requirement.Product> ResultData)
        {
            var dataDocRequirement = ResultData.Where(r => r.IsMandatory.GetValueOrDefault() && r.AssingTo == Utility.AgentRoleType.Agent.ToString());
            var dataDocUploaded = dataDocRequirement.Any(d => d.DocumentId == null);
            return !dataDocUploaded;
        }

        /// <summary>
        /// Obtiene una lista con la placa y la descripcion de los vehiculos que faltan por inspeccionar
        /// </summary>
        /// <returns></returns>
        private List<Tuple<string, string, string, string>> SummaryVehicleInspect()
        {
            var result = new List<Tuple<string, string, string, string>>(0);

            var dataResult = this.oPolicyManager.GetVehicleInsured(new Policy.Parameter
            {
                CorpId = this.Corp_Id,
                RegionId = this.Region_Id,
                CountryId = this.Country_Id,
                DomesticregId = this.Domesticreg_Id,
                StateProvId = this.State_Prov_Id,
                CityId = this.City_Id,
                OfficeId = this.Office_Id,
                CaseSeqNo = this.Case_Seq_No,
                HistSeqNo = this.Hist_Seq_No
            }).Select(t =>
            {
                t.Inspection = t.Inspection.HasValue ? t.Inspection : false;
                return t;
            }).Where(x => !x.Inspection.GetValueOrDefault());


            if (dataResult.Any())
                foreach (var item in dataResult)
                    result.Add(new Tuple<string, string, string, string>(item.MakeDesc, item.ModelDesc, item.Year.ToString(), item.Registry));

            return result;
        }

        /// <summary>
        /// Chequea la dependencia de una poliza en Global
        /// </summary>
        /// <param name="PolicyNo"></param>
        /// <returns></returns>
        public bool? CheckPolicyDependencyInGlobal(string PolicyNo)
        {
            var result = false;

            result = oPolicyManager.GetCheckPolicyActive(PolicyNo).GetValueOrDefault();

            return
                  result;
        }

        /// <summary>
        /// Chequea la dependencia de una poliza en SysFlex
        /// </summary>
        /// <param name="PolicyNo"></param>
        /// <returns></returns>
        public bool? CheckPolicyDepencyInSysFlex(string PolicyNo)
        {
            var result = false;

            var dresult = oSFPolicyServiceClient.CheckPolicyActive(PolicyNo);

            if (!string.IsNullOrEmpty(dresult.JSONResult) && dresult.JSONResult.ToLower() != "null")
                result = dresult.JSONResult.ToLower() == "true";

            return
                  result;
        }


        /// <summary>
        ///  Obtener los requeridos de las lineas aliadas
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Requirement.Product> GetDataDocumentAlliedLines()
        {
            var dataResult = default(IEnumerable<Requirement.Product>);

            if (
                       Corp_Id > 0
                    && Region_Id > 0
                    && Country_Id > 0
                    && Domesticreg_Id > 0
                    && State_Prov_Id > 0
                    && Office_Id > 0
                    && Case_Seq_No > 0
                    && Hist_Seq_No > 0
                )
            {
                var item = new Requirement.Product.Key
                {
                    CorpId = Corp_Id,
                    RegionId = Region_Id,
                    CountryId = Country_Id,
                    DomesticRegId = Domesticreg_Id,
                    StateProvId = State_Prov_Id,
                    CityId = City_Id,
                    OfficeId = Office_Id,
                    CaseSeqNo = Case_Seq_No,
                    HistSeqNo = Hist_Seq_No,
                    ContactId = null
                };

                var order = 1;
                dataResult = oRequirementManager.GetRequirementProduct(item)
                                           .Select(x =>
                                           {
                                               x.OrderId = order++;
                                               return x;
                                           });
            }

            return
                dataResult;
        }

        /// <summary>
        /// obtener los requeridos para los vehiculos
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Policy.Vehicle.Requirement> GetDataDocument()
        {
            var dataResult = default(IEnumerable<Policy.Vehicle.Requirement>);

            if (
                       Corp_Id > 0
                    && Region_Id > 0
                    && Country_Id > 0
                    && Domesticreg_Id > 0
                    && State_Prov_Id > 0
                    && Office_Id > 0
                    && Case_Seq_No > 0
                    && Hist_Seq_No > 0
                )
            {
                var item = new Policy.Parameter
                {
                    CorpId = Corp_Id,
                    RegionId = Region_Id,
                    CountryId = Country_Id,
                    DomesticregId = Domesticreg_Id,
                    StateProvId = State_Prov_Id,
                    CityId = City_Id,
                    OfficeId = Office_Id,
                    CaseSeqNo = Case_Seq_No,
                    HistSeqNo = Hist_Seq_No,
                    ContactId = null
                };

                var order = 1;
                dataResult = oPolicyManager.GetVehicleRequirement(item)
                                           .Select(x =>
                                           {
                                               x.OrderId = order++;
                                               return x;
                                           });
            }

            return
                dataResult;
        }


        public IEnumerable<Requirement.Product> GetDataDocumentVehicle()
        {
            var dataResult = default(IEnumerable<Requirement.Product>);

            if (
                       Corp_Id > 0
                    && Region_Id > 0
                    && Country_Id > 0
                    && Domesticreg_Id > 0
                    && State_Prov_Id > 0
                    && Office_Id > 0
                    && Case_Seq_No > 0
                    && Hist_Seq_No > 0
                )
            {
                var item = new Requirement.Product.Key
                {
                    CorpId = Corp_Id,
                    RegionId = Region_Id,
                    CountryId = Country_Id,
                    DomesticRegId = Domesticreg_Id,
                    StateProvId = State_Prov_Id,
                    CityId = City_Id,
                    OfficeId = Office_Id,
                    CaseSeqNo = Case_Seq_No,
                    HistSeqNo = Hist_Seq_No,
                    ContactId = null
                };

                var order = 1;
                dataResult = oRequirementManager.GetRequirementProduct(item)
                                           .Select(x =>
                                           {
                                               x.OrderId = order++;
                                               return x;
                                           });
            }

            return
                dataResult;
        }



        public IEnumerable<Policy.Vehicle.Requirement> GetDataDocument(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                      , int officeId, int caseSeqNo, int histSeqNo)
        {
            var dataResult = oPolicyManager.GetVehicleRequirement(new Policy.Parameter
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                UnderwriterId = Agent_LoginId,
                LanguageId = Language.ToInt(),
                AgentId = Agent_LoginId,
                UserId = UserID,
                StatusChangeTypeId = null,
                StatusId = null,
                ContactId = null
            });

            return dataResult;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="UniquePropertyId"></param>
        /// <returns></returns>
        public IEnumerable<Utility.Property> GetDataProperty(int? UniquePropertyId = null)
        {
            var data = oPropertyManager.GetProperty(new Entity.UnderWriting.Entities.Property.Key
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticregId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id,
                CaseSeqNo = Case_Seq_No,
                HistSeqNo = Hist_Seq_No
            }).Select(k => new Utility.Property
            {
                CorpId = k.CorpId,
                RegionId = k.RegionId,
                CountryId = k.CountryId,
                DomesticregId = k.DomesticregId,
                StateProvId = k.StateProvId,
                CityId = k.CityId,
                OfficeId = k.OfficeId,
                CaseSeqNo = k.CaseSeqNo,
                HistSeqNo = k.HistSeqNo,
                PropertyId = k.PropertyId,
                SeqId = k.SeqId,
                UniquePropertyId = k.UniquePropertyId,
                InsurableTypeId = k.InsurableTypeId,
                InsurableTypeDesc = k.InsurableTypeDesc,
                InsuredDetailTypeId = k.InsuredDetailTypeId,
                InsuredDetailTypeDesc = k.InsuredDetailTypeDesc,
                EquipmentTypeId = k.EquipmentTypeId,
                EquipmentTypeDesc = k.EquipmentTypeDesc,
                ConditionId = k.ConditionId,
                ConditionDesc = k.ConditionDesc,
                BlTypeId = k.BlTypeId,
                BlId = k.BlId,
                ProductId = k.ProductId,
                ProductDesc = k.ProductDesc,
                ProductTypeId = k.ProductTypeId,
                ProductTypeDesc = k.ProductTypeDesc,
                Quantity = k.Quantity,
                Placement = k.Placement,
                Height = k.Height,
                Width = k.Width,
                Brand = k.Brand,
                Model = k.Model,
                SerialKey = k.SerialKey,
                Value = k.Value,
                ReplacementValue = k.ReplacementValue,
                ReinsuranceAmount = k.ReinsuranceAmount,
                AppliesToReinsurance = k.ReinsuranceId == 2,
                ConstructionDateStart = k.ConstructionDateStart,
                ConstructionDateEnd = k.ConstructionDateEnd,
                PercentageOfCompletion = k.PercentageOfCompletion,
                EquipmentValue = k.EquipmentValue,
                MarketExperience = k.MarketExperience,
                Capacity = k.Capacity,
                Maker = k.Maker,
                Author = k.Author,
                EmployeesQty = k.EmployeesQty,
                WorkStartDate = k.WorkStartDate,
                WorkEndDate = k.WorkEndDate,
                Experience = k.Experience,
                CompletionPercentage = k.CompletionPercentage,
                InsuredDate = k.InsuredDate,
                InsuredAmountF = k.InsuredAmount.ToFormatNumeric(),
                InsuredAmount = k.InsuredAmount,
                Rate = k.Rate,
                PremiumAmount = k.PremiumAmount,
                PremiumAmountF = k.PremiumAmount.ToFormatNumeric(),
                BasePremiumAmount = k.BasePremiumAmount,
                DeductiblePercentage = k.DeductiblePercentage,
                DeductiblePercentageF = k.DeductiblePercentage.Truncate() + "%",
                DeductibleAmount = k.DeductibleAmount,
                MinimumDeductibleAmount = k.MinimumDeductibleAmount,
                RequiresInspection = k.RequiresInspection,
                Inspected = k.Inspected.GetValueOrDefault(),
                CssClassInspected = k.CssClassInspected,
                EndorsementClarifying = k.EndorsementClarifying,
                Endorsement = k.Endorsement,
                EndorsementBeneficiary = k.EndorsementBeneficiary,
                EndorsementBeneficiaryRnc = k.EndorsementBeneficiaryRnc,
                EndorsementAmount = k.EndorsementAmount,
                EndorsementContactName = k.EndorsementContactName,
                EndorsementContactPhone = k.EndorsementContactPhone,
                EndorsementContactEmail = k.EndorsementContactEmail,
                PropertyDetailStatusId = k.PropertyDetailStatusId,
                PropertyDetailStatusDesc = k.PropertyDetailStatusDesc,
                PropertyDetailSourceId = k.PropertyDetailSourceId,
                RegionIdLoc = k.RegionIdLoc,
                CountryIdLoc = k.CountryIdLoc,
                DomesticregIdLoc = k.DomesticregIdLoc,
                StateProvIdLoc = k.StateProvIdLoc,
                CoaseguroRobo = k.CoaseguroRobo.GetValueOrDefault(),
                CityIdLoc = k.CityIdLoc,
                RegionDescLoc = k.RegionDescLoc,
                CountryDescLoc = k.CountryDescLoc,
                DomesticregDescLoc = k.DomesticregDescLoc,
                StateProvDescLoc = k.StateProvDescLoc,
                CityDescLoc = k.CityDescLoc,
                BusinessTypeId = k.BusinessTypeId,
                BusinessTypeDesc = k.BusinessTypeDesc,
                PropertyBuildTypeId = k.PropertyBuildTypeId,
                PropertyBuildTypeDesc = k.PropertyBuildTypeDesc,
                ActivfityTypeId = k.ActivfityTypeId,
                ActivfityTypeDesc = k.ActivfityTypeDesc,
                ReinsuranceId = k.ReinsuranceId,
                ReinsuranceDesc = k.ReinsuranceDesc,
                AddressStreet = k.AddressStreet,
                addressNumber = k.AddressNumber,
                Rooms = k.Rooms,
                Bathrooms = k.Bathrooms,
                LocationActivityTypeId = k.LocationActivityTypeId,
                Registry = k.Registry,
                BuildAreaSqFeet = k.BuildAreaSqFeet,
                BuildAreaSqMeters = k.BuildAreaSqMeters,
                GeographicLimitation = k.GeographicLimitation,
                SouthBorderId = k.SouthBorderId,
                SouthBorderDesc = k.SouthBorderDesc,
                NorthBorderId = k.NorthBorderId,
                NorthBorderDesc = k.NorthBorderDesc,
                EastBorderId = k.EastBorderId,
                EastBorderDesc = k.EastBorderDesc,
                WestBorderId = k.WestBorderId,
                WestBorderDesc = k.WestBorderDesc,
                PhysicalAddress = k.PhysicalAddress,
                Garage = k.Garage,
                Pool = k.Pool,
                DistanceKilometersSea = k.DistanceKilometersSea,
                DistanceKilometersRiver = k.DistanceKilometersRiver,
                DistanceKilometersStream = k.DistanceKilometersStream,
                Longitude = k.Longitude,
                Latitude = k.Latitude,
                PropertyStatusId = k.PropertyStatusId,
                PropertyStatusDesc = k.PropertyStatusDesc,
                PropertySourceId = k.PropertySourceId,
                PropertyDetailYear = k.PropertyDetailYear,
                PropertyYear = k.PropertyYear,
                UserId = k.UserId,
                SourceId = k.SourceId,
                FurnitureAndEquipmentValue = k.FurnitureAndEquipmentValue,
                FurnitureAndEquipmentValueF = k.FurnitureAndEquipmentValue.ToFormatNumeric(),
                EvaluationValue = k.EvaluationValue,
                EvaluationValueF = k.EvaluationValue.ToFormatNumeric(),
                EdificationValue = k.EdificationValue,
                EdificationValueF = k.EdificationValue.ToFormatNumeric(),
                MachineryValue = k.MachineryValue,
                MachineryValueF = k.MachineryValue.ToFormatNumeric(),
                StockValue = k.StockValue,
                StockValueF = k.StockValue.ToFormatNumeric(),
                RemodelingAndFittingValue = k.RemodelingAndFittingValue,
                RemodelingAndFittingValueF = k.RemodelingAndFittingValue.ToFormatNumeric(),
                ValueObjectAndArtValue = k.ValueObjectAndArtValue,
                ValueObjectAndArtValueF = k.ValueObjectAndArtValue.ToFormatNumeric(),
                ClassEndoso = k.EndorsementAmount.HasValue ? "myedit_file" : "myinsert_file",
                CssClassEndorsementClarifying = k.EndorsementClarifying ? "view_file" : "view_file_dbl",
                surchargeApplied = false,
                EndorsementClarifyingVisible = Country == Utility.Country.RepublicaDominicana,
                ReinsurancePercentage = k.ReinsurancePercentage,
                ReinsurancePremiumAmount = k.ReinsurancePremiumAmount,
                fireProtectionequipment = k.fireProtectionequipment,
                organization = k.organization,
                security = k.security,
                electricsystem = k.electricsystem,
                countrydesc = k.countrydesc,
                StateProvDesc = k.StateProvDesc,
                MunicipDesc = k.MunicipDesc,
                citydesc = k.citydesc,
                PolicyFomat = k.PolicyFomat,
                VisibleChkInspection = !k.RequiresInspection && k.Inspected.GetValueOrDefault(),
                VisibleLnkInspeccion = k.RequiresInspection && k.Inspected.GetValueOrDefault(),
                InsideBusiness = k.InsideBusiness,
                OutofLocalBankDeposits = k.OutofLocalBankDeposits,
                TransportVehicles = k.TransportVehicles,
                PolicyNoMain = this.PolicyNoMain,
                ControlMeasures = k.ControlMeasures,
                ControlSecurity = k.SecurityMeasures,
                TypeCoverage = k.TypeCoverage,
                Exequatur = k.Exequatur,
                GraduationYear = k.GraduationYear,
                ExequaturRegistrationDate = k.ExequaturRegistrationDate,
                MinimumDeductible = k.MinimumDeductible,
                UniversityStudies = k.UniversityStudies,
                NameCentre = k.NameCentre,
                Speciality = k.Specialty,
                ProjectAmount = k.ProjectAmount,
                ProjectType = k.ProjectType,
                ConstructionMaterial = k.ConstructionMaterial,
                TypeMachinery = k.TypeMachinery,
                UndergroundFeatures = k.UndergroundFeatures,
                ProjectAccountWithGuaranteeorDeposit = k.ProjectAccountWithGuaranteeorDeposit,
                TheContractorHasContractualRCCoverage = k.TheContractorHasContractualRCCoverage,
                SecurityProtectionDuringConstructionProcess = k.SecurityProtectionDuringConstructionProcess,
                ProjectHasSubcontractor = k.ProjectHasSubcontractor,
                ContractorExperienceInSimilarProjects = k.ContractorExperienceInSimilarProjects,
                SubcontractorExperience = k.SubcontractorExperience,
                RiskofTempest = k.RiskofTempest,
                PenaltyForDelayedProjectDelivery = k.PenaltyForDelayedProjectDelivery,
                EquipmentWeight = k.EquipmentWeight,
                UseOfMachinery = k.UseOfMachinery,
                EquipmentMaintenance = k.EquipmentMaintenance,
                MachineryOperatorExperience = k.MachineryOperatorExperience,
                SpecialDangers = k.SpecialDangers,
                Surveillance = k.Surveillance,
                TypeofEquipmentGuard = k.TypeofEquipmentGuard,
                GPS = k.GPS,
                ProjectDescription = k.ProjectDescription,
                OtherRisks = k.OtherRisks,
                CatastrophicRisks = k.CatastrophicRisks,
                CivilLiability = k.CivilLiability,
                PercentofCoinsuranceAgreed = k.PercentofCoinsuranceAgreed,
                DeductibleInDays = k.DeductibleInDays,
                GrossProfit = k.GrossProfit,
                AddressStreetFull = k.AddressStreet + ", " + k.AddressNumber,
            });

            return
                UniquePropertyId.HasValue ? data.Where(h => h.UniquePropertyId == UniquePropertyId)
                                          : data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="UniqueAirPlaneId"></param>
        /// <returns></returns>
        public IEnumerable<Utility.AirPlane> GetDataAirPlane(int? UniqueAirPlaneId = null)
        {
            var data = oAirPlaneManager.GetAirplaneInsured(new Entity.UnderWriting.Entities.Airplane.Insured.Key
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticRegId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id,
                CaseSeqNo = Case_Seq_No,
                HistSeqNo = Hist_Seq_No
            }).Select(o => new Utility.AirPlane
            {
                CorpId = o.CorpId.GetValueOrDefault(),
                RegionId = o.RegionId.GetValueOrDefault(),
                CountryId = o.CountryId.GetValueOrDefault(),
                DomesticregId = o.DomesticRegId.GetValueOrDefault(),
                StateProvId = o.StateProvId.GetValueOrDefault(),
                CityId = o.CityId.GetValueOrDefault(),
                OfficeId = o.OfficeId.GetValueOrDefault(),
                CaseSeqNo = o.CaseSeqNo.GetValueOrDefault(),
                HistSeqNo = o.HistSeqNo.GetValueOrDefault(),
                AirplaneId = o.AirplaneId.GetValueOrDefault(),
                UniqueAirplaneId = o.UniqueAirplaneId,
                BlTypeId = o.BlTypeId.GetValueOrDefault(),
                BlId = o.BlId.GetValueOrDefault(),
                ProductId = o.ProductId.GetValueOrDefault(),
                ReinsuranceId = o.ReinsuranceId,
                Name = o.Name,
                BrandModel = o.BrandModel,
                YearProduction = o.YearProduction,
                YearProductionEngine = o.YearProductionEngine,
                Year = o.Year,
                SerialKey = o.SerialKey,
                Usage = o.Usage,
                AirplaneBase = o.AirplaneBase,
                InsuredAmount = o.InsuredAmount.GetValueOrDefault(),
                InsuredAmountF = o.InsuredAmount.GetValueOrDefault().ToFormatNumeric(),
                Rate = o.Rate.GetValueOrDefault(),
                PremiumAmount = o.PremiumAmount.GetValueOrDefault(),
                PremiumAmountF = o.PremiumAmount.GetValueOrDefault().ToFormatNumeric(),
                BasePremiumAmount = o.BasePremiumAmount.GetValueOrDefault(),
                DeductiblePercentage = o.DeductiblePercentage.GetValueOrDefault(),
                DeductibleAmount = o.DeductibleAmount.GetValueOrDefault(),
                MinimumDeductibleAmount = o.MinimumDeductibleAmount.GetValueOrDefault(),
                IsNew = o.IsNew,
                RequiresInspection = o.RequiresInspection,
                Reinsurance = o.Reinsurance,
                ReinsuranceAmount = o.ReinsuranceAmount,
                AppliesToReinsurance = o.ReinsuranceId == 2,
                Inspected = o.Inspected,
                DeductiblePercentageF = o.DeductiblePercentage.ToString() + "%",
                EndorsementClarifying = o.EndorsementClarifying,
                Endorsement = o.Endorsement.GetValueOrDefault(),
                EndorsementBeneficiary = o.EndorsementBeneficiary,
                EndorsementBeneficiaryRnc = o.EndorsementBeneficiaryRnc,
                EndorsementAmount = o.EndorsementAmount,
                EndorsementContactName = o.EndorsementContactName,
                EndorsementContactPhone = o.EndorsementContactPhone,
                EndorsementContactEmail = o.EndorsementContactEmail,
                InspectionAddress = o.InspectionAddress,
                ReinsurancePercentage = o.ReinsurancePercentage,
                CoverageLimitMedicalExpensesOnePassenger = o.CoverageLimitMedicalExpensesOnePassenger,
                CoverageLimitMedicalExpensesAllPassenger = o.CoverageLimitMedicalExpensesAllPassenger,
                CoverageLimitMedicalExpensesOneCrewman = o.CoverageLimitMedicalExpensesOneCrewman,
                CoverageLimitMedicalExpensesAllCrewman = o.CoverageLimitMedicalExpensesAllCrewman,
                ProductDesc = o.ProductDesc,
                ProductTypeId = o.ProductTypeId,
                AirplaneStatusId = o.AirplaneStatusId,
                UserId = o.UserId,
                SourceId = o.SourceId,
                ClassEndoso = o.EndorsementAmount.HasValue ? "myedit_file" : "myinsert_file",
                surchargeApplied = false,
                VisibleChkNew = o.IsNew.GetValueOrDefault(),
                //VisibleLnkNew = o.Inspected,
                CssClassnew = o.IsNew.GetValueOrDefault() ? "view_file" : "view_file_dbl",
                AirportFeatures = o.AirportFeatures,
                LandingState = o.LandingState,
                FuselageFailures = o.FuselageFailures,
                PlaceRefuge = o.PlaceRefuge,
                HullMaintenance = o.HullMaintenance,
                HullMaterial = o.HullMaterial,
                EngineBrandModel = o.EngineBrandModel,
                EngineOverhaul = o.EngineOverhaul,
                ReinsurancePremiumAmount = o.ReinsurancePremiumAmount,
                PolicyNoMain = this.PolicyNoMain
            });

            return
                UniqueAirPlaneId.HasValue ? data.Where(h => h.UniqueAirplaneId == UniqueAirPlaneId) : data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="UniqueNavyId"></param>
        /// <returns></returns>
        public IEnumerable<Utility.Navy> GetDataNavy(int? UniqueNavyId = null)
        {
            var data = oNavyManager.GetNavyInsured(new Entity.UnderWriting.Entities.Navy.Insured.Key
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticRegId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id,
                CaseSeqNo = Case_Seq_No,
                HistSeqNo = Hist_Seq_No
            }).Select(o => new Utility.Navy
            {
                CorpId = o.CorpId,
                RegionId = o.RegionId,
                CountryId = o.CountryId,
                DomesticregId = o.DomesticRegId,
                StateProvId = o.StateProvId,
                CityId = o.CityId,
                OfficeId = o.OfficeId,
                CaseSeqNo = o.CaseSeqNo,
                HistSeqNo = o.HistSeqNo,
                NavyId = o.NavyId,
                UniqueNavyId = o.UniqueNavyId,
                BlTypeId = o.BlTypeId,
                BlId = o.BlId,
                ProductId = o.ProductId,
                Name = o.Name,
                BrandModel = o.BrandModel,
                BrandEngine = o.BrandEngine,
                YearProduction = o.YearProduction,
                YearProductionEngine = o.YearProductionEngine,
                SerialKey = o.SerialKey,
                Year = o.Year,
                Manga = o.Manga,
                Casco = o.Casco,
                Purtal = o.Purtal,
                Eslora = o.Eslora,
                Usage = o.Usage,
                PortLoadingType = o.PortLoadingType,
                NavigationLimit = o.NavigationLimit,
                BasePort = o.BasePort,
                InsuredDate = o.InsuredDate,
                InsuredAmount = o.InsuredAmount,
                InsuredAmountF = o.InsuredAmount.ToFormatNumeric(),
                Rate = o.Rate,
                PremiumAmount = o.PremiumAmount,
                PremiumAmountF = o.PremiumAmount.ToFormatNumeric(),
                BasePremiumAmount = o.BasePremiumAmount,
                DeductiblePercentage = o.DeductiblePercentage,
                DeductibleAmount = o.DeductibleAmount,
                MinimumDeductibleAmount = o.MinimumDeductibleAmount,
                IsNew = o.IsNew,
                RequiresInspection = o.RequiresInspection,
                Reinsurance = o.Reinsurance,
                Inspected = o.Inspected,
                EndorsementClarifying = o.EndorsementClarifying,
                Endorsement = o.Endorsement,
                EndorsementBeneficiary = o.EndorsementBeneficiary,
                EndorsementBeneficiaryRnc = o.EndorsementBeneficiaryRnc,
                EndorsementAmount = o.EndorsementAmount,
                EndorsementContactName = o.EndorsementContactName,
                EndorsementContactPhone = o.EndorsementContactPhone,
                EndorsementContactEmail = o.EndorsementContactEmail,
                InspectionAddress = o.InspectionAddress,
                NavyStatusId = o.NavyStatusId,
                UserId = o.UserId,
                SourceId = o.SourceId,
                CoverageLimitMedicalExpensesByEvent = o.CoverageLimitMedicalExpensesByEvent,
                CoverageLimitMedicalExpensesOnePerson = o.CoverageLimitMedicalExpensesOnePerson,
                CoverageLimitMedicalExpensesOneCrewMember = o.CoverageLimitMedicalExpensesOneCrewMember,
                CoverageLimitMedicalExpensesAllCrewMember = o.CoverageLimitMedicalExpensesAllCrewMember,
                CoverageLimitPersonalAccidentOnePassengers = o.CoverageLimitPersonalAccidentOnePassengers,
                CoverageLimitPersonalAccidentAllPassengersByEvent = o.CoverageLimitPersonalAccidentAllPassengersByEvent,
                CoverageLimitPersonalAccidentOneCrewMember = o.CoverageLimitPersonalAccidentOneCrewMember,
                CoverageLimitPersonalAccidentAllCrewMember = o.CoverageLimitPersonalAccidentAllCrewMember,
                CoverageLimitPersonalEffects = o.CoverageLimitPersonalEffects,
                ReinsuranceAmount = o.ReinsuranceAmount,
                PlaceRefuge = o.PlaceRefuge,
                ReinsurancePercentage = o.ReinsurancePercentage,
                ReinsurancePremiumAmount = o.ReinsurancePremiumAmount,
                ProductDesc = o.ProductDesc,
                ProductTypeId = o.ProductTypeId,
                ClassEndoso = o.EndorsementAmount.HasValue ? "myedit_file" : "myinsert_file",
                surchargeApplied = false,
                VisibleChkNew = o.IsNew.GetValueOrDefault(),
                CssClassnew = o.IsNew.GetValueOrDefault() ? "view_file" : "view_file_dbl",
                useType = "",//o.useType,
                AppliesToReinsurance = o.ReinsuranceId == 2,
                PolicyNoMain = this.PolicyNoMain
            });

            return UniqueNavyId.HasValue ? data.Where(h => h.UniqueNavyId == UniqueNavyId) : data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="UniqueBailId"></param>
        /// <returns></returns>
        public IEnumerable<Utility.Bail> GetDataBail(int? UniqueBailId = null)
        {
            var data = oBailManager.GetBailInsured(new Entity.UnderWriting.Entities.Bail.Insured.Key
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticRegId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id,
                CaseSeqNo = Case_Seq_No,
                HistSeqNo = Hist_Seq_No
            }).Select(o => new Utility.Bail
            {
                CorpId = o.CorpId.GetValueOrDefault(),
                RegionId = o.RegionId.GetValueOrDefault(),
                CountryId = o.CountryId.GetValueOrDefault(),
                DomesticregId = o.DomesticregId.GetValueOrDefault(),
                StateProvId = o.StateProvId.GetValueOrDefault(),
                CityId = o.CityId.GetValueOrDefault(),
                OfficeId = o.OfficeId.GetValueOrDefault(),
                CaseSeqNo = o.CaseSeqNo.GetValueOrDefault(),
                HistSeqNo = o.HistSeqNo.GetValueOrDefault(),
                BailId = o.BailId,
                UniqueBailId = o.UniqueBailId,
                BlTypeId = o.BlTypeId,
                BlId = o.BlId,
                ProductId = o.ProductId,
                ReinsuranceId = o.ReinsuranceId,
                ReinsuranceAmount = o.ReinsuranceAmount,
                EquipmentQty = o.EquipmentQty,
                Contractamount = o.ContractAmount,
                Beneficiary = o.Beneficiary,
                Activity = o.Activity,
                Businesstype = o.BusinessType,
                Bailtype = o.BailType,
                Percentageinsuredamount = o.PercentageInsuredAmount,
                Obligations = o.Obligations,
                ToDepositIn = o.ToDepositIn,
                AddressStreet = o.AddressStreet,
                AddressNumber = o.AddressNumber,
                AddressCountryId = o.AddressCountryId,
                AddressDomesticregId = o.AddressDomesticregId,
                AddressStateProvId = o.AddressStateProvId,
                AddressCityId = o.AddressCityId,
                AddressCountryDesc = o.AddressCountryDesc,
                AddressDomesticregDesc = o.AddressDomesticregDesc,
                AddressStateProvDesc = o.AddressStateProvDesc,
                AddressMunicipioDesc = o.AddressMunicipioDesc,
                AddressCityDesc = o.AddressCityDesc,
                HasEndOfTerm = o.HasEndOfTerm,
                InsuredDate = o.InsuredDate,
                InsuredAmount = o.InsuredAmount,
                InsuredAmountF = o.InsuredAmount.ToFormatNumeric(),
                Rate = o.Rate,
                PremiumAmount = o.PremiumAmount,
                PremiumAmountF = o.PremiumAmount.ToFormatNumeric(),
                BasePremiumAmount = o.BasePremiumAmount,
                DeductiblePercentage = o.DeductiblePercentage,
                DeductibleAmount = o.DeductibleAmount,
                MinimumDeductibleAmount = o.MinimumDeductibleAmount,
                IsNew = o.IsNew,
                RequiresInspection = o.RequiresInspection,
                Reinsurance = o.Reinsurance,
                Inspected = o.Inspected,
                EndorsementClarifying = o.EndorsementClarifying,
                Endorsement = o.Endorsement,
                EndorsementBeneficiary = o.EndorsementBeneficiary,
                EndorsementBeneficiaryRnc = o.EndorsementBeneficiaryRnc,
                EndorsementAmount = o.EndorsementAmount,
                EndorsementContactName = o.EndorsementContactName,
                EndorsementContactPhone = o.EndorsementContactPhone,
                EndorsementContactEmail = o.EndorsementContactEmail,
                InspectionAddress = o.InspectionAddress,
                BailStatusId = o.BailStatusId,
                UserId = o.UsrId,
                SourceId = o.SourceId,
                ProductDesc = o.ProductDesc,
                ProductTypeId = o.ProductTypeId,
                ContractAmount = o.ContractAmount,
                ReinsurancePremiumAmount = o.ReinsurancePremiumAmount,
                ClassEndoso = o.EndorsementAmount.HasValue ? "myedit_file" : "myinsert_file",
                surchargeApplied = false,
                Vigency = 0,
                ReinsuranceDesc = o.Reinsurance.GetValueOrDefault() ? RESOURCE.UnderWriting.NewBussiness.Resources.YesLabel : RESOURCE.UnderWriting.NewBussiness.Resources.NoLabel,
                ReinsurancePercentage = o.ReinsurancePercentage,
                AppliesToReinsurance = o.ReinsuranceId == 2,
                IsBuilding = o.IsBuilding,
                PolicyNoMain = this.PolicyNoMain
            });

            return
                UniqueBailId.HasValue ? data.Where(h => h.UniqueBailId == UniqueBailId) : data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="UniqueTransportId"></param>
        /// <returns></returns>
        public IEnumerable<Utility.Transport> GetDataTransport(int? UniqueTransportId = null)
        {
            var data = oTransportManager.GetTransportInsured(new Entity.UnderWriting.Entities.Transport.Insured.Key
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticregId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id,
                CaseSeqNo = Case_Seq_No,
                HistSeqNo = Hist_Seq_No
            }).Select(o => new Utility.Transport
            {
                CorpId = o.CorpId.GetValueOrDefault(),
                RegionId = o.RegionId.GetValueOrDefault(),
                CountryId = o.CountryId.GetValueOrDefault(),
                DomesticregId = o.DomesticRegId.GetValueOrDefault(),
                StateProvId = o.StateProvId.GetValueOrDefault(),
                CityId = o.CityId.GetValueOrDefault(),
                OfficeId = o.OfficeId.GetValueOrDefault(),
                CaseSeqNo = o.CaseSeqNo.GetValueOrDefault(),
                HistSeqNo = o.HistSeqNo.GetValueOrDefault(),
                TransportId = o.TransportId.GetValueOrDefault(),
                UniqueTransportId = o.UniqueTransportId,
                BlTypeId = o.BlTypeId.GetValueOrDefault(),
                BlId = o.BlId.GetValueOrDefault(),
                ProductId = o.ProductId,
                ProductDesc = o.ProductDesc,
                ProductTypeId = o.ProductTypeId,
                TransportInsuredId = o.TransportInsuredId,
                MerchandasingType = o.MerchandasingType,
                ReinsuranceId = o.ReinsuranceId,
                ReinsuranceAmount = o.ReinsuranceAmount,
                BuninessType = o.BuninessType,
                Activity = o.Activity,
                PackagingType = o.PackagingType,
                LimitLiability = o.LimitLiability,
                ValuationClause = o.ValuationClause,
                GeographicalLimitFrom = o.GeographicalLimitFrom,
                GeographicalLimitTo = o.GeographicalLimitTo,
                Conveyance = o.Conveyance,
                VehicleQty = o.VehicleQty,
                FreightAmount = o.FreightAmount,
                TruckAmount = o.TruckAmount,
                ContainerAmount = o.ContainerAmount,
                ChassisAmount = o.ChassisAmount,
                Transfer = o.Transfer,
                NoRating = o.NoRating,
                Barge = o.Barge,
                UnknownValue = o.UnknownValue,
                LowTonnage = o.LowTonnage,
                ByAge = o.ByAge,
                AddressCountryId = o.AddressDomesticregId,
                AddressDomesticregId = o.AddressDomesticregId,
                AddressStateProvId = o.AddressStateProvId,
                AddressCityId = o.AddressCityId,
                AddressStreet = o.AddressStreet,
                AddressNumber = o.AddressNumber,
                VehicleHasInsure = o.VehicleHasInsure,
                MerchandiseDesc = o.MerchandiseDesc,
                Security = o.Security,
                WayOfTransport = o.WayOfTransport,
                Warehouse = o.Warehouse,
                Deductible = o.Deductible,
                InsuredDate = o.InsuredDate,
                InsuredAmount = o.InsuredAmount.GetValueOrDefault(),
                InsuredAmountF = o.InsuredAmount.GetValueOrDefault().ToFormatNumeric(),
                Rate = o.Rate.GetValueOrDefault(),
                PremiumAmount = o.PremiumAmount.GetValueOrDefault(),
                PremiumAmountF = o.PremiumAmount.GetValueOrDefault().ToFormatNumeric(),
                BasePremiumAmount = o.BasePremiumAmount.GetValueOrDefault(),
                DeductiblePercentage = o.DeductiblePercentage.GetValueOrDefault(),
                DeductibleAmount = o.DeductibleAmount.GetValueOrDefault(),
                MinimumDeductibleAmount = o.MinimumDeductibleAmount.GetValueOrDefault(),
                IsNew = o.IsNew.GetValueOrDefault(),
                RequiresInspection = o.RequiresInspection.GetValueOrDefault(),
                Reinsurance = o.Reinsurance.GetValueOrDefault(),
                Inspected = o.Inspected.GetValueOrDefault(),
                EndorsementClarifying = o.EndorsementClarifying.GetValueOrDefault(),
                Endorsement = o.Endorsement.GetValueOrDefault(),
                EndorsementBeneficiary = o.EndorsementBeneficiary,
                EndorsementBeneficiaryRnc = o.EndorsementBeneficiaryRnc,
                EndorsementAmount = o.EndorsementAmount,
                EndorsementContactName = o.EndorsementContactName,
                EndorsementContactPhone = o.EndorsementContactPhone,
                EndorsementContactEmail = o.EndorsementContactEmail,
                ReinsurancePercentage = o.ReinsurancePercentage,
                InspectionAddress = o.InspectionAddress,
                TransportStatusId = o.TransportStatusId.GetValueOrDefault(),
                UserId = o.UserId.GetValueOrDefault(),
                SourceId = o.SourceId,
                ClassEndoso = o.EndorsementAmount.HasValue ? "myedit_file" : "myinsert_file",
                surchargeApplied = false,
                AppliesToReinsurance = o.ReinsuranceId == 2,
                ReinsurancePremiumAmount = o.ReinsurancePremiumAmount,
                AddressCountryDesc = o.AddressCountryDesc,
                AddressStateProvDesc = o.AddressStateProvDesc,
                AddressMunicipioDesc = o.AddressMunicipioDesc,
                AddressCityDesc = o.AddressCityDesc,
                billingType = o.billingType,
                Ramo = o.Ramo,
                SubRamo = o.SubRamo,
                PolicyNoMain = this.PolicyNoMain
            });

            return
                UniqueTransportId.HasValue ? data.Where(h => h.UniqueTransportId == UniqueTransportId) : data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Role"></param>
        /// <returns></returns>
        public IEnumerable<Requirement.Product> GetDocumentMandatoryByAlliedLines(string Role = "")
        {
            var dataResult = this.oRequirementManager.GetRequirementProduct(new Requirement.Product.Key
            {
                CorpId = this.Corp_Id,
                RegionId = this.Region_Id,
                CountryId = this.Country_Id,
                DomesticRegId = this.Domesticreg_Id,
                StateProvId = this.State_Prov_Id,
                CityId = this.City_Id,
                OfficeId = this.Office_Id,
                CaseSeqNo = this.Case_Seq_No,
                HistSeqNo = this.Hist_Seq_No,
                ContactId = null,
            }).Where(x => x.IsMandatory.GetValueOrDefault()).Select(t =>
            {
                t.IsValid = t.IsValid.HasValue ? t.IsValid : false;
                return t;
            });

            if (!string.IsNullOrEmpty(Role))
                dataResult = dataResult.Where(h => h.AssingTo == Role).ToList();

            return dataResult;

        }

        /// <summary>
        /// Obtiene los documentos requeridos para una poliza de vehiculos
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Policy.Vehicle.Requirement> GetDocumentMandatory(string Role = "")
        {
            var dataResult = this.oPolicyManager.GetVehicleRequirement(new Policy.Parameter
            {
                CorpId = this.Corp_Id,
                RegionId = this.Region_Id,
                CountryId = this.Country_Id,
                DomesticregId = this.Domesticreg_Id,
                StateProvId = this.State_Prov_Id,
                CityId = this.City_Id,
                OfficeId = this.Office_Id,
                CaseSeqNo = this.Case_Seq_No,
                HistSeqNo = this.Hist_Seq_No,
                UnderwriterId = this.Agent_LoginId,
                LanguageId = this.Language.ToInt(),
                AgentId = this.Agent_LoginId,
                UserId = this.UserID,
                StatusChangeTypeId = null,
                StatusId = null,
                ContactId = null,
            }).Where(x => x.IsMandatory.GetValueOrDefault()).Select(t =>
            {
                t.IsValid = t.IsValid.HasValue ? t.IsValid : false;
                return t;
            });

            if (!string.IsNullOrEmpty(Role))
                dataResult = dataResult.Where(h => h.AssingTo == Role).ToList();

            return dataResult;
        }

        public IEnumerable<Requirement.Product> GetDocumentMandatoryVehicle(string Role = "")
        {
            var dataResult = this.oRequirementManager.GetRequirementProduct(new Requirement.Product.Key
            {
                CorpId = this.Corp_Id,
                RegionId = this.Region_Id,
                CountryId = this.Country_Id,
                DomesticRegId = this.Domesticreg_Id,
                StateProvId = this.State_Prov_Id,
                CityId = this.City_Id,
                OfficeId = this.Office_Id,
                CaseSeqNo = this.Case_Seq_No,
                HistSeqNo = this.Hist_Seq_No,
                //UnderwriterId = this.Agent_LoginId,
                //LanguageId = this.Language.ToInt(),
                //AgentId = this.Agent_LoginId,
                //UserId = this.UserID,
                //StatusChangeTypeId = null,
                //StatusId = null,
                ContactId = null,
            }).Where(x => x.IsMandatory.GetValueOrDefault()).Select(t =>
            {
                t.IsValid = t.IsValid.HasValue ? t.IsValid : false;
                return t;
            });

            if (!string.IsNullOrEmpty(Role))
                dataResult = dataResult.Where(h => h.AssingTo == Role).ToList();

            return dataResult;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="Role"></param>
        /// <returns></returns>
        public IEnumerable<Policy.Vehicle.Requirement> GetDocumentMandatory(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                      , int officeId, int caseSeqNo, int histSeqNo, string Role = "")
        {
            var dataResult = this.oPolicyManager.GetVehicleRequirement(new Policy.Parameter
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                UnderwriterId = this.Agent_LoginId,
                LanguageId = this.Language.ToInt(),
                AgentId = this.Agent_LoginId,
                UserId = this.UserID,
                StatusChangeTypeId = null,
                StatusId = null,
                ContactId = null,
            }).Where(x => x.IsMandatory.GetValueOrDefault()).Select(t =>
            {
                t.IsValid = t.IsValid.HasValue ? t.IsValid : false;
                return t;
            });

            if (!string.IsNullOrEmpty(Role))
                dataResult = dataResult.Where(h => h.AssingTo == Role).ToList();

            return dataResult;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="policyNo"></param>
        /// <param name="Role"></param>
        /// <returns></returns>
        public List<Tuple<string, string>> ValidateDocRequiredListFromPolicy(string policyNo, string Role = "")
        {
            var retorno = new List<Tuple<string, string>>(0);
            var msjResult = string.Empty;
            var Listdoc = new List<string>(0);
            IEnumerable<Policy.Vehicle.Requirement> result = null;
            IEnumerable<Policy.Vehicle.Requirement> validation = null;

            //Verificar si todos los documentos requeridos han sido subidos y validados
            //Verfificar si todos los documentos subidos
            var documents = GetDocumentMandatory(Role);

            validation = documents;

            result = documents;

            var ExcluirPersonalIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();

            var ExcluirVehicleIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();

            //Verificar si hay documentos requeridos excluyentes
            var PersonalIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            var VehicleIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            if (ExcluirPersonalIdentification)
            {
                result = from element in documents
                         where !(PersonalIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                         select element;

            }

            if (ExcluirVehicleIdentification)
            {
                result = (from element in result
                          where !(VehicleIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            validation = result;

            documents = result;

            var HasDocWithoutLoad = (Role != Utility.AgentRoleType.Agent.ToString()) ? documents.Where(u => u.DocumentId == null).Any()
                                                                                     : documents.Where(u => u.DocumentId == null && u.AssingTo == Role).Any();

            var HasDocWithoutValidate = validation.Where(u => !u.IsValid.GetValueOrDefault() && u.IsMandatory.GetValueOrDefault());

            //Si de los documentos que son requeridos le falta alguno sin subir entonces no lo dejes pasar
            if (HasDocWithoutLoad)
            {
                msjResult = string.Format(Resources.QuotDocumentRequired, policyNo);
                retorno.Add(new Tuple<string, string>(policyNo, msjResult));
            }

            if (Role != Utility.AgentRoleType.Agent.ToString())
            {
                //Si de los documentos que son requeridos falta alguno por validar entonces no le dejes pasar
                if (HasDocWithoutValidate.Any())
                {
                    //validar los documentos requeridos
                    foreach (var item in HasDocWithoutValidate)
                        Listdoc.Add("*" + item.RequirementTypeDesc + "<br/>");

                    msjResult = string.Format(Resources.NoDocumentReview + "<br/> <br/> {0} ", string.Join("<br/>", Listdoc.ToArray()));
                    retorno.Add(new Tuple<string, string>(policyNo, msjResult));
                }
            }

            return retorno;
        }

        public void ValidateDocRequiredByAlliedLines(string policyNo, string Role = "")
        {
            var msjResult = string.Empty;
            var Listdoc = new List<string>(0);
            IEnumerable<Requirement.Product> result = null;
            IEnumerable<Requirement.Product> validation = null;

            //Verificar si todos los documentos requeridos han sido subidos y validados
            //Verfificar si todos los documentos subidos
            var documents = GetDocumentMandatoryByAlliedLines(Role);

            validation = documents;

            result = documents;

            var ExcluirPersonalIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();

            var ExcluirVehicleIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();


            var ExcluirCompanyInformation1 = documents
                                              .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation1.ToString() &&
                                                          k.DocumentId.HasValue).Any();

            var ExcluirCompanyInformation2 = documents
                                               .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation2.ToString() &&
                                                           k.DocumentId.HasValue).Any();

            var ExcluirCompanyInformation3 = documents
                                               .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation3.ToString() &&
                                                           k.DocumentId.HasValue).Any();


            //Verificar si hay documentos requeridos excluyentes
            var PersonalIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            var VehicleIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            var CompanyInformation1 = documents
                                      .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation1.ToString())
                                      .Select(p => p.RequirementTypeId);

            var CompanyInformation2 = documents
                                       .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation2.ToString())
                                       .Select(p => p.RequirementTypeId);

            var CompanyInformation3 = documents
                                       .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation3.ToString())
                                       .Select(p => p.RequirementTypeId);


            if (ExcluirPersonalIdentification)
            {
                result = from element in documents
                         where !(PersonalIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                         select element;

            }

            if (ExcluirVehicleIdentification)
            {
                result = (from element in result
                          where !(VehicleIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            if (ExcluirCompanyInformation1)
            {
                result = (from element in result
                          where !(CompanyInformation1.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }


            if (ExcluirCompanyInformation2)
            {
                result = (from element in result
                          where !(CompanyInformation2.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            if (ExcluirCompanyInformation3)
            {
                result = (from element in result
                          where !(CompanyInformation3.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            validation = result;

            documents = result;

            var HasDocWithoutLoad = (Role != Utility.AgentRoleType.Agent.ToString()) ? documents.Where(u => u.DocumentId == null)
                                                                                     : documents.Where(u => u.DocumentId == null && u.AssingTo == Role);

            var HasDocWithoutValidate = validation.Where(u => !u.IsValid.GetValueOrDefault() && u.IsMandatory.GetValueOrDefault());

            //Si de los documentos que son requeridos le falta alguno sin subir entonces no lo dejes pasar
            if (HasDocWithoutLoad.Any())
            {
                foreach (var item in HasDocWithoutLoad)
                    Listdoc.Add("*" + item.RequirementTypeDesc + "<br/>");

                msjResult = string.Format(string.Format(Resources.QuotDocumentRequired, policyNo) + " : <br/> <br/> {0} ", string.Join("<br/>", Listdoc.ToArray()));
                throw new Exception(msjResult);
            }

            if (Role != Utility.AgentRoleType.Agent.ToString())
            {
                //Si de los documentos que son requeridos falta alguno por validar entonces no le dejes pasar
                if (HasDocWithoutValidate.Any())
                {
                    //validar los documentos requeridos
                    foreach (var item in HasDocWithoutValidate)
                        Listdoc.Add("*" + item.RequirementTypeDesc + "<br/>");

                    msjResult = string.Format(Resources.NoDocumentReview + "<br/> <br/> {0} ", string.Join("<br/>", Listdoc.ToArray()));
                    throw new Exception(msjResult);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public void ValidateDocRequired(string policyNo, string Role = "")
        {
            var msjResult = string.Empty;
            var Listdoc = new List<string>(0);
            IEnumerable<Policy.Vehicle.Requirement> result = null;
            IEnumerable<Policy.Vehicle.Requirement> validation = null;

            //Verificar si todos los documentos requeridos han sido subidos y validados
            //Verfificar si todos los documentos subidos
            var documents = GetDocumentMandatory(Role);

            validation = documents;

            result = documents;

            var ExcluirPersonalIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();

            var ExcluirVehicleIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();

            //Verificar si hay documentos requeridos excluyentes
            var PersonalIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            var VehicleIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            if (ExcluirPersonalIdentification)
            {
                result = from element in documents
                         where !(PersonalIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                         select element;

            }

            if (ExcluirVehicleIdentification)
            {
                result = (from element in result
                          where !(VehicleIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            validation = result;

            documents = result;

            var HasDocWithoutLoad = (Role != Utility.AgentRoleType.Agent.ToString()) ? documents.Where(u => u.DocumentId == null)
                                                                                     : documents.Where(u => u.DocumentId == null && u.AssingTo == Role);

            var HasDocWithoutValidate = validation.Where(u => !u.IsValid.GetValueOrDefault() && u.IsMandatory.GetValueOrDefault());

            //Si de los documentos que son requeridos le falta alguno sin subir entonces no lo dejes pasar
            if (HasDocWithoutLoad.Any())
            {
                foreach (var item in HasDocWithoutLoad)
                    Listdoc.Add("*" + item.RequirementTypeDesc + "<br/>");

                msjResult = string.Format(string.Format(Resources.QuotDocumentRequired, policyNo) + " : <br/> <br/> {0} ", string.Join("<br/>", Listdoc.ToArray()));
                throw new Exception(msjResult);
            }

            if (Role != Utility.AgentRoleType.Agent.ToString())
            {
                //Si de los documentos que son requeridos falta alguno por validar entonces no le dejes pasar
                if (HasDocWithoutValidate.Any())
                {
                    //validar los documentos requeridos
                    foreach (var item in HasDocWithoutValidate)
                        Listdoc.Add("*" + item.RequirementTypeDesc + "<br/>");

                    msjResult = string.Format(Resources.NoDocumentReview + "<br/> <br/> {0} ", string.Join("<br/>", Listdoc.ToArray()));
                    throw new Exception(msjResult);
                }
            }
        }

        public void ValidateDocRequiredVehicles(string policyNo, string Role = "")
        {
            var msjResult = string.Empty;
            var Listdoc = new List<string>(0);
            IEnumerable<Requirement.Product> result = null;
            IEnumerable<Requirement.Product> validation = null;

            //Verificar si todos los documentos requeridos han sido subidos y validados
            //Verfificar si todos los documentos subidos
            var documents = GetDocumentMandatoryVehicle(Role);

            validation = documents;

            result = documents;

            var ExcluirPersonalIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();

            var ExcluirVehicleIdentification = documents
                                                .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString() &&
                                                            k.DocumentId.HasValue).Any();

            var ExcluirCompanyInformation1 = documents
                                               .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation1.ToString() &&
                                                           k.DocumentId.HasValue).Any();

            var ExcluirCompanyInformation2 = documents
                                               .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation2.ToString() &&
                                                           k.DocumentId.HasValue).Any();

            var ExcluirCompanyInformation3 = documents
                                               .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation3.ToString() &&
                                                           k.DocumentId.HasValue).Any();

            //Verificar si hay documentos requeridos excluyentes
            var PersonalIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.PersonalIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            var VehicleIdentification = documents
                                        .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.VehicleIdentification.ToString())
                                        .Select(p => p.RequirementTypeId);

            var CompanyInformation1 = documents
                                       .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation1.ToString())
                                       .Select(p => p.RequirementTypeId);

            var CompanyInformation2 = documents
                                       .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation2.ToString())
                                       .Select(p => p.RequirementTypeId);

            var CompanyInformation3 = documents
                                       .Where(k => k.RequirementTypeSubType == Utility.RequirementSubType.CompanyInformation3.ToString())
                                       .Select(p => p.RequirementTypeId);


            if (ExcluirPersonalIdentification)
            {
                result = from element in documents
                         where !(PersonalIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                         select element;

            }

            if (ExcluirVehicleIdentification)
            {
                result = (from element in result
                          where !(VehicleIdentification.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            if (ExcluirCompanyInformation1)
            {
                result = (from element in result
                          where !(CompanyInformation1.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }


            if (ExcluirCompanyInformation2)
            {
                result = (from element in result
                          where !(CompanyInformation2.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            if (ExcluirCompanyInformation3)
            {
                result = (from element in result
                          where !(CompanyInformation3.Contains(element.RequirementTypeId.GetValueOrDefault()))
                          select element).ToList();
            }

            validation = result;

            documents = result;

            var HasDocWithoutLoad = (Role != Utility.AgentRoleType.Agent.ToString()) ? documents.Where(u => u.DocumentId == null)
                                                                                     : documents.Where(u => u.DocumentId == null && u.AssingTo == Role);

            var HasDocWithoutValidate = validation.Where(u => !u.IsValid.GetValueOrDefault() && u.IsMandatory.GetValueOrDefault());

            //Si de los documentos que son requeridos le falta alguno sin subir entonces no lo dejes pasar
            if (HasDocWithoutLoad.Any())
            {
                foreach (var item in HasDocWithoutLoad)
                    Listdoc.Add("*" + item.RequirementTypeDesc + "<br/>");

                msjResult = string.Format(string.Format(Resources.QuotDocumentRequired, policyNo) + " : <br/> <br/> {0} ", string.Join("<br/>", Listdoc.ToArray()));
                throw new Exception(msjResult);
            }

            if (Role != Utility.AgentRoleType.Agent.ToString())
            {
                //Si de los documentos que son requeridos falta alguno por validar entonces no le dejes pasar
                if (HasDocWithoutValidate.Any())
                {
                    //validar los documentos requeridos
                    foreach (var item in HasDocWithoutValidate)
                        Listdoc.Add("*" + item.RequirementTypeDesc + "<br/>");

                    msjResult = string.Format(Resources.NoDocumentReview + "<br/> <br/> {0} ", string.Join("<br/>", Listdoc.ToArray()));
                    throw new Exception(msjResult);
                }
            }
        }

        public string ValidateCarFaxRequiredList(string Role)
        {
            var result = default(string);
            //Verfificar si todos los documentos subidos
            var documents = GetDocumentMandatory(Role);
            var HasDocWithoutLoad = documents.Where(u => u.DocumentId == null && u.RequirementTypeDesc.ToLower().Contains("carfax")).Any();

            //Si de los documentos que son requeridos le falta alguno sin subir entonces no lo dejes pasar
            if (HasDocWithoutLoad)
                result = Resources.BeforeSendingInspectionProvideCARFAX;

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Role"></param>
        public void ValidateCarFaxRequired(string Role)
        {
            //Verfificar si todos los documentos subidos
            var documents = GetDocumentMandatory(Role);
            var HasDocWithoutLoad = documents.Where(u => u.DocumentId == null && u.RequirementTypeDesc.ToLower().Contains("carfax")).Any();

            //Si de los documentos que son requeridos le falta alguno sin subir entonces no lo dejes pasar
            if (HasDocWithoutLoad)
                throw new Exception(Resources.BeforeSendingInspectionProvideCARFAX);
        }

        /// <summary>
        /// Validar que la poliza de incendio y lineas aliadas se pueda enviar a sysflex
        /// </summary>
        /// <param name="familyProduct"></param>
        /// <param name="illustrationStatusCode"></param>
        /// <param name="policyNo"></param>
        public void VerifyCanSendQuotesToSysFlexIL(string familyProduct, string illustrationStatusCode, string policyNo)
        {
            //Verificar los documentos requeridos
            ValidateDocRequiredByAlliedLines(policyNo);
        }

        /// <summary>
        /// Validar que la poliza se pueda enviar hacia SysFlex
        /// </summary>
        /// <param name="familyProduct"></param>
        /// <param name="illustrationStatusCode"></param>
        /// <param name="policyNo"></param>
        public void VerifyCanSendQuotesToSysFlex(string familyProduct, string illustrationStatusCode, string policyNo)
        {
            var msjResult = string.Empty;
            var Listvechicle = new List<string>(0);

            //Verificar si no es una Cotizacion de auto
            if (familyProduct != Utility.EFamilyProductType.Auto.ToString() ||
                illustrationStatusCode != Utility.IllustrationStatus.Subscription.Code())
                throw new Exception(Resources.IllustrationNo_CantBeApprovedBySubscription.SFormat(policyNo));

            //Verificar la inspeccion de cada vehiculo
            var result = SummaryVehicleInspect();

            if (result.Any())
            {
                foreach (var item in result)
                    Listvechicle.Add("*" + string.Format(Resources.VehicleRequireInspect, item.Item1 + " " + item.Item2 + " " + Resources.Year + ": " + item.Item3 + " Placa: " + item.Item4) + "<br/>");

                msjResult = string.Join("<br/>", Listvechicle.ToArray());

                throw new Exception(msjResult);
            }

            //Verificar los documentos requeridos
            //ValidateDocRequired(policyNo);
            ValidateDocRequiredVehicles(policyNo);
        }

        #region Events

        public void SetValidTabRequirementForNewBusiness()
        {
            oPolicyManager.SetValidTabRequirementForNewBusiness(new Entity.UnderWriting.Entities.Policy.Parameter()
            {
                CorpId = Corp_Id,
                RegionId = Region_Id,
                CountryId = Country_Id,
                DomesticregId = Domesticreg_Id,
                StateProvId = State_Prov_Id,
                CityId = City_Id,
                OfficeId = Office_Id,
                CaseSeqNo = Case_Seq_No,
                HistSeqNo = Hist_Seq_No,
                UnderwriterId = Agent_Id.Value
            });
        }

        /// <summary>
        /// Valida el tab si esta completo o no
        /// </summary>
        /// <param name="TabID"></param>
        /// <param name="IsValid"></param>
        public void saveSetValidTab(Utility.Tab TabID, bool IsValid = true)
        {
            oPolicyManager.SetValidTab(Corp_Id,
                                       Region_Id,
                                       Country_Id,
                                       Domesticreg_Id,
                                       State_Prov_Id,
                                       City_Id,
                                       Office_Id,
                                       Case_Seq_No,
                                       Hist_Seq_No,
                                       ProjectId,//2 es Proyecto Nuevos negocios
                                       Utility.getvalueFromEnumType(TabID.ToString(), typeof(Utility.Tab)),
                                       IsValid,
                                       UserID.HasValue ? UserID.Value : -1
                                       );

        }

        private bool isQuestionarieComplete(Questionnaire.Option item)
        {
            return oHealthDeclarationManager.GetQuestionValidation(item);
        }

        /// <summary>
        /// Validar si el tab esta completo verificando el cuestrionario de cada additional insured
        /// </summary>
        /// <param name="drop"></param>
        /// <returns></returns>
        public bool validateQuestionaries(DropDownList drop)
        {
            bool result, temp;
            result = true;

            foreach (ListItem item in drop.Items)
            {
                var data = Utility.deserializeJSON<Utility.itemInsuredType>(item.Value);

                temp = isQuestionarieComplete(new Questionnaire.Option()
                {
                    CorpId = Corp_Id,
                    RegionId = Region_Id,
                    CountryId = Country_Id,
                    DomesticregId = Domesticreg_Id,
                    StateProvId = State_Prov_Id,
                    CityId = City_Id,
                    OfficeId = Office_Id,
                    CaseSeqNo = Case_Seq_No,
                    HistSeqNo = Hist_Seq_No,
                    ContactId = data.ContactId,
                    ContactRoleTypeId = data.ContactRoleTypeId,
                    LanguageId = Language.ToInt(),
                    ForSex = GetContact(data.ContactId).Gender
                });

                if (result)
                    result = temp;
            }

            //El Tab esta completo?
            saveSetValidTab(Utility.Tab.HealthDeclaration, result);

            return result;
        }

        #endregion

        #region PolicyPlan Methods
        public void SavePPInvestmentProfile(Policy.InvestProfile investmentProfile, bool isUpdate = false)
        {
            //Setting Key
            investmentProfile.CorpId = Corp_Id;
            investmentProfile.RegionId = Region_Id;
            investmentProfile.CountryId = Country_Id;
            investmentProfile.DomesticregId = Domesticreg_Id;
            investmentProfile.StateProvId = State_Prov_Id;
            investmentProfile.CityId = City_Id;
            investmentProfile.OfficeId = Office_Id;
            investmentProfile.CaseSeqNo = Case_Seq_No;
            investmentProfile.HistSeqNo = Hist_Seq_No;

            //Setting UserID
            investmentProfile.UserId = UserID.Value;

            if (isUpdate)
                oPolicyManager.UpdateInvestmentProfile(investmentProfile);
            else
                oPolicyManager.InsertInvestmentProfile(investmentProfile);
        }

        public void SavePPPersonalizedProfile(List<Policy.InvestProfilePersonalized> saveData)
        {
            foreach (var item in saveData)
            {
                //Setting Key
                item.CorpId = Corp_Id;
                item.RegionId = Region_Id;
                item.CountryId = Country_Id;
                item.DomesticregId = Domesticreg_Id;
                item.StateProvId = State_Prov_Id;
                item.CityId = City_Id;
                item.OfficeId = Office_Id;
                item.CaseSeqNo = Case_Seq_No;
                item.HistSeqNo = Hist_Seq_No;

                //Setting UserID
                item.UserId = UserID.Value;
            }

            oPolicyManager.SetInvestProfilePersonalized(saveData);
        }

        public void FillReason(DropDownList drp, string familyProduct, Utility.ReasonPredefinieds reasonPredefinied)
        {
            var nameKey = string.Empty;

            switch (reasonPredefinied)
            {
                case Utility.ReasonPredefinieds.DeniedIllustrationReason:
                    nameKey = "Denied{0}IllustrationReason";
                    break;
                case Utility.ReasonPredefinieds.DeniedSubscriptionIllustrationReason:
                    nameKey = "DeniedSubscription{0}IllustrationReason";
                    break;
                case Utility.ReasonPredefinieds.DiscountIllustrationReason:
                    nameKey = "Discount{0}IllustrationReason";
                    break;
                case Utility.ReasonPredefinieds.SurchargeIllustrationReason:
                    nameKey = "Surcharge{0}IllustrationReason";
                    break;
                default:
                    break;
            }

            if (familyProduct == Utility.ProductLine.AlliedLines.ToString())
                familyProduct = AlliedLinesProductBehavior.ToString();

            nameKey = nameKey.SFormat(familyProduct);

            var data = GettingDropData(Utility.DropDownType.NotePredefinied, NameKey: nameKey)
                       .Select(p => new
                       {
                           Text = p.NotePredefiniedDesc,
                           Value = string.Concat(p.NotePredefiniedId.ToString(), "|", p.ActionDesc)
                       });

            drp.DataSource = data;
            drp.DataValueField = "Value";
            drp.DataTextField = "Text";
            drp.DataBind();
            drp.Items.Insert(0, new ListItem { Text = Resources.Select, Value = "-1" });
            drp.SelectedIndex = 0;
        }

        //Para el popup de Aplicar Descuentos y Recargos
        public void FillReason(DropDownList drp, Utility.ReasonPredefinieds reasonPredefinied, string familyProduct)
        {
            string nameKey = "";

            switch (reasonPredefinied)
            {
                case Utility.ReasonPredefinieds.DeniedIllustrationReason:
                    nameKey = "Denied{0}IllustrationReason";
                    break;
                case Utility.ReasonPredefinieds.DeniedSubscriptionIllustrationReason:
                    nameKey = "DeniedSubscription{0}IllustrationReason";
                    break;
                case Utility.ReasonPredefinieds.DiscountIllustrationReason:
                    nameKey = "Discount{0}IllustrationReason";
                    break;
                case Utility.ReasonPredefinieds.SurchargeIllustrationReason:
                    nameKey = "Surcharge{0}IllustrationReason";
                    break;
                default:
                    break;
            }

            GettingAllDrops(ref drp,
                            Utility.DropDownType.NotePredefinied,
                            "NotePredefiniedDesc",
                            "NotePredefiniedId",
                            NameKey: nameKey.SFormat(familyProduct),
                            GenerateItemSelect: true,
                            GenerateItemSelectText: Resources.Select);
        }

        #endregion

        #region Gettings All Drops
        private IEnumerable<DropDown> getDropDown(Entity.UnderWriting.Entities.DropDown.Parameter param)
        {
            return oDropDownManager.GetDropDownByType(param);
        }

        public IEnumerable<DropDown> GettingDropData(
                                                      Utility.DropDownType dropDownType,
                                                      int? corpId = null,
                                                      int? regionId = null,
                                                      int? countryId = null,
                                                      int? domesticregId = null,
                                                      int? stateProvId = null,
                                                      int? cityId = null,
                                                      int? officeId = null,
                                                      int? caseSeqNo = null,
                                                      int? histSeqNo = null,
                                                      int? contactId = null,
                                                      int? agentId = null,
                                                      bool? isInsured = null,
                                                      int? occupGroupTypeId = null,
                                                      int? requirementCategory = null,
                                                      int? requirementType = null,
                                                      int? BlTypeId = null,
                                                      int? BlId = null,
                                                      int? PaymentSourceId = null,
                                                      int? PaymentSourceTypeId = null,
                                                      int? currencyId = null,
                                                      int? ScaleTypeId = null,
                                                      string abaNumber = null,
                                                      bool? appliedByFreqOrCountry = null,
                                                      int? ProductTypeId = null,
                                                      int? ProviderId = null,
                                                      int? pProjectId = null,
                                                      int? DeductibleTypeId = null,
                                                      String NameKey = null
                                             )
        {

            var parameter = new DropDown.Parameter
            {
                DropDownType = Enum.GetName(typeof(Utility.DropDownType), dropDownType),
                CorpId = this.Corp_Id,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticregId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                ContactId = contactId,
                AgentId = agentId,
                IsInsured = isInsured,
                OccupGroupTypeId = occupGroupTypeId,
                RequirementCatId = requirementCategory,
                BlTypeId = BlTypeId,
                BlId = BlId,
                CurrencyId = currencyId,
                AbaNumber = abaNumber,
                AppliedByFreqOrCountry = appliedByFreqOrCountry,
                ProductTypeId = ProductTypeId,
                CompanyId = this.CompanyId,
                DeductibleTypeId = DeductibleTypeId,
                PaymentSourceId = PaymentSourceId,
                PaymentSourceTypeId = PaymentSourceTypeId,
                NameKey = NameKey,
                LanguageId = this.Language.ToInt(),
                ProjectId = pProjectId,
                ProviderId = ProviderId
            };

            var data = getDropDown(parameter);
            return data;

        }

        /// <summary>
        /// Bindea el DropDown pasado por Referencia y devuelve el value en formato Json
        /// </summary>
        /// <param name="ddl"></param>
        /// <param name="valores"></param>
        /// <param name="DataTextField"></param>
        /// <param name="DataValueField"></param>
        /// <param name="GenerateItemSelect"></param>
        public void GettingAllDropsJSON(
                                         ref DropDownList ddl,
                                         Entity.UnderWriting.Entities.DropDown.Parameter valores,
                                         string DataTextField = null,
                                         string DataValueField = null,
                                         bool GenerateItemSelect = true,
                                               string GenerateItemSelectText = null
                                       )
        {

            //Limpiar el dropdown antes de bindearlo
            ddl.Items.Clear();

            var data = getDropDown(valores);

            if (data != null)
            {
                ddl.DataSource = data;
                ddl.DataTextField = DataTextField;
                ddl.DataValueField = "ValueField";
                ddl.DataBind();
            }

            if (GenerateItemSelect)
                ddl.Items.Insert(0, new ListItem() { Value = "-1", Text = GenerateItemSelectText });
        }


        /// <summary>
        ///  Author: Lic. Carlos Ml. Lebron
        ///  Created Date :11-25-2014
        ///  Obtener la data de un dropdownlist segun su tipo y bindearlo con esa data
        /// </summary>
        public void GettingAllDropsJSON(
                                        ref DropDownList ddl,
                                        Utility.DropDownType dropDownType,
                                        string DataTextField = null,
                                        bool GenerateItemSelect = true,
                                        int? corpId = null,
                                        int? regionId = null,
                                        int? countryId = null,
                                        int? domesticregId = null,
                                        int? stateProvId = null,
                                        int? cityId = null,
                                        int? officeId = null,
                                        int? caseSeqNo = null,
                                        int? histSeqNo = null,
                                        int? contactId = null,
                                        int? agentId = null,
                                        bool? isInsured = null,
                                        int? occupGroupTypeId = null,
                                        int? requirementCategory = null,
                                        int? requirementType = null,
                                        int? BlTypeId = null,
                                        int? BlId = null,
                                        int? currencyId = null,
                                        int? ScaleTypeId = null,
                                        string abaNumber = null,
                                        bool? appliedByFreqOrCountry = null,
                                        int? ProductTypeId = null,
                                        string NameKey = null,
                                        string GenerateItemSelectText = "-----"
                                        )
        {

            //Limpiar el dropdown antes de bindearlo
            ddl.Items.Clear();

            DropDown.Parameter parameter = new DropDown.Parameter
            {
                DropDownType = Enum.GetName(typeof(Utility.DropDownType), dropDownType),
                CorpId = this.Corp_Id,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticregId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                ContactId = contactId,
                AgentId = agentId,
                IsInsured = isInsured,
                OccupGroupTypeId = occupGroupTypeId,
                RequirementCatId = requirementCategory,
                BlTypeId = BlTypeId,
                BlId = BlId,
                CurrencyId = currencyId,
                NameKey = NameKey,
                AbaNumber = abaNumber,
                AppliedByFreqOrCountry = appliedByFreqOrCountry,
                ProductTypeId = ProductTypeId,
                CompanyId = this.CompanyId,
                LanguageId = this.Language.ToInt(),
                ProjectId = this.ProjectId
            };

            var data = new Services().oDropDownManager.GetDropDownByType(parameter);

            if (data != null)
            {
                if (dropDownType == Utility.DropDownType.ProductByFamily)
                {
                    data = data.Select(d =>
                    {
                        var ProductKey = new Utility.itemProduct
                        {
                            CorpId = d.CorpId.Value,
                            CountryId = d.CountryId.Value,
                            BlId = d.BlId.Value,
                            ProductId = d.ProductId.Value,
                            RegionId = d.RegionId.Value,
                            BlTypeId = d.BlTypeId.Value,
                            ProductTypeId = d.ProductTypeId.Value,
                            NameKey = d.Namekey
                        };

                        d.ValueField = Utility.serializeToJSON<Utility.itemProduct>(ProductKey);
                        return d;
                    });
                }
                else
                    if (dropDownType == Utility.DropDownType.RelationshipFuneral)
                {
                    data = data.Select(d =>
                    {
                        var RelationShipKey = new Utility.itemRelationship
                        {
                            RelationshipId = d.RelationshipId,
                            NameKey = d.Namekey
                        };

                        d.ValueField = Utility.serializeToJSON<Utility.itemRelationship>(RelationShipKey);
                        return d;
                    });
                }
                else if (dropDownType == Utility.DropDownType.Provider)
                {
                    data = data.Select(d =>
                    {
                        var RelationShipKey = new Utility.provider
                        {
                            ProviderId = d.ProviderId,
                            ProviderTypeId = d.ElementId,
                            ElementDesc = d.ElementDesc
                        };

                        d.ValueField = Utility.serializeToJSON<Utility.provider>(RelationShipKey);
                        return d;
                    });
                }

                ddl.DataSource = data;
                ddl.DataTextField = DataTextField;
                ddl.DataValueField = "ValueField";
                ddl.DataBind();
            }

            if (GenerateItemSelect)
            {
                ddl.Items.Insert(0, new ListItem() { Value = "-1", Text = GenerateItemSelectText });
                ddl.SelectedIndex = 0;
            }
        }

        public void GettingAllDrops(ref DropDownList ddl,
                                       Entity.UnderWriting.Entities.DropDown.Parameter valores,
                                       string DataTextField = null,
                                       string DataValueField = null,
                                       bool GenerateItemSelect = true
                                     )
        {
            //Limpiar el dropdown antes de bindearlo
            ddl.Items.Clear();

            if (valores.DropDownType != "LengthatWork" &&
                valores.DropDownType != "Months" &&
                valores.DropDownType != "RetirementPeriod" &&
                valores.DropDownType != "DefermentPeriod"
               )
            {
                if (!valores.CorpId.HasValue)
                    valores.CorpId = this.Corp_Id;

                if (!valores.ProjectId.HasValue)
                    valores.ProjectId = this.ProjectId;

                if (!valores.CompanyId.HasValue)
                    valores.CompanyId = this.CompanyId;

                if (!valores.LanguageId.HasValue)
                    valores.LanguageId = this.Language.ToInt();

                var data = getDropDown(valores);

                ddl.DataSource = data;
                ddl.DataTextField = DataTextField;

                if (valores.DropDownType == "StateProvince" ||
                    valores.DropDownType == "Agent")
                    ddl.DataValueField = "ValueField";
                else
                    ddl.DataValueField = DataValueField;

                ddl.SelectedIndex = -1;

                ddl.DataBind();

                if (GenerateItemSelect)
                {
                    ddl.Items.Insert(0, new ListItem() { Value = "-1", Text = "---" });
                    ddl.SelectedIndex = 0;
                }
            }
            else
            {
                ddl.Items.Clear();

                switch (valores.DropDownType)
                {
                    case "LengthatWork":
                        for (int x = 1; x <= 60; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;

                    case "Months":
                        for (int x = 1; x <= 12; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;

                    case "RetirementPeriod":
                        for (int x = 5; x <= 30; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;

                    case "DefermentPeriod":
                        for (int x = 0; x <= 30; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;
                }


                if (GenerateItemSelect)
                {
                    ddl.Items.Insert(0, new ListItem() { Value = "-1", Text = "---" });
                    ddl.SelectedIndex = 0;
                }

            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ddl">Dropdown </param>
        /// <param name="dropDownType"></param>
        /// <param name="DataTextField"></param>
        /// <param name="DataValueField"></param>
        /// <param name="GenerateItemSelect"></param>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticregId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="contactId"></param>
        /// <param name="agentId"></param>
        /// <param name="isInsured"></param>
        /// <param name="occupGroupTypeId"></param>
        /// <param name="requirementCategory"></param>
        /// <param name="requirementType"></param>
        public void GettingAllDrops(ref DropDownList ddl,
                                    Utility.DropDownType dropDownType,
                                    string DataTextField = null,
                                    string DataValueField = null,
                                    bool GenerateItemSelect = true,
                                    int? corpId = null,
                                    int? regionId = null,
                                    int? countryId = null,
                                    int? domesticregId = null,
                                    int? stateProvId = null,
                                    int? cityId = null,
                                    int? officeId = null,
                                    int? caseSeqNo = null,
                                    int? histSeqNo = null,
                                    int? contactId = null,
                                    int? agentId = null,
                                    bool? isInsured = null,
                                    int? occupGroupTypeId = null,
                                    int? requirementCategory = null,
                                    int? requirementType = null,
                                    int? BlTypeId = null,
                                    int? BlId = null,
                                    int? PaymentSourceId = null,
                                    int? PaymentSourceTypeId = null,
                                    int? currencyId = null,
                                    int? ScaleTypeId = null,
                                    string abaNumber = null,
                                    bool? appliedByFreqOrCountry = null,
                                    int? ProductTypeId = null,
                                    string NameKey = "",
                                    int? companyId = null,
                                    string GenerateItemSelectText = "-----"
                                    )
        {


            //Limpiar el dropdown antes de bindearlo
            ddl.Items.Clear();

            if (dropDownType != Utility.DropDownType.LengthatWork &&
                dropDownType != Utility.DropDownType.Months &&
                dropDownType != Utility.DropDownType.RetirementPeriod &&
                dropDownType != Utility.DropDownType.DefermentPeriod
               )
            {
                var parameter = new DropDown.Parameter
                {
                    DropDownType = Enum.GetName(typeof(Utility.DropDownType), dropDownType),
                    CorpId = this.Corp_Id,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticregId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    ContactId = contactId,
                    AgentId = agentId,
                    IsInsured = isInsured,
                    OccupGroupTypeId = occupGroupTypeId,
                    RequirementCatId = requirementCategory,
                    BlTypeId = BlTypeId,
                    BlId = BlId,
                    CurrencyId = currencyId,
                    AbaNumber = abaNumber,
                    AppliedByFreqOrCountry = appliedByFreqOrCountry,
                    ProductTypeId = ProductTypeId,
                    CompanyId = companyId.GetValueOrDefault() == -1 ? null : (companyId.HasValue ? companyId : this.CompanyId),
                    PaymentSourceId = PaymentSourceId,
                    PaymentSourceTypeId = PaymentSourceTypeId,
                    NameKey = NameKey,
                    LanguageId = this.Language.ToInt(),
                    ProjectId = this.ProjectId
                };

                var data = getDropDown(parameter);

                ddl.DataSource = data;
                ddl.DataTextField = DataTextField;
                ddl.DataValueField = (dropDownType == Utility.DropDownType.StateProvince || dropDownType == Utility.DropDownType.Agent) ? "ValueField"
                                                                                                                                        : DataValueField;
                ddl.SelectedIndex = -1;

                ddl.DataBind();

                if (GenerateItemSelect)
                {
                    ddl.Items.Insert(0, new ListItem() { Value = "-1", Text = GenerateItemSelectText });
                    ddl.SelectedIndex = 0;
                }
            }
            else
            {
                ddl.Items.Clear();

                switch (dropDownType)
                {
                    case Utility.DropDownType.LengthatWork:
                        for (int x = 1; x <= 60; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;

                    case Utility.DropDownType.Months:
                        for (int x = 1; x <= 11; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;

                    case Utility.DropDownType.RetirementPeriod:
                        for (int x = 5; x <= 30; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;

                    case Utility.DropDownType.DefermentPeriod:
                        for (int x = 0; x <= 30; x++)
                            ddl.Items.Add(new ListItem() { Value = x.ToString(), Text = x.ToString() });
                        break;
                }

                if (GenerateItemSelect)
                {
                    ddl.Items.Insert(0, new ListItem() { Value = "-1", Text = GenerateItemSelectText });
                    ddl.SelectedIndex = 0;
                }
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="dropDownType"></param>
        /// <param name="parameter"></param>
        /// <returns></returns>
        public IEnumerable<DropDown> GetDropDownByType(Utility.DropDownType dropDownType, DropDown.Parameter parameter = null)
        {
            if (parameter == null)
                parameter = new DropDown.Parameter();

            parameter.CorpId = this.Corp_Id;
            parameter.DropDownType = Enum.GetName(typeof(Utility.DropDownType), dropDownType);
            parameter.CompanyId = 2;
            parameter.ProjectId = this.ProjectId;
            return getDropDown(parameter) ?? new List<DropDown>();
        }

        #endregion

        /// <summary>
        /// Obtiene una lista de vehiculos por poliza
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="vehicleUniqueID"></param>
        /// <returns></returns>
        private IEnumerable<Policy.VehicleInsured> getVehicles(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                      , int officeId, int caseSeqNo, int histSeqNo, long? vehicleUniqueID = null)
        {
            IEnumerable<Policy.VehicleInsured> result = null;
            result = oPolicyManager.GetVehicleInsured(new Policy.Parameter
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                UnderwriterId = Agent_LoginId,
                LanguageId = Language.ToInt(),
                UserId = this.UserID
            }).Where(o => o.VehicleUniqueId == (vehicleUniqueID.HasValue ? vehicleUniqueID : o.VehicleUniqueId));


            return result;
        }
        public Policy.Quo getillustrationData()
        {
            var illustrationData = oPolicyManager.GetQuotationInfoTemp(new Policy.Quo.Temp
            {
                PolicyNo = this.Policy_Id
            }).FirstOrDefault();
            return
                illustrationData;
        }

        #region Items Allied Lines

        public class AlliedLinesBase
        {
            public List<Utility.CoverageIL> Coverages { get; set; }
            public AlliedLinesBase()
            {
                Coverages = new List<Utility.CoverageIL>(0);
            }
        }

        public class AirplaneItem : AlliedLinesBase
        {
            public IEnumerable<Airplane.Insured> AirplaneInsured { get; set; }
        }

        public class NavyItem : AlliedLinesBase
        {
            public IEnumerable<Navy.Insured> NavyInsured { get; set; }
        }

        public class TransportItem : AlliedLinesBase
        {
            public IEnumerable<Transport.Insured> TransportInsured { get; set; }
        }

        public class BailItem : AlliedLinesBase
        {
            public IEnumerable<Entity.UnderWriting.Entities.Bail.Insured> BailInsured { get; set; }
        }

        public class PropertyItem : AlliedLinesBase
        {
            public IEnumerable<Property> PropertyInsured { get; set; }
        }

        #endregion


        /// <summary>
        /// Guardar las condiciones particulares
        /// </summary>
        /// <param name="ParticularCondition"></param>
        /// <param name="vCompañia"></param>
        /// <param name="Cotizacion"></param>
        /// <param name="Ramo"></param>
        /// <param name="SubRamo"></param>
        /// <param name="SecuenceItem"></param>
        /// <param name="ConditionId"></param>
        private List<SetQuotationConditionILResult> SaveCondition_IL(IEnumerable<Policy.ConditionForSysflexIL> ParticularCondition, int vCompañia, decimal Cotizacion, int Ramo, int SubRamo, int SecuenceItem)
        {
            var result = new List<SetQuotationConditionILResult>(0);

            ParticularCondition = ParticularCondition.Where(n => !string.IsNullOrEmpty(n.valor)).AsEnumerable();

            foreach (var item in ParticularCondition)
            {
                decimal DatoNumValue = 0;

                //var IsNumber = Microsoft.VisualBasic.Information.IsNumeric(item.valor);

                var IsNumber = string.IsNullOrEmpty(item.esnumero) ? false : item.esnumero == "S";

                if (IsNumber)
                {
                    var DatoNum = item.valor;
                    var numberFormatInfo = new NumberFormatInfo { NumberDecimalSeparator = "." };
                    var Res = 0m;

                    if (Decimal.TryParse(DatoNum, NumberStyles.AllowDecimalPoint, numberFormatInfo, out Res))
                        DatoNumValue = Res;
                    else
                        throw new Exception(string.Concat(GenericMessage, ",", string.Format("La condición \"{0}\" no se puede convertir a un valor númerico", item.descripcion)));
                }

                var itemCondition = new oSysFlexService.PolicyQuotationILQuotationConditionparameter
                {
                    compania = vCompañia,
                    cotizacion = Cotizacion,
                    ramo = Ramo,
                    subRamo = SubRamo,
                    secuencia = SecuenceItem,//Secuencia de cada item insertado
                    codigo = 1,
                    secuenciaCondicion = item.secuenciacondicion,//Id de la condicion
                    descripcion = item.descripcion,
                    datoAlf = !IsNumber ? item.valor : null,
                    datoNum = IsNumber ? DatoNumValue : (decimal?)null,
                    decimales = item.Decimales.ToString()
                };

                var SetQuotationConditionResult = oSFPolicyServiceClient.SetQuotationCondition_IL(itemCondition);
                result.Add(SetQuotationConditionResult);
            }

            return
                 result;
        }

        /// <summary>
        /// Agregar detalle del producto IL
        /// </summary>
        /// <param name="oData"></param>
        /// <param name="vCompañia"></param>
        /// <param name="Cotizacion"></param>
        /// <param name="Ramo"></param>
        /// <param name="SubRamo"></param>
        /// <param name="UserCodeName"></param>
        private SetQuotationDetailILResult SaveDetail_IL(dynamic oData,
                                                         dynamic DataCoverage,
                                                         int? vCompañia,
                                                         decimal? Cotizacion,
                                                         int? Ramo,
                                                         int? SubRamo,
                                                         string UserCodeName,
                                                         decimal TasaCalc,
                                                         DateTime ContactAge,
                                                         oSysFlexService.UtilityGender Sexo,
                                                         int SecuenceItem,
                                                         decimal MontoAsegurado,
                                                         long? EntityId,
                                                         string formadePago,
                                                         DateTime? PolicyEffectiveDate,
                                                         DateTime? PolicyExpirationDate
                                                         )
        {

            Utility.QuotationAmmount quotationAmmount = GetQuotationAmmountsIL(this.Case_Seq_No,
                                                                               this.City_Id,
                                                                               this.Corp_Id,
                                                                               this.Country_Id,
                                                                               this.Domesticreg_Id,
                                                                               this.Hist_Seq_No,
                                                                               this.Office_Id,
                                                                               this.Region_Id,
                                                                               this.State_Prov_Id,
                                                                               EntityId
                                                                               );

            var pMontoImpuesto = oData.PremiumAmount * TasaCalc;
            var pPrimaNeta = oData.PremiumAmount + pMontoImpuesto;

            DateTime FechaInicio = PolicyEffectiveDate.HasValue ? PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
            DateTime FechaFin = PolicyExpirationDate.HasValue ? PolicyExpirationDate.GetValueOrDefault() : FechaInicio.AddYears(1);

            var QtyMonth = Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Month, FechaInicio, FechaFin);

            var itemDetail = new oSysFlexService.PolicyQuotationILQuotationDetailparameter
            {
                compania = vCompañia,
                cotizacion = Cotizacion,
                ramo = Ramo,
                subRamo = SubRamo,
                secuencia = SecuenceItem,
                porcRecargo = quotationAmmount.PorcRecargo,
                montoRecargo = quotationAmmount.MontoRecargo,
                porcDescuento = quotationAmmount.PorcDescuento,
                montoDescuento = quotationAmmount.MontoDescuento,
                porcImpuesto = TasaCalc,
                montoImpuesto = pMontoImpuesto,
                renovacionAutomatica = "",
                primaBruta = oData.PremiumAmount,
                neto = pPrimaNeta,
                montoAsegurado = MontoAsegurado,
                fechaInicio = FechaInicio,
                fechaFin = FechaFin,
                cantidadMeses = (int)QtyMonth,
                codigoTarifa = 1,
                usuario = UserCodeName,
                estatus = "ACTIVO",
                tasa = 0,
                noFormulario = "",
                formadePago = formadePago
            };

            var SetQuotationDetailResult = oSFPolicyServiceClient.SetQuotationDetail_IL(itemDetail);

            return
                SetQuotationDetailResult;
        }


        private void SetPaymentAgreement(int corpId,
                                         int regionId,
                                         int countryId,
                                         int domesticRegId,
                                         int stateProvId,
                                         int cityId,
                                         int officeId,
                                         int caseSeqNo,
                                         int histSeqNo,
                                         int vCompañia,
                                         decimal Cotizacion
                                        )
        {
            //Guardar el acuerdo de pago                    
            var dataResult = this.oPaymentManager.GetPaymentAgreement(new Entity.UnderWriting.Entities.Payment.Agreement
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo
            });

            var PaymentsAgreementQty = 0;
            var InitialPayment = 0M;

            if (dataResult != null)
            {
                PaymentsAgreementQty = dataResult.PaymentsAgreementQty;
                InitialPayment = dataResult.InitialPayment;
            }

            var item = new oSysFlexService.PolicyPaymentAgreementKey
            {
                compania = vCompañia,
                usuario = UserName,
                sistema = "New Business",
                cantidadCuotas = PaymentsAgreementQty,
                inicial = InitialPayment,
                cotizacion = Cotizacion
            };

            //Este metodo se queda igual
            var SetPaymentAgreementResult = oSFPolicyServiceClient.SetPaymentAgreement(item);

            hasError = (ErrorCode.Contains(SetPaymentAgreementResult.Code));

            if (hasError)
                throw new Exception(string.Concat(GenericMessage, ",", SetPaymentAgreementResult.Message));
        }


        /// <summary>
        /// Guardar las coverturas por cada detalle de los productos de incendio y lineas aliadas
        /// </summary>
        /// <param name="oData"></param>
        /// <param name="vCompañia"></param>
        /// <param name="Cotizacion"></param>
        /// <param name="Ramo"></param>
        /// <param name="SubRamo"></param>
        private Tuple<List<SetQuotationCoverageILResult>, List<Tuple<int, int, string>>> SaveCoverages_IL(dynamic oData, int? vCompañia, decimal? Cotizacion, int? Ramo, int? SubRamo, int SecuenceItem, getResult CoverageSysflex)
        {
            var res = new Tuple<List<SetQuotationCoverageILResult>, List<Tuple<int, int, string>>>(null, null);

            var result = new List<SetQuotationCoverageILResult>(0);
            var Coverages = new List<Tuple<int, int, string>>(0);

            /*
                    Campos disponibles en  item:
                 
                    int CurrencyId 
                    decimal UnitaryPrice 
                    decimal PackagePrice 
                    decimal? DeductibleAmount 
                    decimal? DeductiblePercentage 
                    decimal? ManualDeductibleAmount 
                    decimal? ManualDeductiblePercentage 
                    decimal? CoverageLimit 
                    bool CoverageStatus 
                    int CorpId 
                    long UniqueId 
                    int RegionId 
                    int CountryId 
                    int BlTypeId 
                    int BlId 
                    int ProductId 
                    int VehicleTypeId 
                    int GroupId 
                    int CoverageTypeId 
                    int CoverageId 
                    string CoverageTypeDesc 
                    string GroupDesc 
                    string CoverageDesc 
                    int Ramo 
                    int SubRamo 
                    decimal? CoveragePercentage
                    decimal? PremiumPercentage 
                    decimal? CoinsurancePercentage
             */

            foreach (var item in oData)
            {
                if (string.IsNullOrEmpty(CoverageSysflex.JSONResult) || CoverageSysflex.JSONResult.ToLower() == "null")
                    throw new Exception(CoverageSysflex.Message);

                var oCoverageSysflexValues = new List<Utility.SysflexProductIL>();

                if (!string.IsNullOrEmpty(CoverageSysflex.JSONResult) && CoverageSysflex.JSONResult.ToLower() != "null")
                {
                    var OldValue = "{}";
                    var resultString = CoverageSysflex.JSONResult.Replace(OldValue, "0");
                    oCoverageSysflexValues = Utility.deserializeJSON<List<Utility.SysflexProductIL>>(resultString);
                }

                var CoverageId = 0;
                var Desc = (item.CoverageDesc as string).ToLower().RemoveAccentsWithRegEx();
                var dataCoverageSysflex = oCoverageSysflexValues.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                if (dataCoverageSysflex.Any())
                {
                    CoverageId = dataCoverageSysflex.FirstOrDefault().Secuencia;
                    Coverages.Add(new Tuple<int, int, string>(item.CoverageId, CoverageId, item.CoverageDesc));
                }
                else
                    throw
                        new Exception(string.Format("{0} {1}", "No se puede continuar con la emisión de esta póliza", string.Concat(" la cobertura \"", item.CoverageDesc, "\" no existe en SysFlex")));

                var montoInformativo = item.CoverageLimit != null ? ((decimal)item.CoverageLimit).ToString("#,0.00", CultureInfo.InvariantCulture) : "0.00";
                var porciento = item.PremiumPercentage != null ? ((decimal)item.PremiumPercentage) : 0;
                var prima = item.UnitaryPrice != null ? ((decimal)item.UnitaryPrice) : 0;
                var PorcientoCobertura = item.CoinsurancePercentage != null ? ((decimal)item.CoinsurancePercentage) : 0;

                var itemQuotationIL = new oSysFlexService.PolicyQuotationILQuotationCoverageparameter
                {
                    compania = vCompañia,
                    cotizacion = Cotizacion,
                    ramo = Ramo,
                    subRamo = SubRamo,
                    secuenciaCot = SecuenceItem,
                    secuencia = CoverageId,
                    descripcion = item.CoverageDesc,
                    montoInformativo = montoInformativo,
                    tieneCobertura = "S",
                    porciento = porciento,
                    prima = prima,
                    porcDeducible = item.DeductiblePercentage,
                    minimoDeducible = item.DeductibleAmount,
                    endoso = "",
                    porcCobertura = PorcientoCobertura,
                    valorServicio = 0
                };

                var SetQuotationCoverageResult = oSFPolicyServiceClient.SetQuotationCoverage_IL(itemQuotationIL);
                result.Add(SetQuotationCoverageResult);
            }

            res = new Tuple<List<SetQuotationCoverageILResult>, List<Tuple<int, int, string>>>(result, Coverages);

            return
                 res;
        }


        public Utility.PolicyAndContactInfo GetDataPolicyAndCustomer(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo)
        {
            var vRamo = 0;
            var vSubRamo = 0;
            var Intermediario = 2528;
            var Oficina = 39;
            var Email = default(string);
            var PolicyNo = string.Empty;
            var Quotation = string.Empty;
            string UserCodeName = "VO-" + this.UserFullName;
            decimal MontoAsegurado = 0;
            bool hasError;
            var ErrorCode = new string[] { "001", "002" };
            var TaxPercent = 13m;

            var FrequenciaPago = "";

            var result =
                        new Utility.PolicyAndContactInfo();

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
             , officeId, caseSeqNo, histSeqNo);

            //Intermediario = PolicyData.AgentCode.ToInt();         
            //Quotation = PolicyData.PolicyNo;
            //TaxPercent = PolicyData.TaxPercentage.GetValueOrDefault();
            //Oficina = PolicyData.OfficeId;

            /*
             Global            SysFlex  
             1.- Other       = N/A
             2.- Quartely    = Trimestral
             3.- Monthly     =  Mensual
             4.- Annual      =  Anual
             5.- Semiannual  = Semestral
              
            */

            switch (PolicyData.PaymentFreqTypeDesc)
            {
                case "Annual": FrequenciaPago = "Anual"; break;
                case "Quartely": FrequenciaPago = "Trimestral"; break;
                case "SemiAnnual": FrequenciaPago = "Semestral"; break;
                case "Monthly": FrequenciaPago = "Mensual"; break;
                case "Other": FrequenciaPago = "Otros"; break;
            }

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

            //Validar el contacto
            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager
                           .GetCommunicatonEmail(corpId, ContactData.ContactId, Language.ToInt());

            //Validar Email
            if (DataEmail.Any())
            {
                var EmailResult = DataEmail
                                 .FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                if (EmailResult != null)
                    Email = EmailResult.EmailAdress;
            }

            //Direccion del Contacto
            var oAddress = oContactManager
                          .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? oAddress.StreetAddress : "-";

            //Telefonos del contacto
            var oPhones = oContactManager
                          .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

            //Data Telefonos

            //Casa
            var DataTelefonoCasa = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 6);
            //Trabajo
            var DataTelefonoTrabajo = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 7);
            //Celular
            var DataTelefonoCelular = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 8);

            //Casa            
            var TelefonoCasa = DataTelefonoCasa != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCasa.CountryCode, DataTelefonoCasa.AreaCode, DataTelefonoCasa.PhoneNumber)
                               : default(string);
            //Trabajo
            var TelefonoTrabajo = DataTelefonoTrabajo != null ?
                               string.Format("{0}{1}{2}", DataTelefonoTrabajo.CountryCode, DataTelefonoTrabajo.AreaCode, DataTelefonoTrabajo.PhoneNumber)
                               : default(string);
            //Celular
            var TelefonoCelular = DataTelefonoCelular != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCelular.CountryCode, DataTelefonoCelular.AreaCode, DataTelefonoCelular.PhoneNumber)
                               : default(string);

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var tipoCedula = default(byte);
            var Registro = dataId.FirstOrDefault();
            var ContactIdType = Registro.ContactIdType;
            var CedulaRncOther = Registro.Id;
            var ExpirationDate = Registro.ExpireDate;

            /*
             Contact_Id_Type	Contact_Id_Type_Desc
                    0	            Other
                    1	            Id
                    2	            Passport
                    3	            Driver License
                    4	            Beneficiary Document
                    5	            Company Registration
                    6	            Birth Certificate
                    7	            School Registration
                    8	            Auto Generated ID
             */

            switch (ContactIdType)
            {
                case 0:
                    tipoCedula = 2; //Other 
                    break;
                case 1:
                    tipoCedula = 1; //Cedula
                    break;
                case 5:
                    tipoCedula = 0; //RNC
                    break;
                default:
                    tipoCedula = 2;
                    break;
            }

            //-- 0 = Rnc, 1 = Cedula , 2 = Otros

            var CurrencyId = 0;
            /*
            Other = 0
            Id  = 1  => Cedula
            Company Registration = 5 => Rnc
            */

            if (!PolicyData.CurrencyId.HasValue)
                throw new Exception(Resources.QuotationDontHasCurrency);

            switch (PolicyData.CurrencyId.Value)
            {
                case 1:
                    CurrencyId = 2;// Dollar
                    break;
                case 2:
                    CurrencyId = 3;//Euros
                    break;
                case 3:
                    CurrencyId = 1;//Pesos
                    break;
            }

            var TasaCalc = (TaxPercent / 100);

            if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                TasaCalc = 0;

            var AnnualPremium = PolicyData.AnnualPremium.HasValue ? PolicyData.AnnualPremium.Value : 0;
            var PrimaTotal = AnnualPremium + (AnnualPremium * TasaCalc);

            oSysFlexService.UtilityGender Sexo;

            switch (ContactData.Gender)
            {
                case "M": Sexo = oSysFlexService.UtilityGender.Masculino; break;
                case "F": Sexo = oSysFlexService.UtilityGender.Femenino; break;
                default: Sexo = oSysFlexService.UtilityGender.Empresa; break;
            }

            var NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal;

            switch (ContactData.InvoiceTypeId)
            {
                case 1: //Factura Valor Credito Fiscal
                    NCFType = oSysFlexService.UtilityNCFType.FacturaValorCreditoFiscal;
                    break;
                case 5: //Factura para Regimenes Especiales
                    NCFType = oSysFlexService.UtilityNCFType.FacturaparaRegimenesEspeciales;
                    break;
                case 6: //Comprobantes Gubernamentales
                    NCFType = oSysFlexService.UtilityNCFType.ComprobantesGubernamentales;
                    break;
                case 7: //Factura Consumidor Final  
                    NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal;
                    break;
            }

            //Obtener la oficina en sysflex
            var DataResultSearchOffice = oSFPolicyServiceClient.GetMatchOffice(Oficina);

            hasError = ErrorCode.Contains(DataResultSearchOffice.Code);

            if (hasError)
                throw new Exception(DataResultSearchOffice.Message);

            if (DataResultSearchOffice == null || string.IsNullOrEmpty(DataResultSearchOffice.JSONResult) || DataResultSearchOffice.JSONResult == "[]")
                throw new Exception("Error la Oficina no existe en sysflex");

            var DataOffice = Utility.deserializeJSON<List<Utility.OfficeMatchWS>>(DataResultSearchOffice.JSONResult);
            Oficina = DataOffice.FirstOrDefault().OfficeIdSysFlex.GetValueOrDefault();

            return
                result;
        }


        private IEnumerable<Property.Insured.Detail.Feature.GetPropertyInsuredDetailFeatureResult> GetFeatures(long? UniquePropertyId)
        {
            var parameter = new Property.Insured.Detail.Feature.GetPropertyInsuredDetailFeatureResult.Key
            {
                corpId = this.Corp_Id,
                uniquePropertyId = UniquePropertyId,
                seqId = null
            };

            var FeatturesData = oPropertyManager.GetPropertyInsuredDetailFeature(parameter);

            return
                   FeatturesData;
        }

        /// <summary>
        /// Enviar la cotizacion a Sysflex y emitir poliza
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="isQuotation"></param>
        /// <param name="QuotationNumber"></param>
        /// <param name="ServerMapPathXML"></param>
        /// <returns></returns>
        public Tuple<String, String, Boolean> SendQuotToSysFlex_IL(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, bool isQuotation, string QuotationNumber, string ServerMapPathXML = null)
        {
            var vCompañia = 30; //Atlantica Seguros 
            var vRamo = 0;
            var Intermediario = 0;
            var Oficina = 0;
            var DescOficina = string.Empty;
            var DescPlan = string.Empty;
            var DescProducto = string.Empty;
            var Email = default(string);
            var PolicyNo = string.Empty;
            var Quotation = string.Empty;
            string UserCodeName = "VO-" + this.UserName;
            decimal MontoAsegurado = 0;
            var TaxPercent = 0m;
            var FrequenciaPago = string.Empty;
            DateTime? BeginDate = null;
            DateTime? EndDate = null;
            var HasErrorOnEmitionInvoice = false;
            oSysFlexService.SetMotionBillingResult ResultFacturacion = null;
            var ListError = new List<string>(0);
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            var HasFactultative = false;
            var ErrorCreateLoanKCO = false;

            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);
            }
            catch (Exception) { vOnBaseAvailable = false; }

            /*
            
            Para grabar la cotización
            1.- [Clientes].[SPCGuardar] : aquí se graba los datos del cliente
            2.- [Cotizacion].[SPCCotizacionHeaderGuardar] : aquí se graba el header de la cotizacion
            3.- [Cotizacion].[SPCCotizacionCondicionesGuardar] : aquí se graban las condiciones particulares de las cotizacion debe ser llamado por cada cobertura a grabar
            4.- [Cotizacion].[SPCCotizacionCoberturasGuardar] : aquí se graban las coberturas debe ser llamado por cada cobertura a grabar
            5.- [Cotizacion].[SPCCotizacionDetailGuardar] : aquí se el items del vehiculo y al mismo tiempo se graban las condiciones particulares del producto en blanco para luego ser llenadas, las coberturas basicas del producto
            6.- [Reaseguro].[SPCCotizacionReaseguro] Aquí se graba el reaseguro de las polizas
            7.- [Reaseguro].[SPCCotizacionCoberturasReaseguro] : Aquí se grabar las coberturas con sus reaseguro

            Para Emitir se debe de llamar en el mismo orden los storage siguientes
            1.- [Cotizacion].[SPCCotizacionAcuerdosGuardar] : Este grabar cada una de los avisos debe ser llamada cada vez que se grabe un aviso
            2.- [Cotizacion].[SPCPasaTransito] : Este envia a transito la cotizacion grabada
            3.- [Poliza].[SPCFacturacionMovimiento] : Este emite la polizas con los acuerdos   
            */

            #region Obtener informacion de la poliza y del cliente
            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
             , officeId, caseSeqNo, histSeqNo);

            var illustrationData = oPolicyManager.GetQuotationInfoTemp(new Policy.Quo.Temp
            {
                PolicyNo = PolicyData.PolicyNo
            })
           .FirstOrDefault();

            //Validar la dependencia de polizas
            var PolicyMain = PolicyData.PolicyNoMain;

            if (!string.IsNullOrEmpty(PolicyMain))
            {
                bool doValidation = true;
                //Verificar en Global
                var ResultCheckGlobal = CheckPolicyDependencyInGlobal(PolicyMain);
                //Verificar en SysFlex
                var ResultCheckSysFlex = CheckPolicyDepencyInSysFlex(PolicyMain);

                doValidation = !ResultCheckGlobal.GetValueOrDefault();

                if (doValidation)
                    doValidation = !ResultCheckSysFlex.GetValueOrDefault();

                if (doValidation)
                {
                    var msg = string.Format("La cotización {0} depende de la cotización {1} la cual debe ser una póliza efectiva", PolicyData.PolicyNo, PolicyMain);
                    throw new Exception(string.Format("{0}, {1} ", GenericMessage, msg));
                }
            }

            BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
            EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

            Intermediario = PolicyData.AgentCode.ToInt();
            Quotation = PolicyData.PolicyNo;
            TaxPercent = PolicyData.TaxPercentage.GetValueOrDefault();
            Oficina = PolicyData.OfficeId;

            if (this.Country == Utility.Country.ElSalvador)
            {
                /*
                  Global            SysFlex  
                  1.- Other       = N/A
                  2.- Quartely    = Trimestral
                  3.- Monthly     =  Mensual
                  4.- Annual      =  Anual
                  5.- Semiannual  = Semestral               
                */

                if (string.IsNullOrEmpty(PolicyData.PaymentFreqTypeDesc))
                    throw new Exception(string.Format("{0}, {1}", GenericMessage, "Esta cotizacion no tiene frequencia de pago definida!"));

                switch (PolicyData.PaymentFreqTypeDesc)
                {
                    case "Annual": FrequenciaPago = "Anual"; break;
                    case "Quartely": FrequenciaPago = "Trimestral"; break;
                    case "SemiAnnual": FrequenciaPago = "Semestral"; break;
                    case "Monthly": FrequenciaPago = "Mensual"; break;
                    case "Other": FrequenciaPago = "Otros"; break;
                }
            }

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

            //Validar el contacto
            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager
                           .GetCommunicatonEmail(corpId, ContactData.ContactId, Language.ToInt());

            //Validar Email
            if (DataEmail.Any())
            {
                var EmailResult = DataEmail
                                 .FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                if (EmailResult != null)
                    Email = EmailResult.EmailAdress;
            }

            //Direccion del Contacto
            var oAddress = oContactManager
                          .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? oAddress.StreetAddress : "-";

            //Telefonos del contacto
            var oPhones = oContactManager
                          .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

            //Data Telefonos

            //Casa
            var DataTelefonoCasa = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 6);
            //Trabajo
            var DataTelefonoTrabajo = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 7);
            //Celular
            var DataTelefonoCelular = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 8);

            //Casa            
            var TelefonoCasa = DataTelefonoCasa != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCasa.CountryCode, DataTelefonoCasa.AreaCode, DataTelefonoCasa.PhoneNumber)
                               : default(string);
            //Trabajo
            var TelefonoTrabajo = DataTelefonoTrabajo != null ?
                               string.Format("{0}{1}{2}", DataTelefonoTrabajo.CountryCode, DataTelefonoTrabajo.AreaCode, DataTelefonoTrabajo.PhoneNumber)
                               : default(string);
            //Celular
            var TelefonoCelular = DataTelefonoCelular != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCelular.CountryCode, DataTelefonoCelular.AreaCode, DataTelefonoCelular.PhoneNumber)
                               : default(string);

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var tipoCedula = default(byte);
            var Registro = dataId.FirstOrDefault();

            if (Registro == null)
            {
                var msg = "El contacto no tiene Identificación";
                throw new Exception(string.Format("{0}, {1} ", GenericMessage, msg));
            }

            var ContactIdType = Registro.ContactIdType;
            var CedulaRncOther = Registro.Id;
            var ExpirationDate = Registro.ExpireDate;

            /*               
             IdTipoIdentificacion       Descripcion
                    0                    RNC
                    1                    Cédula
                    2                    Otros
                    3                    DUI
                    4                    NIT
                    5                    Carnét de Residencia
                    6                    NRF
                    7                    Pasaporte
                    8                    Licencia de Conducir
             
             Contact_Id_Type	Contact_Id_Type_Desc
                    0	            Other
                    1	            Id
                    2	            Passport
                    3	            Driver License
                    4	            Beneficiary Document
                    5	            Company Registration
                    6	            Birth Certificate
                    7	            School Registration
                    8	            Auto Generated ID
             */

            switch (ContactIdType)
            {
                case 0:
                    tipoCedula = 2; //Other 
                    break;
                case 1:
                    tipoCedula = 1; //Cedula
                    break;
                case 2:
                    tipoCedula = 7; //Pasaporte
                    break;
                case 3:
                    tipoCedula = 8; //Pasaporte
                    break;
                case 5:
                    tipoCedula = 0; //RNC
                    break;
                default:
                    tipoCedula = 2;
                    break;
            }

            //-- 0 = Rnc, 1 = Cedula , 2 = Otros

            var CurrencyId = 0;
            /*
            Other = 0
            Id  = 1  => Cedula
            Company Registration = 5 => Rnc
            */

            try
            {
                if (!PolicyData.CurrencyId.HasValue)
                    throw new Exception(string.Format("{0}, {1} ", GenericMessage, Resources.QuotationDontHasCurrency));

                switch (PolicyData.CurrencyId.Value)
                {
                    case 1:
                        CurrencyId = 2;// Dollar
                        break;
                    case 2:
                        CurrencyId = 3;//Euros
                        break;
                    case 3:
                        CurrencyId = 1;//Pesos
                        break;
                }

                var TasaCalc = (TaxPercent / 100);

                if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                    TasaCalc = 0;

                var AnnualPremium = PolicyData.AnnualPremium.HasValue ? PolicyData.AnnualPremium.Value : 0;
                var PrimaTotal = AnnualPremium + (AnnualPremium * TasaCalc);

                oSysFlexService.UtilityGender Sexo;

                switch (ContactData.Gender)
                {
                    case "M": Sexo = oSysFlexService.UtilityGender.Masculino; break;
                    case "F": Sexo = oSysFlexService.UtilityGender.Femenino; break;
                    default: Sexo = oSysFlexService.UtilityGender.Empresa; break;
                }

                oSysFlexService.UtilityNCFType NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal;

                switch (ContactData.InvoiceTypeId)
                {
                    case 1: //Factura Valor Credito Fiscal
                        NCFType = oSysFlexService.UtilityNCFType.FacturaValorCreditoFiscal;
                        break;
                    case 5: //Factura para Regimenes Especiales
                        NCFType = oSysFlexService.UtilityNCFType.FacturaparaRegimenesEspeciales;
                        break;
                    case 6: //Comprobantes Gubernamentales
                        NCFType = oSysFlexService.UtilityNCFType.ComprobantesGubernamentales;
                        break;
                    case 7: //Factura Consumidor Final  
                        NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal;
                        break;
                }

                //Obtener la oficina en sysflex
                var DataResultSearchOffice = oSFPolicyServiceClient.GetMatchOffice(Oficina);

                hasError = ErrorCode.Contains(DataResultSearchOffice.Code);

                if (hasError)
                    throw new Exception(DataResultSearchOffice.Message);

                if (DataResultSearchOffice == null || string.IsNullOrEmpty(DataResultSearchOffice.JSONResult) || DataResultSearchOffice.JSONResult == "[]")
                    throw new Exception(string.Format("{0}, {1} ", GenericMessage, "Error la Oficina no existe en sysflex"));

                var DataOffice = Utility.deserializeJSON<List<Utility.OfficeMatchWS>>(DataResultSearchOffice.JSONResult);
                var DataOfficeRecord = DataOffice.FirstOrDefault();
                Oficina = DataOfficeRecord.OfficeIdSysFlex.GetValueOrDefault();
                DescOficina = DataOfficeRecord.OfficeDesc;

                #region Variables a usar

                AirplaneItem oAirplane = null;
                NavyItem oNavy = null;
                TransportItem oTransport = null;
                BailItem oBail = null;
                PropertyItem oProperty = null;
                var CoverageError = string.Format("{0}, existen algunos items que no tienen coberturas, por favor revise!", GenericMessage);
                var FacultativeError = string.Format("{0}, existen algunos items que necesitan de la colocación del facultativo, por favor revise!", GenericMessage);
                var StrBMessageError = new StringBuilder();
                var ItemsFacultavive = new List<Tuple<long, decimal, bool>>(0);

                #endregion

                var InsuredAmountMatch = new List<Tuple<decimal, decimal, string>>(0);

                switch (this.AlliedLinesProductBehavior)
                {
                    #region Airplane
                    case Utility.AlliedLinesType.Airplane:

                        var ListItemsWithoutCoverageAirplane = new List<Airplane.Insured>(0);

                        oAirplane = new AirplaneItem();

                        var AirPlaneDetail = oAirPlaneManager.GetAirplaneInsured(new Airplane.Insured.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticRegId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo
                        });

                        MontoAsegurado = AirPlaneDetail.Sum(c => c.InsuredAmount.GetValueOrDefault());

                        foreach (var item in AirPlaneDetail)
                        {
                            DescProducto = item.ProductDesc;
                            ItemsFacultavive.Add(new Tuple<long, decimal, bool>(item.UniqueAirplaneId, item.ReinsuranceAmount.GetValueOrDefault(), (item.ReinsuranceId == 2)));

                            var coverageAirplane = oAirPlaneManager.GetAirPlaneInsuredCoverage(new Airplane.Insured.Coverage.Key
                            {
                                CorpId = corpId,
                                UniqueAirplaneId = (int)item.UniqueAirplaneId
                            }).Select(cp => new Utility.CoverageIL
                            {
                                CurrencyId = cp.CurrencyId,
                                UnitaryPrice = cp.UnitaryPrice,
                                PackagePrice = cp.PackagePrice,
                                DeductibleAmount = cp.DeductibleAmount,
                                DeductiblePercentage = cp.DeductiblePercentage,
                                ManualDeductibleAmount = cp.ManualDeductibleAmount,
                                ManualDeductiblePercentage = cp.ManualDeductiblePercentage,
                                CoverageLimit = cp.CoverageLimit,
                                CoverageStatus = cp.CoverageStatus,
                                CorpId = cp.CorpId,
                                UniqueId = cp.UniqueAirplaneId,
                                RegionId = cp.RegionId,
                                CountryId = cp.CountryId,
                                BlTypeId = cp.BlTypeId,
                                BlId = cp.BlId,
                                ProductId = cp.ProductId,
                                VehicleTypeId = cp.VehicleTypeId,
                                GroupId = cp.GroupId,
                                CoverageTypeId = cp.CoverageTypeId,
                                CoverageId = cp.CoverageId,
                                CoverageTypeDesc = cp.CoverageTypeDesc,
                                GroupDesc = cp.GroupDesc,
                                CoverageDesc = cp.CoverageDesc,
                                Ramo = cp.Ramo.GetValueOrDefault(),
                                SubRamo = cp.SubRamo.GetValueOrDefault(),
                                CoveragePercentage = cp.CoveragePercentage,
                                PremiumPercentage = cp.PremiumPercentage,
                                CoinsurancePercentage = cp.CoinsurancePercentage
                            });

                            if (coverageAirplane != null && coverageAirplane.Count() != 0)
                                oAirplane.Coverages.AddRange(coverageAirplane);
                            else
                                ListItemsWithoutCoverageAirplane.Add(item);
                        }

                        if (ListItemsWithoutCoverageAirplane.Count() > 0)
                            throw
                                new
                                 Exception(CoverageError);

                        oAirplane.AirplaneInsured = AirPlaneDetail;
                        var cAirplane = oAirplane.Coverages.FirstOrDefault();
                        vRamo = cAirplane.Ramo;
                        break;
                    #endregion
                    #region Bail
                    case Utility.AlliedLinesType.Bail:

                        var ListItemsWithoutCoverageBail = new List<Entity.UnderWriting.Entities.Bail.Insured>(0);

                        oBail = new BailItem();

                        var BailDetail = oBailManager.GetBailInsured(new Entity.UnderWriting.Entities.Bail.Insured.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticRegId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo
                        });

                        MontoAsegurado = BailDetail.Sum(c => c.InsuredAmount.GetValueOrDefault());

                        foreach (var item in BailDetail)
                        {
                            DescProducto = item.ProductDesc;
                            ItemsFacultavive.Add(new Tuple<long, decimal, bool>(item.UniqueBailId, item.ReinsuranceAmount.GetValueOrDefault(), (item.ReinsuranceId == 2)));

                            var coverageBail = oBailManager.GetBailInsuredCoverage(new Entity.UnderWriting.Entities.Bail.Insured.Coverage.Key
                            {
                                CorpId = corpId,
                                UniqueBailId = item.UniqueBailId
                            }).Select(cp => new Utility.CoverageIL
                            {
                                CurrencyId = cp.CurrencyId.GetValueOrDefault(),
                                UnitaryPrice = cp.UnitaryPrice.GetValueOrDefault(),
                                PackagePrice = cp.PackagePrice.GetValueOrDefault(),
                                DeductibleAmount = cp.DeductibleAmount,
                                DeductiblePercentage = cp.DeductiblePercentage,
                                ManualDeductibleAmount = cp.ManualDeductibleAmount,
                                ManualDeductiblePercentage = cp.ManualDeductiblePercentage,
                                CoverageLimit = cp.CoverageLimit,
                                CoverageStatus = cp.CoverageStatus.GetValueOrDefault(),
                                CorpId = cp.CorpId.GetValueOrDefault(),
                                UniqueId = cp.UniqueBailId.GetValueOrDefault(),
                                RegionId = cp.RegionId.GetValueOrDefault(),
                                CountryId = cp.CountryId.GetValueOrDefault(),
                                BlTypeId = cp.BlTypeId.GetValueOrDefault(),
                                BlId = cp.BlId.GetValueOrDefault(),
                                ProductId = cp.ProductId.GetValueOrDefault(),
                                VehicleTypeId = cp.VehicleTypeId.GetValueOrDefault(),
                                GroupId = cp.GroupId.GetValueOrDefault(),
                                CoverageTypeId = cp.CoverageTypeId.GetValueOrDefault(),
                                CoverageId = cp.CoverageId.GetValueOrDefault(),
                                CoverageTypeDesc = cp.CoverageTypeDesc,
                                GroupDesc = cp.GroupDesc,
                                CoverageDesc = cp.CoverageDesc,
                                Ramo = cp.Ramo.GetValueOrDefault(),
                                SubRamo = cp.SubRamo.GetValueOrDefault(),
                                CoveragePercentage = cp.CoveragePercentage,
                                PremiumPercentage = cp.PremiumPercentage,
                                CoinsurancePercentage = cp.CoinsurancePercentage
                            });

                            if (coverageBail != null && coverageBail.Count() != 0)
                                oBail.Coverages.AddRange(coverageBail);
                            else
                                ListItemsWithoutCoverageBail.Add(item);
                        }

                        if (ListItemsWithoutCoverageBail.Count() > 0)
                            throw
                                new
                                 Exception(CoverageError);

                        oBail.BailInsured = BailDetail;
                        var cBail = oBail.Coverages.FirstOrDefault();
                        vRamo = cBail.Ramo;
                        break;
                    #endregion
                    #region Navy
                    case Utility.AlliedLinesType.Navy:
                        var ListItemsWithoutCoverageNavy = new List<Navy.Insured>(0);
                        oNavy = new NavyItem();

                        var NavyDetail = oNavyManager.GetNavyInsured(new Navy.Insured.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticRegId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo
                        });

                        MontoAsegurado = NavyDetail.Sum(c => c.InsuredAmount.GetValueOrDefault());

                        foreach (var item in NavyDetail)
                        {
                            DescProducto = item.ProductDesc;
                            ItemsFacultavive.Add(new Tuple<long, decimal, bool>(item.UniqueNavyId, item.ReinsuranceAmount.GetValueOrDefault(), (item.ReinsuranceId == 2)));

                            var coverageNavy = oNavyManager.GetNavyInsuredCoverage(new Navy.Insured.Coverage.Key
                            {
                                CorpId = corpId,
                                UniqueNavyId = (int)item.UniqueNavyId
                            }).Select(cp => new Utility.CoverageIL
                            {
                                CurrencyId = cp.CurrencyId.GetValueOrDefault(),
                                UnitaryPrice = cp.UnitaryPrice.GetValueOrDefault(),
                                PackagePrice = cp.PackagePrice.GetValueOrDefault(),
                                DeductibleAmount = cp.DeductibleAmount,
                                DeductiblePercentage = cp.DeductiblePercentage,
                                ManualDeductibleAmount = cp.ManualDeductibleAmount,
                                ManualDeductiblePercentage = cp.ManualDeductiblePercentage,
                                CoverageLimit = cp.CoverageLimit,
                                CoverageStatus = cp.CoverageStatus.GetValueOrDefault(),
                                CorpId = cp.CorpId.GetValueOrDefault(),
                                UniqueId = cp.UniqueNavyId.GetValueOrDefault(),
                                RegionId = cp.RegionId.GetValueOrDefault(),
                                CountryId = cp.CountryId.GetValueOrDefault(),
                                BlTypeId = cp.BlTypeId.GetValueOrDefault(),
                                BlId = cp.BlId.GetValueOrDefault(),
                                ProductId = cp.ProductId.GetValueOrDefault(),
                                VehicleTypeId = cp.VehicleTypeId.GetValueOrDefault(),
                                GroupId = cp.GroupId.GetValueOrDefault(),
                                CoverageTypeId = cp.CoverageTypeId.GetValueOrDefault(),
                                CoverageId = cp.CoverageId.GetValueOrDefault(),
                                CoverageTypeDesc = cp.CoverageTypeDesc,
                                GroupDesc = cp.GroupDesc,
                                CoverageDesc = cp.CoverageDesc,
                                Ramo = cp.Ramo.GetValueOrDefault(),
                                SubRamo = cp.SubRamo.GetValueOrDefault(),
                                CoveragePercentage = cp.CoveragePercentage,
                                PremiumPercentage = cp.PremiumPercentage,
                                CoinsurancePercentage = cp.CoinsurancePercentage
                            });

                            if (coverageNavy != null && coverageNavy.Count() != 0)
                                oNavy.Coverages.AddRange(coverageNavy);
                            else
                                ListItemsWithoutCoverageNavy.Add(item);
                        }

                        if (ListItemsWithoutCoverageNavy.Count() > 0)
                            throw
                                new
                                 Exception(CoverageError);

                        oNavy.NavyInsured = NavyDetail;
                        var cNavy = oNavy.Coverages.FirstOrDefault();
                        vRamo = cNavy.Ramo;
                        break;
                    #endregion
                    #region Property
                    case Utility.AlliedLinesType.Property:

                        var ListItemsWithoutCoverageProperty = new List<Property>(0);

                        oProperty = new PropertyItem();

                        var PropertyDetail = oPropertyManager.GetProperty(new Property.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo
                        });

                        MontoAsegurado = PropertyDetail.Sum(c => c.InsuredAmount);

                        foreach (var item in PropertyDetail)
                        {
                            DescProducto = item.ProductDesc;
                            //Validar si esta cotizacion tiene adicionales que la sumatoria de las sumas aseguradas de los mismos sea igual a la suma asegurada de la poliza en general
                            var ResultInsuredAmountMatch = GetFeatures(item.UniquePropertyId);

                            if (ResultInsuredAmountMatch.Any())
                            {
                                var TotalSumatoriaValorAseguradoAdicionales = ResultInsuredAmountMatch.Sum(p => p.Value.GetValueOrDefault());

                                if (TotalSumatoriaValorAseguradoAdicionales > 0)
                                    InsuredAmountMatch.Add(new Tuple<decimal, decimal, string>(item.InsuredAmount, TotalSumatoriaValorAseguradoAdicionales, item.ProductDesc));
                            }

                            ItemsFacultavive.Add(new Tuple<long, decimal, bool>(item.UniquePropertyId, item.ReinsuranceAmount, (item.ReinsuranceId == 2)));

                            var coverageProperty = oPropertyManager.GetPropertyInsuredDetailCoverage(new Property.Insured.Detail.Coverage.GetDetailCoverageResult.Key
                            {
                                corpId = corpId,
                                uniquePropertyId = item.UniquePropertyId
                            }).Select(cp => new Utility.CoverageIL
                            {
                                CurrencyId = cp.CurrencyId,
                                UnitaryPrice = cp.UnitaryPrice,
                                PackagePrice = cp.PackagePrice,
                                DeductibleAmount = cp.DeductibleAmount,
                                DeductiblePercentage = cp.DeductiblePercentage,
                                ManualDeductibleAmount = cp.ManualDeductibleAmount,
                                ManualDeductiblePercentage = cp.ManualDeductiblePercentage,
                                CoverageLimit = cp.CoverageLimit,
                                CoverageStatus = cp.CoverageStatus,
                                CorpId = cp.CorpId,
                                UniqueId = cp.UniquePropertyId,
                                RegionId = cp.RegionId,
                                CountryId = cp.CountryId,
                                BlTypeId = cp.BlTypeId,
                                BlId = cp.BlId,
                                ProductId = cp.ProductId,
                                VehicleTypeId = cp.VehicleTypeId,
                                GroupId = cp.GroupId,
                                CoverageTypeId = cp.CoverageTypeId,
                                CoverageId = cp.CoverageId,
                                CoverageTypeDesc = cp.CoverageTypeDesc,
                                GroupDesc = cp.GroupDesc,
                                CoverageDesc = cp.CoverageDesc,
                                Ramo = cp.Ramo.GetValueOrDefault(),
                                SubRamo = cp.SubRamo.GetValueOrDefault(),
                                CoveragePercentage = cp.CoveragePercentage,
                                PremiumPercentage = cp.PremiumPercentage,
                                CoinsurancePercentage = cp.CoinsurancePercentage
                            });

                            if (coverageProperty != null && coverageProperty.Count() != 0)
                                oProperty.Coverages.AddRange(coverageProperty);
                            else
                                ListItemsWithoutCoverageProperty.Add(item);

                        }

                        if (ListItemsWithoutCoverageProperty.Count() > 0)
                            throw
                                new
                                 Exception(CoverageError);

                        oProperty.PropertyInsured = PropertyDetail.Select(x => { x.AppliesToReinsurance = x.ReinsuranceId == 2; return x; });

                        var cProperty = oProperty.Coverages.FirstOrDefault();
                        vRamo = cProperty.Ramo;
                        break;
                    #endregion
                    #region Transport
                    case Utility.AlliedLinesType.Transport:

                        var ListItemsWithoutCoverageTransport = new List<Transport.Insured>(0);

                        oTransport = new TransportItem();

                        var TransportDetail = oTransportManager.GetTransportInsured(new Transport.Insured.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo
                        });

                        MontoAsegurado = TransportDetail.Sum(c => c.InsuredAmount.GetValueOrDefault());

                        foreach (var item in TransportDetail)
                        {
                            DescProducto = item.ProductDesc;
                            ItemsFacultavive.Add(new Tuple<long, decimal, bool>(item.UniqueTransportId, item.ReinsuranceAmount.GetValueOrDefault(), (item.ReinsuranceId == 2)));

                            var coverageTransport = oTransportManager.GetTransportInsuredCoverage(new Transport.Insured.Coverage.Key
                            {
                                CorpId = corpId,
                                UniqueTransportId = (int)item.UniqueTransportId
                            }).Select(cp => new Utility.CoverageIL
                            {
                                CurrencyId = cp.CurrencyId.GetValueOrDefault(),
                                UnitaryPrice = cp.UnitaryPrice.GetValueOrDefault(),
                                PackagePrice = cp.PackagePrice.GetValueOrDefault(),
                                DeductibleAmount = cp.DeductibleAmount,
                                DeductiblePercentage = cp.DeductiblePercentage,
                                ManualDeductibleAmount = cp.ManualDeductibleAmount,
                                ManualDeductiblePercentage = cp.ManualDeductiblePercentage,
                                CoverageLimit = cp.CoverageLimit,
                                CoverageStatus = cp.CoverageStatus.GetValueOrDefault(),
                                CorpId = cp.CorpId.GetValueOrDefault(),
                                UniqueId = cp.UniqueTransportId.GetValueOrDefault(),
                                RegionId = cp.RegionId.GetValueOrDefault(),
                                CountryId = cp.CountryId.GetValueOrDefault(),
                                BlTypeId = cp.BlTypeId.GetValueOrDefault(),
                                BlId = cp.BlId.GetValueOrDefault(),
                                ProductId = cp.ProductId.GetValueOrDefault(),
                                VehicleTypeId = cp.VehicleTypeId.GetValueOrDefault(),
                                GroupId = cp.GroupId.GetValueOrDefault(),
                                CoverageTypeId = cp.CoverageTypeId.GetValueOrDefault(),
                                CoverageId = cp.CoverageId.GetValueOrDefault(),
                                CoverageTypeDesc = cp.CoverageTypeDesc,
                                GroupDesc = cp.GroupDesc,
                                CoverageDesc = cp.CoverageDesc,
                                Ramo = cp.Ramo.GetValueOrDefault(),
                                SubRamo = cp.SubRamo.GetValueOrDefault(),
                                CoveragePercentage = cp.CoveragePercentage,
                                PremiumPercentage = cp.PremiumPercentage,
                                CoinsurancePercentage = cp.CoinsurancePercentage
                            });

                            if (coverageTransport != null && coverageTransport.Count() != 0)
                                oTransport.Coverages.AddRange(coverageTransport);
                            else
                                ListItemsWithoutCoverageTransport.Add(item);
                        }

                        if (ListItemsWithoutCoverageTransport.Count() > 0)
                            throw
                                new
                                 Exception(CoverageError);

                        oTransport.TransportInsured = TransportDetail;

                        var cTransport = oTransport.Coverages.FirstOrDefault();
                        vRamo = cTransport.Ramo;
                        break;
                        #endregion
                }

                //Validar sumas aseguradas
                if (InsuredAmountMatch.Any())
                {
                    var ErrorListMessage = new StringBuilder();
                    var LineMessage = "Plan : \"{0}\", Suma Asegurada Total : {1}, Suma asegurada Total Adicionales : {2}";

                    foreach (var item in InsuredAmountMatch)
                        if (item.Item1 != item.Item2)
                            ErrorListMessage.AppendLine(string.Format(LineMessage, item.Item3, item.Item1.ToString("#,0.00", CultureInfo.InvariantCulture), item.Item2.ToString("#,0.00", CultureInfo.InvariantCulture)));

                    if (ErrorListMessage.Length > 0)
                        throw new Exception(string.Format("{0}, {1} <br> <br> {2} ", GenericMessage, "La suma asegurada total y la suma asegurada de los adicionales no son iguales..!", ErrorListMessage.ToString()));
                }

                if (ItemsFacultavive.Where(x => x.Item3).Any() && ItemsFacultavive.Where(y => y.Item2 > 0).Any())
                {
                    foreach (var item in ItemsFacultavive)
                    {
                        var dtFacultativeContractCoverage = oPolicyManager.GetFacultativeContractCoverage(new Policy.Facultative.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                            UniqueId = item.Item1
                        });

                        if (dtFacultativeContractCoverage == null || dtFacultativeContractCoverage.Rows.Count == 0)
                            ListError.Add(Resources.FacultativeMissging);
                    }
                }

                if (ListError.Any())
                    throw new Exception(FacultativeError);


                if (HasFactultative)
                {
                    var resultValidationContractName = ExisteNombreContratoEnSysFlex();

                    if (resultValidationContractName.Item1)
                        throw new Exception(resultValidationContractName.Item2);
                }

                #endregion

                #region Guardar Cotizacion
                #region Paso #1 Crear el cliente
                var ContactFullName = string.Concat(ContactData.FirstName, " ", ContactData.MiddleName, " ", ContactData.FirstLastName, " ", ContactData.SecondLastName);
                var Names = string.Concat(ContactData.FirstName, " ", ContactData.MiddleName);
                var LastNames = string.Concat(ContactData.FirstLastName, " ", ContactData.SecondLastName);

                var ItemSetClient = new oSysFlexService.PolicyQuotationILClientparameter
                {
                    compania = vCompañia,
                    codigo = null,
                    tipoCliente = 1,
                    tipoRnc = tipoCedula,
                    rnc = CedulaRncOther,
                    nombreCliente = ContactFullName.Replace("'", "`"),
                    direccion = Direccion.Replace("'", "`"),
                    ubicacion = ContactData.UbicacionId,
                    limiteCredito = 0,//NA
                    descuento = null,//NA
                    vendedor = Intermediario,
                    cobrador = 1,
                    facturacion = null,//Revisar
                    condicionPago = 30,
                    usuarioAdiciona = this.UserFullName,
                    estatus = 1, //1=Activo 0=Inactivo                    
                    fecha_Ingreso = DateTime.Now.ToString("yyyyMMdd"),
                    fechaAdiciona = DateTime.Now.ToString("yyyyMMdd"),
                    usuarioModifica = this.UserFullName,
                    telefonoResidencia = TelefonoCasa,
                    telefonoOficina = TelefonoTrabajo,
                    fax = null,
                    beeper = null,
                    email = Email,
                    celular = TelefonoCelular,
                    codigoRnc = null,//Revisar                   
                    consorcio = null,//Revisar                    
                    ncf = ContactData.InvoiceTypeId,//NCFType.ToInt(),
                    nombre = Names.Replace("'", "`"),
                    apellidos = LastNames.Replace("'", "`"),
                    fechaNacimiento = ContactData.Dob.HasValue ? ContactData.Dob.Value.Date.ToString("yyyyMMdd")
                                                               : string.Empty,
                    fechaLicencia = ExpirationDate.HasValue ? ExpirationDate.Value.Date.ToString("yyyyMMdd")
                                                            : string.Empty,
                    itbis = 0, // 0 no aplica para impuesto 1 aplica para impuesto
                    contacto = null,
                    sexo = (byte)Sexo,
                    comentario = null,
                    nacionalidad = ContactData.CountryOfBirthDesc,
                    oficina = Oficina,
                    tipoRnc1 = !ContactData.IsCompany ? 0 : (byte?)null,//Dui 3 en caso del salvador de lo contrario null
                    rnc1 = CedulaRncOther,
                    tipoRnc2 = ContactData.IsCompany ? tipoCedula : (byte?)null,// 6 en el caso del salvador de lo contrario null
                    rnc2 = CedulaRncOther,
                    claseCliente = ContactData.IsCompany ? "Persona Jurídica" : "Persona Natural",//Persona Jurídica o Persona Natural
                    lugarTrabajo = ContactData.CompanyName,
                    cargoTrabajo = ContactData.LaborTasks,//Verificar si tenemos este dato
                    ingresoSalarial = ContactData.AnnualPersonalIncome,
                    estadoCivil = ContactData.MaritalStatusDesc,
                    ocupacion = ContactData.Occupation_Desc,
                    usuarioID = UserID,
                    usuario = UserCodeName,
                    accion = Utility.SysFlexACTION.INSERT.ToString()
                };

                var SetClientResult = oSFPolicyServiceClient.SetClient_IL(ItemSetClient);

                hasError = ErrorCode.Contains(SetClientResult.Code);

                if (hasError)
                    throw new Exception(string.Format("{0}, {1} ", GenericMessage, SetClientResult.Message));
                else
                {
                    //Paso correctamente ahora actualizar en global el SourceId del cliente
                    ContactData.SourceId = SetClientResult.client.SourceId;
                    oContactManager.UpdateContact(ContactData);
                }

                #endregion

                #region Paso #2 Crear la cabecera de la cotizacion

                var Codigo = SetClientResult.client.Codigo;

                var itemHeader = new oSysFlexService.PolicyQuotationILQuotationHeaderparameter
                {
                    compania = vCompañia,
                    cotizacion = null,
                    cliente = Codigo, //Id del Cliente                    
                    intermediario = Intermediario,
                    poliza = string.Empty,
                    montoNeto = PrimaTotal,
                    usuario = "VO-" + this.UserFullName,
                    estatus = "ACTIVO",
                    ramo = vRamo,
                    hora = string.Format("{0:T}", DateTime.Now),
                    sumaAsegurada = MontoAsegurado,
                    deudor = Codigo, //Id del Cliente                                      
                    nombreCliente = ContactFullName,
                    codMoneda = CurrencyId,
                    prima = 1, //Pesos                         
                    observacion = null, // N/A
                    porcComision = null,// N/A                                      
                    oficina = Oficina,
                    comunicaciones = null,// N/A                    
                    fechaEmision = DateTime.Now,
                };

                var SetQuotationHeaderResult = oSFPolicyServiceClient.SetQuotationHeader_IL(itemHeader);

                hasError = ErrorCode.Contains(SetQuotationHeaderResult.Code);

                if (hasError)
                    throw new Exception(string.Format("{0}, {1} ", GenericMessage, SetQuotationHeaderResult.Message));
                else
                {
                    //Paso correctamente
                }

                #endregion

                var Cotizacion = SetQuotationHeaderResult.QuoatationHeader.Cotizacion;
                var ParticularConditionMessageError = string.Format("{0}, {1} ", GenericMessage, "Se ha generado un error intentanto guardar las condiciones particulares");
                var DontHasParticularCondition = string.Format("{0}, {1} ", GenericMessage, "El item evaluado no tiene condiciones particulares");

                #region Paso #3 Guardar las condiciones particulares
                var SecuenceItem = 1;
                switch (AlliedLinesProductBehavior)
                {
                    case Utility.AlliedLinesType.Airplane:
                        foreach (var item in oAirplane.AirplaneInsured)
                        {
                            var PConditionAirplaneList = oPolicyManager.GetConditionIL(Quotation, item.UniqueAirplaneId);

                            if (PConditionAirplaneList.Count() == 0)
                                throw new Exception(DontHasParticularCondition);

                            var result = SaveCondition_IL(PConditionAirplaneList, vCompañia, Cotizacion, item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault(), SecuenceItem);
                            hasError = result.Any(g => ErrorCode.Contains(g.Code));

                            if (!hasError)
                                SecuenceItem++;
                            else
                                throw new Exception(ParticularConditionMessageError);
                        }
                        break;
                    case Utility.AlliedLinesType.Bail:
                        foreach (var item in oBail.BailInsured)
                        {
                            var PConditionBailList = oPolicyManager.GetConditionIL(Quotation, item.UniqueBailId);

                            if (PConditionBailList.Count() == 0)
                                throw new Exception(DontHasParticularCondition);

                            var result = SaveCondition_IL(PConditionBailList, vCompañia, Cotizacion, item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault(), SecuenceItem);
                            hasError = result.Any(g => ErrorCode.Contains(g.Code));

                            if (!hasError)
                                SecuenceItem++;
                            else
                                throw new Exception(ParticularConditionMessageError);
                        }
                        break;
                    case Utility.AlliedLinesType.Navy:
                        foreach (var item in oNavy.NavyInsured)
                        {
                            var PConditionNavyList = oPolicyManager.GetConditionIL(Quotation, item.UniqueNavyId);

                            if (PConditionNavyList.Count() == 0)
                                throw new Exception(DontHasParticularCondition);

                            var result = SaveCondition_IL(PConditionNavyList, vCompañia, Cotizacion, item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault(), SecuenceItem);
                            hasError = result.Any(g => ErrorCode.Contains(g.Code));

                            if (!hasError)
                                SecuenceItem++;
                            else
                                throw new Exception(ParticularConditionMessageError);
                        }
                        break;
                    case Utility.AlliedLinesType.Property:
                        foreach (var item in oProperty.PropertyInsured)
                        {
                            var PConditionPropertyList = oPolicyManager.GetConditionIL(Quotation, item.UniquePropertyId);

                            if (PConditionPropertyList.Count() == 0)
                                throw new Exception(DontHasParticularCondition);

                            var result = SaveCondition_IL(PConditionPropertyList, vCompañia, Cotizacion, item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault(), SecuenceItem);

                            hasError = result.Any(g => ErrorCode.Contains(g.Code));

                            if (!hasError)
                                SecuenceItem++;
                            else
                                throw new Exception(ParticularConditionMessageError);
                        }
                        break;
                    case Utility.AlliedLinesType.Transport:
                        foreach (var item in oTransport.TransportInsured)
                        {
                            var PConditionTransportList = oPolicyManager.GetConditionIL(Quotation, item.UniqueTransportId);

                            if (PConditionTransportList.Count() == 0)
                                throw new Exception(DontHasParticularCondition);

                            var result = SaveCondition_IL(PConditionTransportList, vCompañia, Cotizacion, item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault(), SecuenceItem);
                            hasError = result.Any(g => ErrorCode.Contains(g.Code));

                            if (!hasError)
                                SecuenceItem++;
                            else
                                throw new Exception(ParticularConditionMessageError);
                        }
                        break;
                }
                #endregion

                #region Paso #4 Guardar las coberturas, Paso #5 Guardar el detalle y adicionales, Paso #6  Guardar el reaseguro si aplica, Paso #7 Guardar las coberturas con su reaseguro
                getResult CoverageSysflex;

                SecuenceItem = 1;

                var SysFlexCoverages = new List<Tuple<int, int, string>>(0);
                List<getResult> ResultAdditional = new List<getResult>(0);

                switch (AlliedLinesProductBehavior)
                {
                    #region Cascos aereos
                    case Utility.AlliedLinesType.Airplane:
                        foreach (var item in oAirplane.AirplaneInsured)
                        {
                            //Extraer informacion de coverturas en sysflex
                            CoverageSysflex = oSFPolicyServiceClient.GetCoverageProduct_IL(item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault());

                            var DCoverageAirplane = oAirplane.Coverages.Where(i => i.UniqueId == item.UniqueAirplaneId);
                            //Coberturas
                            var SaveCoveragesResult = SaveCoverages_IL(DCoverageAirplane,
                                                                       vCompañia,
                                                                       Cotizacion,
                                                                       item.Ramo.GetValueOrDefault(),
                                                                       item.SubRamo.GetValueOrDefault(),
                                                                       SecuenceItem,
                                                                       CoverageSysflex
                                                                       );
                            //Detalle                            
                            var SaveDetailResult = SaveDetail_IL(item,
                                                                 DCoverageAirplane,
                                                                 vCompañia,
                                                                 Cotizacion,
                                                                 item.Ramo.GetValueOrDefault(),
                                                                 item.SubRamo.GetValueOrDefault(),
                                                                 UserCodeName,
                                                                 TasaCalc,
                                                                 ContactData.Dob.GetValueOrDefault(),
                                                                 Sexo,
                                                                 SecuenceItem,
                                                                 MontoAsegurado,
                                                                 item.UniqueAirplaneId,
                                                                 FrequenciaPago,
                                                                 BeginDate,
                                                                 EndDate
                                                                );

                            hasError = ErrorCode.Contains(SaveDetailResult.Code);
                            if (!hasError)
                            {
                                //Actualizar el sourceid  en el detalle
                                item.SourceId = SaveDetailResult.QuotationDetail.SourceId;
                                oAirPlaneManager.SetAirplaneInsured(item);

                                //Guardar Pilotos
                                var dataPilotos = oAirPlaneManager.GetAirplaneInsuredPilot(new Airplane.Insured.Pilot.Key
                                {
                                    CorpId = item.CorpId.GetValueOrDefault(),
                                    SeqId = null,
                                    UniqueAirplaneId = (int)item.UniqueAirplaneId
                                });


                                if (dataPilotos.Any())
                                {
                                    foreach (var itemPilot in dataPilotos)
                                    {
                                        var ResPiloto = oSFPolicyServiceClient.SetAdditionalPiloto(new PolicyQuotationILAdditionalPiloto
                                        {
                                            Compania = vCompañia,
                                            Cotizacion = Cotizacion,
                                            Secuencia = SecuenceItem,
                                            IdPiloto = 0,
                                            Accion = Utility.SysFlexACTION.INSERT.ToString(),
                                            Nombre = itemPilot.Name,
                                            HorasVuelo = itemPilot.Flighthours.GetValueOrDefault(),
                                            FechaAdiciona = DateTime.Now,
                                            UsuarioAdiciona = UserCodeName,
                                            UsuarioId = UserID
                                        });

                                        if (ResPiloto != null)
                                            ResultAdditional.Add(ResPiloto);
                                    }

                                    if (ResultAdditional.Any())
                                    {
                                        var CodeList = string.Join(" ", ResultAdditional.Select(e => e.Code).ToArray());
                                        var MessageList = string.Join("<br>", ResultAdditional.Select(e => e.Message).ToArray());

                                        hasError = ErrorCode.Contains(CodeList);

                                        if (hasError)
                                            throw new Exception(string.Format("{0}, {1} ", GenericMessage, MessageList));
                                    }
                                }

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);

                                //Facultativo
                                SetFacultativeProduct(corpId,
                                                      regionId,
                                                      countryId,
                                                      domesticRegId,
                                                      stateProvId,
                                                      cityId,
                                                      officeId,
                                                      caseSeqNo,
                                                      histSeqNo,
                                                      SaveCoveragesResult.Item2,
                                                      item.UniqueAirplaneId,
                                                      item.AppliesToReinsurance,
                                                      item.ReinsuranceAmount,
                                                      ErrorCode,
                                                      vCompañia,
                                                      Cotizacion,
                                                      SecuenceItem,
                                                      UserCodeName
                                                      );

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);


                                SecuenceItem++;
                            }
                            else
                                throw new Exception(string.Format("{0}, {1} ", GenericMessage, SaveDetailResult.Message));
                        }
                        break;
                    #endregion
                    #region Fianzas
                    case Utility.AlliedLinesType.Bail:
                        foreach (var item in oBail.BailInsured)
                        {
                            CoverageSysflex = oSFPolicyServiceClient.GetCoverageProduct_IL(item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault());

                            var DCoverageBail = oBail.Coverages.Where(i => i.UniqueId == item.UniqueBailId);
                            //Coberturas
                            var SaveCoveragesResult = SaveCoverages_IL(DCoverageBail,
                                                                       vCompañia,
                                                                       Cotizacion,
                                                                       item.Ramo.GetValueOrDefault(),
                                                                       item.SubRamo.GetValueOrDefault(),
                                                                       SecuenceItem,
                                                                       CoverageSysflex
                                                                       );
                            //Detalle
                            var SaveDetailResult = SaveDetail_IL(item,
                                                                 DCoverageBail,
                                                                 vCompañia,
                                                                 Cotizacion,
                                                                 item.Ramo.GetValueOrDefault(),
                                                                 item.SubRamo.GetValueOrDefault(),
                                                                 UserCodeName,
                                                                 TasaCalc,
                                                                 ContactData.Dob.GetValueOrDefault(),
                                                                 Sexo,
                                                                 SecuenceItem,
                                                                 MontoAsegurado,
                                                                 item.UniqueBailId,
                                                                 FrequenciaPago,
                                                                 BeginDate,
                                                                 EndDate
                                                                );

                            hasError = ErrorCode.Contains(SaveDetailResult.Code);

                            if (!hasError)
                            {

                                //Guardar los fiadores
                                var dataFiadores = oBailManager.GetBailInsuredGuarantors(new Entity.UnderWriting.Entities.Bail.Insured.Guarantors.Key
                                {
                                    CorpId = item.CorpId,
                                    UniqueBailId = item.UniqueBailId,
                                    SeqId = null
                                });


                                if (dataFiadores.Any())
                                {
                                    foreach (var itemFiador in dataFiadores)
                                    {
                                        var ResAddFiador = oSFPolicyServiceClient.SetAdditionalFiador(new PolicyQuotationILAdditionalFiador
                                        {
                                            Compania = vCompañia,
                                            Cotizacion = Cotizacion,
                                            Secuencia = SecuenceItem,
                                            IdFiador = 0,
                                            TipoId = itemFiador.IdentificationTypeIdSysflex,
                                            NumeroId = itemFiador.Identification,
                                            Nombre = itemFiador.Name,
                                            Apellido = itemFiador.LastName,
                                            Email = itemFiador.Email,
                                            Telefonos = itemFiador.Phone,
                                            Direccion = itemFiador.Address,
                                            IdPais = itemFiador.IdPais.GetValueOrDefault(),
                                            IdProvincia = itemFiador.IdProvincia.GetValueOrDefault(),
                                            IdMunicipio = itemFiador.IdMunicipio.GetValueOrDefault(),
                                            IdSector = itemFiador.IdSector.GetValueOrDefault(),
                                            Nacionalidad = itemFiador.NationalityCountryDesc,
                                            UsuarioAdiciona = UserCodeName,
                                            FechaAdiciona = DateTime.Now,
                                            Representante = itemFiador.RepresentativeName,
                                            CedulaRepresentante = itemFiador.RepresentativeIdentification,
                                            RepresentanteTipoRnc = itemFiador.RepresentativeIdentificationTypeIdSysflex,
                                            Accion = Utility.SysFlexACTION.INSERT.ToString(),
                                            UsuarioId = UserID
                                        });

                                        if (ResAddFiador != null)
                                            ResultAdditional.Add(ResAddFiador);
                                    }

                                    if (ResultAdditional.Any())
                                    {
                                        var CodeList = string.Join(" ", ResultAdditional.Select(e => e.Code).ToArray());
                                        var MessageList = string.Join("<br>", ResultAdditional.Select(e => e.Message).ToArray());

                                        hasError = ErrorCode.Contains(CodeList);

                                        if (hasError)
                                            throw new Exception(string.Format("{0}, {1} ", GenericMessage, MessageList));
                                    }
                                }

                                hasError = ErrorCode.Contains(SaveDetailResult.Code);

                                if (!hasError)
                                {
                                    //Actualizar el sourceid  en el detalle
                                    item.SourceId = SaveDetailResult.QuotationDetail.SourceId;
                                    oBailManager.SetBailInsured(item);
                                }

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );

                                //Facultativo
                                SetFacultativeProduct(corpId,
                                                      regionId,
                                                      countryId,
                                                      domesticRegId,
                                                      stateProvId,
                                                      cityId,
                                                      officeId,
                                                      caseSeqNo,
                                                      histSeqNo,
                                                      SaveCoveragesResult.Item2,
                                                      item.UniqueBailId,
                                                      item.AppliesToReinsurance,
                                                      item.ReinsuranceAmount,
                                                      ErrorCode,
                                                      vCompañia,
                                                      Cotizacion,
                                                      SecuenceItem,
                                                      UserCodeName
                                                      );

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );

                                SecuenceItem++;
                            }
                            else
                                throw new Exception(string.Format("{0}, {1} ", GenericMessage, SaveDetailResult.Message));
                        }
                        break;
                    #endregion
                    #region Cascos Maritimos
                    case Utility.AlliedLinesType.Navy:
                        foreach (var item in oNavy.NavyInsured)
                        {
                            CoverageSysflex = oSFPolicyServiceClient.GetCoverageProduct_IL(item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault());

                            var DCoverageNavy = oNavy.Coverages.Where(i => i.UniqueId == item.UniqueNavyId);
                            //Coberturas
                            var SaveCoveragesResult = SaveCoverages_IL(DCoverageNavy,
                                                                       vCompañia,
                                                                       Cotizacion,
                                                                       item.Ramo.GetValueOrDefault(),
                                                                       item.SubRamo.GetValueOrDefault(),
                                                                       SecuenceItem,
                                                                       CoverageSysflex
                                                                       );
                            //Detalle
                            var SaveDetailResult = SaveDetail_IL(item,
                                                                 DCoverageNavy,
                                                                 vCompañia,
                                                                 Cotizacion,
                                                                 item.Ramo.GetValueOrDefault(),
                                                                 item.SubRamo.GetValueOrDefault(),
                                                                 UserCodeName,
                                                                 TasaCalc,
                                                                 ContactData.Dob.GetValueOrDefault(),
                                                                 Sexo,
                                                                 SecuenceItem,
                                                                 MontoAsegurado,
                                                                 item.UniqueNavyId,
                                                                 FrequenciaPago,
                                                                 BeginDate,
                                                                 EndDate
                                                                );

                            hasError = ErrorCode.Contains(SaveDetailResult.Code);

                            if (!hasError)
                            {
                                //Actualizar el sourceid  en el detalle
                                item.SourceId = SaveDetailResult.QuotationDetail.SourceId;
                                oNavyManager.SetNavyInsured(item);

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );
                                //Facultativo
                                SetFacultativeProduct(corpId,
                                                      regionId,
                                                      countryId,
                                                      domesticRegId,
                                                      stateProvId,
                                                      cityId,
                                                      officeId,
                                                      caseSeqNo,
                                                      histSeqNo,
                                                      SaveCoveragesResult.Item2,
                                                      item.UniqueNavyId,
                                                      item.AppliesToReinsurance,
                                                      item.ReinsuranceAmount,
                                                      ErrorCode,
                                                      vCompañia,
                                                      Cotizacion,
                                                      SecuenceItem,
                                                      UserCodeName
                                                      );

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );

                                SecuenceItem++;
                            }
                            else
                                throw new Exception(string.Format("{0}, {1} ", GenericMessage, SaveDetailResult.Message));
                        }
                        break;
                    #endregion
                    #region Propiedad
                    case Utility.AlliedLinesType.Property:
                        foreach (var item in oProperty.PropertyInsured)
                        {
                            CoverageSysflex = oSFPolicyServiceClient.GetCoverageProduct_IL(item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault());

                            var DCoverageProperty = oProperty.Coverages.Where(i => i.UniqueId == item.UniquePropertyId);
                            //Coberturas
                            var SaveCoveragesResult = SaveCoverages_IL(DCoverageProperty,
                                                                       vCompañia,
                                                                       Cotizacion,
                                                                       item.Ramo.GetValueOrDefault(),
                                                                       item.SubRamo.GetValueOrDefault(),
                                                                       SecuenceItem,
                                                                       CoverageSysflex
                                                                       );
                            //Detalle
                            var SaveDetailResult = SaveDetail_IL(item,
                                                                 DCoverageProperty,
                                                                 vCompañia,
                                                                 Cotizacion,
                                                                 item.Ramo.GetValueOrDefault(),
                                                                 item.SubRamo.GetValueOrDefault(),
                                                                 UserCodeName,
                                                                 TasaCalc,
                                                                 ContactData.Dob.GetValueOrDefault(),
                                                                 Sexo,
                                                                 SecuenceItem,
                                                                 MontoAsegurado,
                                                                 item.UniquePropertyId,
                                                                 FrequenciaPago,
                                                                 BeginDate,
                                                                 EndDate
                                                                 );

                            hasError = ErrorCode.Contains(SaveDetailResult.Code);

                            if (!hasError)
                            {

                                oPropertyManager.SetPropertyInsuredDetail(new Entity.UnderWriting.Entities.Property.Insured.Detail.key
                                {
                                    CorpId = item.CorpId,
                                    RegionId = item.RegionId,
                                    CountryId = item.CountryId,
                                    DomesticregId = item.DomesticregId,
                                    StateProvId = item.StateProvId,
                                    CityId = item.CityId,
                                    OfficeId = item.OfficeId,
                                    CaseSeqNo = item.CaseSeqNo,
                                    HistSeqNo = item.HistSeqNo,
                                    PropertyId = item.PropertyId,
                                    SeqId = item.SeqId,
                                    Endorsement = item.Endorsement,
                                    EndorsementAmount = item.EndorsementAmount,
                                    EndorsementBeneficiaryRnc = item.EndorsementBeneficiaryRnc,
                                    EndorsementBeneficiary = item.EndorsementBeneficiary,
                                    EndorsementContactName = item.EndorsementContactName,
                                    EndorsementContactPhone = item.EndorsementContactPhone,
                                    EndorsementContactEmail = item.EndorsementContactEmail,
                                    UserId = UserID,
                                    SourceId = SaveDetailResult.QuotationDetail.SourceId
                                });


                                var dataAdditionalProperty = oPropertyManager.GetPropertyInsuredDetailFeature(new Property.Insured.Detail.Feature.GetPropertyInsuredDetailFeatureResult.Key
                                {
                                    corpId = item.CorpId,
                                    uniquePropertyId = item.UniquePropertyId,
                                    seqId = null
                                });

                                //Guardar los Adicionales
                                if (dataAdditionalProperty.Any())
                                {
                                    foreach (var itemProperty in dataAdditionalProperty)
                                    {
                                        var TipoAdicional = (Utility.AdditionalType)Enum.Parse(typeof(Utility.AdditionalType), itemProperty.Type);
                                        getResult ResAd = null;

                                        switch (TipoAdicional)
                                        {
                                            case Utility.AdditionalType.Cristal:
                                                ResAd = oSFPolicyServiceClient.SetAdditionalCrital(new PolicyQuotationILAdditionalCristal
                                                {
                                                    Compania = vCompañia,
                                                    Cotizacion = Cotizacion,
                                                    Secuencia = SecuenceItem,
                                                    IdCristal = 0,
                                                    Cantidad = (decimal)itemProperty.Quantity,
                                                    Altura = itemProperty.Height,
                                                    Anchura = itemProperty.Width,
                                                    ValorAsegurado = itemProperty.Value.GetValueOrDefault(),
                                                    MinimoDeducible = itemProperty.MinimumDeductible,
                                                    TipoCristal = itemProperty.MeasureTypeDesc,
                                                    Colocacion = itemProperty.PositionDesc,
                                                    ValorReposicion = 0m,
                                                    PorcDeducible = itemProperty.Deductible,
                                                    BaseDeducible = string.Empty,
                                                    PorcPrima = 0m,
                                                    FechaAdiciona = DateTime.Now
                                                });
                                                break;
                                            case Utility.AdditionalType.Objeto:
                                                ResAd = oSFPolicyServiceClient.SetAdditionalObjetoValioso(new PolicyQuotationILAdditionalObjetoValioso
                                                {
                                                    Compania = vCompañia,
                                                    Cotizacion = Cotizacion,
                                                    Secuencia = SecuenceItem,
                                                    IdObjeto = 0,
                                                    Descripcion = itemProperty.Description,
                                                    Marca = itemProperty.Brand,
                                                    Modelo = itemProperty.Model,
                                                    Autor = itemProperty.Author,
                                                    Serie = itemProperty.SerialKey,
                                                    Certificado = itemProperty.CertificateDesc,
                                                    ValorAsegurado = itemProperty.Value.GetValueOrDefault(),
                                                    ValorReposicion = 0m,
                                                    PorcDeducible = itemProperty.Deductible.GetValueOrDefault(),
                                                    BaseDeducible = string.Empty,
                                                    MinimoDeducible = itemProperty.MinimumDeductible.GetValueOrDefault(),
                                                    PorcPrima = 0m,
                                                    FechaAdiciona = DateTime.Now,
                                                    Accion = Utility.SysFlexACTION.INSERT.ToString(),
                                                    UsuarioAdiciona = UserCodeName,
                                                    UsuarioId = UserID
                                                });
                                                break;
                                            case Utility.AdditionalType.Electronico:
                                                ResAd = oSFPolicyServiceClient.SetAdditionalEquipoElectronico(new PolicyQuotationILAdditionalEquipoElectronico
                                                {
                                                    Compania = vCompañia,
                                                    Cotizacion = Cotizacion,
                                                    Secuencia = SecuenceItem,
                                                    IdEquipo = 0,
                                                    Descripcion = itemProperty.Description,
                                                    Marca = itemProperty.Brand,
                                                    Modelo = itemProperty.Model,
                                                    Serie = itemProperty.SerialKey,
                                                    ValorAsegurado = itemProperty.Value.GetValueOrDefault(),
                                                    ValorReposicion = 0m,
                                                    PorcDeducible = itemProperty.Deductible.GetValueOrDefault(),
                                                    BaseDeducible = string.Empty,
                                                    MinimoDeducible = itemProperty.MinimumDeductible,
                                                    PorcPrima = 0m,
                                                    FechaAdiciona = DateTime.Now
                                                });

                                                break;
                                            case Utility.AdditionalType.AveriaDeMaquinaria:
                                            case Utility.AdditionalType.EquipoContratista:
                                                ResAd = oSFPolicyServiceClient.SetAdditionalMaquinaria(new PolicyQuotationILAdditionalMaquinaria
                                                {
                                                    Compania = vCompañia,
                                                    Cotizacion = Cotizacion,
                                                    Secuencia = SecuenceItem,
                                                    IdMaquinaria = 0,
                                                    Descripcion = itemProperty.Description,
                                                    Marca = itemProperty.Brand,
                                                    Modelo = itemProperty.Model,
                                                    Serie = itemProperty.SerialKey,
                                                    Ano = itemProperty.Year.GetValueOrDefault(),
                                                    ValorAsegurado = itemProperty.Value.GetValueOrDefault(),
                                                    ValorReposicion = 0m,
                                                    PorcDeducible = itemProperty.Deductible.GetValueOrDefault(),
                                                    BaseDeducible = string.Empty,
                                                    MinimoDeducible = itemProperty.MinimumDeductible.GetValueOrDefault(),
                                                    PorcPrima = 0m,
                                                    FechaAdiciona = DateTime.Now
                                                });
                                                break;
                                        }

                                        if (ResAd != null)
                                            ResultAdditional.Add(ResAd);
                                    }

                                    if (ResultAdditional.Any())
                                    {
                                        var CodeList = string.Join(" ", ResultAdditional.Select(e => e.Code).ToArray());
                                        var MessageList = string.Join("<br>", ResultAdditional.Select(e => e.Message).ToArray());

                                        hasError = ErrorCode.Contains(CodeList);

                                        if (hasError)
                                            throw new Exception(string.Format("{0}, {1} ", GenericMessage, MessageList));
                                    }
                                }

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );

                                //Facultativo
                                SetFacultativeProduct(corpId,
                                                      regionId,
                                                      countryId,
                                                      domesticRegId,
                                                      stateProvId,
                                                      cityId,
                                                      officeId,
                                                      caseSeqNo,
                                                      histSeqNo,
                                                      SaveCoveragesResult.Item2,
                                                      item.UniquePropertyId,
                                                      item.AppliesToReinsurance,
                                                      item.ReinsuranceAmount,
                                                      ErrorCode,
                                                      vCompañia,
                                                      Cotizacion,
                                                      SecuenceItem,
                                                      UserCodeName
                                                      );

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );

                                SecuenceItem++;
                            }
                            else
                                throw new Exception(string.Format("{0}, {1} ", GenericMessage, SaveDetailResult.Message));
                        }
                        break;
                    #endregion
                    #region Transporte
                    case Utility.AlliedLinesType.Transport:
                        foreach (var item in oTransport.TransportInsured)
                        {
                            CoverageSysflex = oSFPolicyServiceClient.GetCoverageProduct_IL(item.Ramo.GetValueOrDefault(), item.SubRamo.GetValueOrDefault());
                            getResult ResAd = null;

                            var DCoverageTransport = oTransport.Coverages.Where(i => i.UniqueId == item.UniqueTransportId);
                            //Coberturas
                            var SaveCoveragesResult = SaveCoverages_IL(DCoverageTransport,
                                                                       vCompañia,
                                                                       Cotizacion,
                                                                       item.Ramo.GetValueOrDefault(),
                                                                       item.SubRamo.GetValueOrDefault(),
                                                                       SecuenceItem,
                                                                       CoverageSysflex
                                                                      );



                            //Detalle
                            var SaveDetailResult = SaveDetail_IL(item,
                                                                 DCoverageTransport,
                                                                 vCompañia,
                                                                 Cotizacion,
                                                                 item.Ramo.GetValueOrDefault(),
                                                                 item.SubRamo.GetValueOrDefault(),
                                                                 UserCodeName,
                                                                 TasaCalc,
                                                                 ContactData.Dob.GetValueOrDefault(),
                                                                 Sexo,
                                                                 SecuenceItem,
                                                                 MontoAsegurado,
                                                                 item.UniqueTransportId,
                                                                 FrequenciaPago,
                                                                 BeginDate,
                                                                 EndDate
                                                                );

                            hasError = ErrorCode.Contains(SaveDetailResult.Code);

                            if (!hasError)
                            {
                                //Actualizar el sourceid  en el detalle
                                item.SourceId = SaveDetailResult.QuotationDetail.SourceId;
                                oTransportManager.SetTransportInsured(item);

                                //Guardar informacion adicional Transporte
                                var dataTransporte = oTransportManager.GetTransportInsuredExtraInfo(new Transport.Insured.ExtraInfo.Key
                                {
                                    CorpId = item.CorpId,
                                    UniqueTransportId = (int)item.UniqueTransportId,
                                    SeqId = null
                                });

                                if (dataTransporte.Any())
                                {
                                    foreach (var itemTransport in dataTransporte)
                                    {
                                        var TipoTransporte = (Utility.TranportAdditional)Enum.Parse(typeof(Utility.TranportAdditional), itemTransport.TransportInsuredDesc);

                                        switch (TipoTransporte)
                                        {
                                            case Utility.TranportAdditional.Land:
                                                ResAd = oSFPolicyServiceClient.SetAdditionalTransporteTerrestre(new PolicyQuotationILAdditionalTransporteTerrestre
                                                {
                                                    Compania = vCompañia,
                                                    Cotizacion = Cotizacion,
                                                    Secuencia = SecuenceItem,
                                                    IdTransporte = 0,
                                                    Marca = itemTransport.Brand,
                                                    Modelo = itemTransport.Model,
                                                    Ano = itemTransport.Year.GetValueOrDefault(),
                                                    Placa = itemTransport.Plate,
                                                    Chasis = itemTransport.Vin,
                                                    FechaAdiciona = DateTime.Now,
                                                    Accion = Utility.SysFlexACTION.INSERT.ToString(),
                                                    UsuarioAdiciona = UserCodeName,
                                                    UsuarioId = UserID
                                                });
                                                break;
                                            case Utility.TranportAdditional.Maritime:
                                            case Utility.TranportAdditional.Air:
                                                ResAd = oSFPolicyServiceClient.SetAdditionalTransporteAereoMaritimo(new PolicyQuotationILAdditionalTransporteAereoMaritimo
                                                {
                                                    Compania = vCompañia,
                                                    Cotizacion = Cotizacion,
                                                    Secuencia = SecuenceItem,
                                                    IdTransporte = 0,
                                                    Nombre = itemTransport.Name,
                                                    Serie = itemTransport.SerialKey,
                                                    FechaAdiciona = DateTime.Now,
                                                    UsuarioAdiciona = UserCodeName,
                                                    Accion = Utility.SysFlexACTION.INSERT.ToString(),
                                                    UsuarioId = UserID
                                                });
                                                break;
                                        }

                                        if (ResAd != null)
                                            ResultAdditional.Add(ResAd);
                                    }


                                    if (ResultAdditional.Any())
                                    {
                                        var CodeList = string.Join(" ", ResultAdditional.Select(e => e.Code).ToArray());
                                        var MessageList = string.Join("<br>", ResultAdditional.Select(e => e.Message).ToArray());

                                        hasError = ErrorCode.Contains(CodeList);

                                        if (hasError)
                                            throw new Exception(string.Format("{0}, {1} ", GenericMessage, MessageList));
                                    }
                                }

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );

                                //Facultativo
                                SetFacultativeProduct(corpId,
                                                      regionId,
                                                      countryId,
                                                      domesticRegId,
                                                      stateProvId,
                                                      cityId,
                                                      officeId,
                                                      caseSeqNo,
                                                      histSeqNo,
                                                      SaveCoveragesResult.Item2,
                                                      item.UniqueTransportId,
                                                      item.AppliesToReinsurance,
                                                      item.ReinsuranceAmount,
                                                      ErrorCode,
                                                      vCompañia,
                                                      Cotizacion,
                                                      SecuenceItem,
                                                      UserCodeName
                                                      );

                                //Guardar el reaseguro
                                oSFPolicyServiceClient.SetQuotationReinsurance_IL(vCompañia, Cotizacion, SecuenceItem, 0);
                                //Guardar reaseguro con coberturas
                                oSFPolicyServiceClient.SetQuotationCoverageReinsurance_IL(vCompañia,
                                                                                          Cotizacion,
                                                                                          SecuenceItem,
                                                                                           0
                                                                                          );

                                SecuenceItem++;
                            }
                            else
                                throw new Exception(string.Format("{0}, {1} ", GenericMessage, SaveDetailResult.Message));
                        }
                        break;
                        #endregion
                }

                #endregion

                #endregion

                #region Emitir

                #region Paso #1 Guardar el acuerdo de pago - El Salvador
                #region EL Salvador
                if (this.Country == Utility.Country.ElSalvador)
                {
                    //Paso #1  Guardar los acuerdos
                    var PaymentAgreementData = oSFPolicyServiceClient.GetAcuerdosProductoSV(vCompañia, Cotizacion, 0, "cotizacion");
                    var oPaymentAgreement = new List<Utility.PaymentAgreementSV>(0);

                    if (!string.IsNullOrEmpty(PaymentAgreementData.JSONResult) && PaymentAgreementData.JSONResult.ToLower() != "null")
                    {
                        var OldValue = "{}";
                        var resultString = PaymentAgreementData.JSONResult.Replace(OldValue, "0");
                        oPaymentAgreement = Utility.deserializeJSON<List<Utility.PaymentAgreementSV>>(resultString);
                    }

                    foreach (var item in oPaymentAgreement)
                    {
                        var ItemQuotationPaymentAgreement = new oSysFlexService.PolicyQuotationILQuotationPaymenAgreementparameter
                        {
                            compania = vCompañia,
                            cotizacion = Cotizacion,
                            cuota = item.Cuota,
                            porcientoInicial = item.Porciento,
                            fechaPago = item.FechaCuota.HasValue ? item.FechaCuota.Value.ToString("yyyyMMdd") : string.Empty,
                            valorCuota = item.ValorCuota
                        };

                        var SetQuotationPaymentAgreementResult = oSFPolicyServiceClient.SetQuotationPaymentAgreement_IL(ItemQuotationPaymentAgreement);

                        hasError = ErrorCode.Contains(SetQuotationPaymentAgreementResult.Code);

                        if (hasError)
                            throw new Exception(string.Format("{0}, {1} ", GenericMessage, SetQuotationPaymentAgreementResult.Message));
                        else
                        {
                            //Paso exitosamente
                        }
                    }
                }
                #endregion
                #endregion

                #region Paso #1 Enviar la cotizacion a Transito - Republica Dominicana
                var SetPasstransitResult = oSFPolicyServiceClient.SetPasstransit_IL(vCompañia,
                                                                                    Cotizacion,
                                                                                    UserCodeName,
                                                                                    "",
                                                                                    Oficina,
                                                                                    1  //Emision
                                                                                    );

                hasError = (ErrorCode.Contains(SetPasstransitResult.Code) || SetPasstransitResult.QuotationPassTransit == null);

                if (!hasError)
                {
                    PolicyNo = SetPasstransitResult.QuotationPassTransit.Poliza;
                    var SourceId = SetPasstransitResult.QuotationPassTransit.SourceId;
                    var TaxAmount = (AnnualPremium * TasaCalc);
                    var InvoiceTotalIncludingTax = AnnualPremium + (AnnualPremium * TasaCalc);

                    //Paso #3  Emitir la poliza con los acuerdos   
                    try
                    {
                        var CallGpMethod = (dataConfig.FirstOrDefault(u => u.Namekey == "CallGpMethodFromEmition").ConfigurationValue == "1");

                        if (CallGpMethod)
                        {
                            #region Llamar el metodo GetNCFandInvoiceNumber de GP
                            var NCFandInvoiceNumberResult = oSFPolicyServiceClient.GetNCFandInvoiceNumber(PolicyNo, DateTime.Now, InvoiceTotalIncludingTax, TaxAmount);

                            hasError = (ErrorCode.Contains(NCFandInvoiceNumberResult.Code) || NCFandInvoiceNumberResult == null);

                            if (hasError)
                                throw new Exception(string.Concat(GenericMessage, ",", NCFandInvoiceNumberResult.Message));

                            if (!string.IsNullOrEmpty(NCFandInvoiceNumberResult.JSONResult) || NCFandInvoiceNumberResult.JSONResult != null || NCFandInvoiceNumberResult.JSONResult != "[]")
                            {
                                var dNCFandInvoiceNumberResult = Utility.deserializeJSON<Utility.GPResultGeNextNCF>(NCFandInvoiceNumberResult.JSONResult);

                                if (dNCFandInvoiceNumberResult.Successful)
                                {

                                    var ResultFactSinGp = oSFPolicyServiceClient.FacturacionMovimientoSinGP(vCompañia,
                                                                                                         Cotizacion,
                                                                                                         1,
                                                                                                         UserCodeName,
                                                                                                         1,
                                                                                                         "",
                                                                                                         1,
                                                                                                         dNCFandInvoiceNumberResult.NCFNumber,
                                                                                                         dNCFandInvoiceNumberResult.InvoiceNumber,
                                                                                                         dNCFandInvoiceNumberResult.Error,
                                                                                                         illustrationData.Financed
                                                                                                        );

                                    hasError = (ErrorCode.Contains(ResultFactSinGp.Code) || ResultFactSinGp == null);

                                    if (hasError)
                                        HasErrorOnEmitionInvoice = true;
                                }
                                else
                                {
                                    HasErrorOnEmitionInvoice = true;
                                    hasError = true;
                                }
                            }

                            #endregion
                        }
                        else
                        {
                            #region Metodo de facturacion con GP

                            //Paso #3  Emitir la poliza con los acuerdos
                            ResultFacturacion = oSFPolicyServiceClient.SetMotionBilling_IL(vCompañia,
                                                                                                     Cotizacion,
                                                                                                     1,
                                                                                                     UserCodeName,
                                                                                                     1,
                                                                                                     "",
                                                                                                     1
                                                                                                     );

                            HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");


                            //ResultFacturacion = oSFPolicyServiceClient.SetMotionBillingVehicle(vCompañia,
                            //                                                                   Cotizacion,
                            //                                                                   1,
                            //                                                                   UserCodeName,
                            //                                                                   1,
                            //                                                                   "",
                            //                                                                   1
                            //                                                                   );

                            //HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");
                            #endregion
                        }
                    }
                    catch (Exception)
                    {
                        HasErrorOnEmitionInvoice = true;
                    }

                    if (!hasError)
                    {
                        #region Paso #2 Guardar el acuerdo de pago - Republica Dominicana
                        #region Republica Dominicana
                        try
                        {
                            //Acuerdo de pago
                            SetPaymentAgreement(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, vCompañia, Cotizacion);
                        }
                        catch (Exception)
                        {
                            HasErrorOnEmitionInvoice = true;
                        }

                        #endregion
                        #endregion
                    }
                    else
                        throw new Exception(string.Format("{0}, {1} ", GenericMessage, ResultFacturacion.Message));

                    Utility.CLoanResult CloanResult = null;
                    string LoanNumber = null;

                    if (!string.IsNullOrEmpty(PolicyNo))
                    {
                        #region Crear el prestamo en KreditCo
                        if (illustrationData.Financed.GetValueOrDefault())
                        {
                            short? ksitipoCedula = null;

                            switch (ContactIdType)
                            {
                                case 1:
                                case 3:
                                    ksitipoCedula = 1; //Cedula
                                    break;
                                case 2:
                                    ksitipoCedula = 2; //Pasaporte
                                    break;
                                case 5:
                                    ksitipoCedula = 3; //RNC
                                    break;
                            }

                            var itemContactParameter = new Utility.ContactParameter
                            {
                                Email = Email,
                                Direccion = Direccion,
                                TelefonoCasa = TelefonoCasa,
                                TelefonoTrabajo = TelefonoTrabajo,
                                TelefonoCelular = TelefonoCelular,
                                tipoCedula = ksitipoCedula,
                                CedulaRncOther = CedulaRncOther,
                                oAddress = oAddress,
                                oPhones = oPhones
                            };

                            CloanResult = kcoCreateLoan(ContactData, PolicyData, itemContactParameter, PolicyNo);

                            ErrorCreateLoanKCO = ErrorCode.Contains(CloanResult.Code);

                            if (!ErrorCreateLoanKCO)
                            {
                                LoanNumber = CloanResult.LoanNo.ToString();
                                var subject = string.Format("Bandeja - Se ha creado una solicitud de préstamo en KCO para la póliza número : {0}", PolicyNo);
                                var msg = string.Format("Notificación de creacion de prestamo en KCO Número de solicitud {0}", LoanNumber);
                                SendEmailKCOFinanced(msg, subject, "EmailSendNotificationFinancedPolicy");
                            }
                            else
                            {
                                var subject = string.Format("Bandeja - Error creando préstamo en KCO para la póliza número : {0}", PolicyNo);
                                SendEmailError(CloanResult.Message, subject, "EmailSendErrorKCO");
                            }
                        }

                        #endregion

                        #region Domiciliacion

                        //Guardar el acuerdo de pago                    
                        var dataResultPaymentAgreement = this.oPaymentManager.GetPaymentAgreement(new Entity.UnderWriting.Entities.Payment.Agreement
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo
                        });

                        //Si todo esta correcto entonces verificar si hay domiciliacion del pago para entonces proceder
                        if (!illustrationData.Financed.GetValueOrDefault() && illustrationData.DirectDebit.GetValueOrDefault())
                        {
                            var Result = this.Domiciliation(ContactData, dataResultPaymentAgreement, vCompañia, Cotizacion, BeginDate, PolicyNo, UserCodeName, illustrationData.DomicileInitialPayment.GetValueOrDefault());
                            var msg = Result.oReturn.Message;

                            if (msg != "Exito")
                                SendEmailError(msg, string.Format("Bandeja - Error domiciliando pago poliza número : {0}", PolicyNo), "EmailSendErrorDomiciliationGP");
                        }

                        #endregion

                        //Actualizar la poliza en global
                        UpdatePolicyByGlobal(corpId,
                                             regionId,
                                             countryId,
                                             domesticRegId,
                                             stateProvId,
                                             cityId,
                                             officeId,
                                             caseSeqNo,
                                             histSeqNo,
                                             QuotationNumber,
                                             Cotizacion.ToString(),
                                             PolicyNo,
                                             SourceId,
                                             BeginDate.GetValueOrDefault(),
                                             EndDate.GetValueOrDefault()
                                             );


                        if (vOnBaseAvailable)
                            //Enviar los archivos a onbase
                            GenerateOnBaseFiles(corpId,
                                                regionId,
                                                countryId,
                                                domesticRegId,
                                                stateProvId,
                                                cityId,
                                                officeId,
                                                caseSeqNo,
                                                histSeqNo,
                                                false,
                                                ServerMapPathXML,
                                                DescOficina,
                                                DescPlan,
                                                DescProducto,
                                                RepresentanteLegal: ContactData.ManagerName
                                                );
                    }
                }
                else
                    throw new Exception(string.Format("{0}, {1} ", GenericMessage, "Error intentando pasar la cotización a transito"));

                #endregion


                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return
                   new Tuple<string, string, bool>(PolicyNo, Quotation, HasErrorOnEmitionInvoice);
        }

        /// <summary>
        /// Inclusion de vehiculos en poliza existente
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="isQuotation"></param>
        /// <param name="QuotationNumber"></param>
        /// <param name="ServerMapPathXML"></param>
        public Tuple<String, String, Boolean> SendQuotInclusionSysflex(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, string QuotationNumber, out string VehiclesIncluded, string ServerMapPathXML = null)
        {
            VehiclesIncluded = string.Empty;
            oSysFlexService.SetMotionBillingResult ResultFacturacion = null;
            var HasErrorOnEmitionInvoice = false;
            var ErrorCreateLoanKCO = false;
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            string vEnabledChassisOrPlateValidationKey = string.Empty;
            bool vEnabledChassisOrPlateValidation;
            string UserCodeName = "VO-" + this.UserName;
            var PolicyNo = string.Empty;
            var HasFactultative = false;
            var Quotation = string.Empty;
            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);

                vEnabledChassisOrPlateValidationKey = ConfigurationManager.AppSettings["EnabledChassisOrPlateValidation"];
                bool.TryParse(vEnabledChassisOrPlateValidationKey, out vEnabledChassisOrPlateValidation);
            }
            catch (Exception)
            {
                vOnBaseAvailable = false;
                vEnabledChassisOrPlateValidation = false;
            }

            try
            {
                DateTime? BeginDate = null;
                DateTime? EndDate = null;
                var vCompañia = 30; //Atlantica Seguros 
                var vRamo = 106;//

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                PolicyNo = PolicyData.PolicyNoMain;
                Quotation = PolicyData.PolicyNo;

                //Validar si a la poliza en cuestion se le puede hacer una inclusión
                var CanPolicyMoveResult = oSFPolicyServiceClient.GetCanPolicyMove(PolicyNo);
                if (CanPolicyMoveResult.Code == "000")
                {
                    if (!string.IsNullOrEmpty(CanPolicyMoveResult.JSONResult))
                    {
                        var canMovement = CanPolicyMoveResult.JSONResult == "true";

                        if (!canMovement)
                        {
                            var mensaje = string.Format("A la poliza \"{0}\" no se le pueden hacer movimientos ya que la misma esta en transito", PolicyNo);
                            throw new Exception(mensaje);
                        }
                    }
                }
                else
                    throw new Exception(CanPolicyMoveResult.Message);

                var IllustrationData = getillustrationData();

                //Objeto de la data del Contacto
                var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

                //Validar el contacto
                if (ContactData == null)
                    throw new Exception(Resources.QuotationDontHasContact);

                oSysFlexService.UtilityGender Sexo;

                switch (ContactData.Gender)
                {
                    case "M":
                        Sexo = oSysFlexService.UtilityGender.Masculino; break;
                    case "F":
                        Sexo = oSysFlexService.UtilityGender.Femenino; break;
                    default:
                        Sexo = oSysFlexService.UtilityGender.Empresa; break;
                }

                //Data de los Vehiculos
                var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    UnderwriterId = Agent_LoginId,
                    LanguageId = Language.ToInt(),
                    UserId = this.UserID
                });

                #region validacion de Placa y Chasis
                var MessageError = string.Empty;
                var ListError = new StringBuilder();

                if (vEnabledChassisOrPlateValidation)
                {
                    foreach (var itemVehicle in dataVehicle)
                    {
                        var JSONResult = oSFPolicyServiceClient.CheckChassisOrRegistry(new oSysFlexService.PolicyVehicleKey
                        {
                            Chassis = itemVehicle.Chassis,
                            Registry = itemVehicle.Registry
                        }).JSONResult;

                        if (JSONResult == null)
                            JSONResult = "[]";

                        var OldValue = "{}";
                        var resultString = JSONResult.Replace(OldValue, "0");

                        //Verificar si el o los vehiculos de esta poliza no esta ya registrado en sysflex
                        var dataResult = Utility.deserializeJSON<IEnumerable<Utility.VehicleIdentification>>(resultString);

                        if (dataResult.Any())
                        {
                            foreach (var item in dataResult)
                            {
                                MessageError = (item.Type == "Placa") ? string.Format(Resources.PlateValidation, item.Value.ToUpper(), item.Policy)
                                                                      : string.Format(Resources.ChassisValidation, item.Value.ToUpper(), item.Policy);

                                ListError.Append(MessageError);
                            }

                            ListError.Insert(0, Resources.ChassisOrPlateValidation);
                        }

                        MessageError = string.Empty;
                    }

                }

                #region Facultativo
                foreach (var itemVehicle in dataVehicle)
                {
                    /*Facultativo Si Aplica*/
                    bool applyReinsu = itemVehicle.AppliesToReinsurance.HasValue ? itemVehicle.AppliesToReinsurance.Value
                                                                                 : false;

                    decimal reinsuAmo = itemVehicle.ReinsuranceAmount.HasValue ? itemVehicle.ReinsuranceAmount.Value
                                                                               : 0;

                    if (applyReinsu && reinsuAmo > 0)
                    {
                        DataTable dtFacultativeContractCoverage = oPolicyManager.GetFacultativeContractCoverage(new Policy.Facultative.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                            UniqueId = itemVehicle.VehicleUniqueId
                        });

                        if (dtFacultativeContractCoverage == null || dtFacultativeContractCoverage.Rows.Count == 0)
                            ListError.Append(Resources.FacultativeMissging);
                        else
                            HasFactultative = true;
                    }
                }
                #endregion


                if (ListError.Length > 0)
                {
                    Exception ex = new Exception(ListError.ToString());
                    ex.Source = "I";
                    throw ex;
                }

                if (HasFactultative)
                {
                    var resultValidationContractName = ExisteNombreContratoEnSysFlex();

                    if (resultValidationContractName.Item1)
                        throw new Exception(resultValidationContractName.Item2);
                }

                #endregion

                var TasaCalc = (PolicyData.TaxPercentage.GetValueOrDefault() / 100);

                if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                    TasaCalc = 0;

                var itemsCoverage = 0;
                var dCotizacion = oSFPolicyServiceClient.GetVehiculosFromPoliza(PolicyData.PolicyNoMain);
                long Cotizacion = 0;

                if (!string.IsNullOrEmpty(dCotizacion.JSONResult) && dCotizacion.JSONResult != "[]")
                {
                    var OldValue = "{}";
                    var resultString = dCotizacion.JSONResult.Replace(OldValue, "0");

                    var dataCotizacion = Utility.deserializeJSON<List<Utility.VehicleInclusion>>(resultString);
                    var oCotizacion = dataCotizacion.FirstOrDefault();
                    Cotizacion = oCotizacion.Cotizacion;
                    itemsCoverage = dataCotizacion.Max(v => v.Item.GetValueOrDefault());
                }

                var AnnualPremium = IllustrationData.ProratedPremium.GetValueOrDefault();
                var SecuenciaMov = -1;

                #region Flotilla Vars
                bool AllowDescuentoFlotilla = (dataConfig.FirstOrDefault(u => u.Namekey == "AllowDescuentoFlotilla").ConfigurationValue == "1");
                var dc = dataConfig.FirstOrDefault(u => u.Namekey == "FlotillaIdSysflex");
                int descuentoFlotillaIDSysflex = (dc != null ? dc.ConfigurationValue.ToInt() : -1);
                string FlotillaDiscountRules = dataConfig.FirstOrDefault(u => u.Namekey == "FlotillaDiscountRules").ConfigurationValue;
                decimal porcDescuentoFlotilla = 0;
                int qtyVehicles = 0;
                #endregion


                //Crear la encabezado del movimiento
                var ResultPolizaHeaderMov = oSFPolicyServiceClient.SetPolizaHeaderMov(Cotizacion, 20, AnnualPremium, UserCodeName);
                if (!string.IsNullOrEmpty(ResultPolizaHeaderMov.JSONResult) && ResultPolizaHeaderMov.JSONResult != "[]")
                {
                    var dPolizaHeaderMov = Utility.deserializeJSON<Utility.itemSecuenciaMov>(ResultPolizaHeaderMov.JSONResult);
                    SecuenciaMov = dPolizaHeaderMov.SecuenciaMov;
                }

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                #region Insertar vehiculos y coberturas
                foreach (var item in dataVehicle)
                {
                    var HasEndorsement = !string.IsNullOrEmpty(item.EndorsementBeneficiary);
                    itemsCoverage++;

                    var ReviewDataInspection = oVehicleManager.GetVehicleReview(new Vehicle
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        InsuredVehicleId = item.InsuredVehicleId
                    });

                    var kilometraje = 0;
                    var Version = "N/A";

                    if (ReviewDataInspection.Any())
                    {
                        var oDataReview = ReviewDataInspection.FirstOrDefault();
                        kilometraje = oDataReview.Odometer.GetValueOrDefault();
                        Version = oDataReview.VersionDesc;
                    }

                    Utility.rateJsonSysFlex rateJsonSysFlex;
                    var IdMarcavehiculo = string.Empty;
                    var IdUsovehiculo = string.Empty;
                    var Idtipoveh = string.Empty;
                    var IdAniovehiculo = string.Empty;
                    var IdDeductible = string.Empty;
                    var IdStorage = string.Empty;
                    var IdModeloVehiculo = string.Empty;
                    var IdCapacidad = string.Empty;
                    var Capacidad = string.Empty;
                    decimal PorcientoRecargoVentas = 0m;
                    bool licenciaExtranjera = false;

                    if (!string.IsNullOrEmpty(item.rateJsonSysflex))
                    {
                        rateJsonSysFlex = Utility.deserializeJSON<Utility.rateJsonSysFlex>(item.rateJsonSysflex.Replace("[", "").Replace("]", ""));
                        IdMarcavehiculo = rateJsonSysFlex.idMarcaVehiculo.ToString();
                        IdUsovehiculo = rateJsonSysFlex.idUso.ToString();
                        Idtipoveh = rateJsonSysFlex.idTipoVehiculo.ToString();
                        IdAniovehiculo = rateJsonSysFlex.idAnoVehiculo.ToString();
                        IdDeductible = rateJsonSysFlex.iddeducible.ToString();
                        IdStorage = rateJsonSysFlex.idEstacionaEn.ToString();
                        IdModeloVehiculo = rateJsonSysFlex.idModeloVehiculo.ToString();
                        IdCapacidad = rateJsonSysFlex.idCapacidad.ToString();
                        Capacidad = rateJsonSysFlex.capacidad;
                        PorcientoRecargoVentas = rateJsonSysFlex.PorcientoRecargoVentas;
                        licenciaExtranjera = rateJsonSysFlex.licenciaExtranjera;
                    }

                    //Crear coberturas
                    //Data Coverturas
                    var DataCoverage = oPolicyManager.GetVehicleCoverage(new Policy.VehicleCoverageGet
                    {
                        CorpId = corpId,
                        VehicleUniqueId = item.VehicleUniqueId
                    });

                    Utility.QuotationAmmount quotationAmmount = GetQuotationAmmounts(caseSeqNo,
                                                                                     cityId,
                                                                                     corpId,
                                                                                     countryId,
                                                                                     domesticRegId,
                                                                                     histSeqNo,
                                                                                     officeId,
                                                                                     regionId,
                                                                                     stateProvId,
                                                                                     item.InsuredVehicleId,
                                                                                     item.VehicleTypeId,
                                                                                     item.VehicleUniqueId,
                                                                                     DataCoverage
                                                                                     );

                    var Edad = Utility.GetAge(ContactData.Dob.GetValueOrDefault()).ToString();

                    var pSexoEdad = string.Empty;

                    if (!ContactData.IsCompany)
                    {
                        pSexoEdad = oSFPolicyServiceClient.GetSexoEdadProducto(new oSysFlexService.PolicySexoEdadKeyParameter
                        {
                            subramo = quotationAmmount.SubRamo,
                            RamoID = vRamo,
                            Edad = Edad,
                            Sexo = Sexo.ToString()
                        });
                    }

                    var QtyMonth = Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Month, BeginDate.GetValueOrDefault(), EndDate.GetValueOrDefault());
                    var pMontoImpuesto = AnnualPremium * TasaCalc;
                    var pPrimaNeta = AnnualPremium + pMontoImpuesto;

                    var VehicleDesc = string.Concat(item.MakeDesc, " ", item.ModelDesc, " ", item.Year.ToString());
                    VehiclesIncluded += string.Concat(".-", VehicleDesc + "<br>");

                    var itemInclusion = new PolicyinclusionvehicleDetailMovparameter
                    {
                        compania = vCompañia,
                        cotizacion = (decimal)Cotizacion,
                        ramo = vRamo,
                        subRamo = quotationAmmount.SubRamo,
                        secuencia = itemsCoverage,
                        tipoVehiculo = item.VehicleTypeDesc,
                        marcaVehiculo = item.MakeDesc,
                        modeloVehiculo = item.ModelDesc,
                        version = Version,
                        anoVehiculo = item.Year.ToString(),
                        chasis = item.Chassis,
                        placa = item.Registry.SIsNullOrEmpty() ? "-" : item.Registry.Replace("'", "`"),
                        color = item.ColorDesc,
                        capacidad = string.IsNullOrEmpty(item.CylindersTons) ?
                                                                               string.IsNullOrEmpty(Capacidad) ? "No especificado"
                                                                                                               : Capacidad
                                                                              : item.CylindersTons,
                        uso = item.UsageDesc,
                        estacionaEn = item.StoredDesc,
                        porcRecargo = quotationAmmount.PorcRecargo,
                        montoRecargo = quotationAmmount.MontoRecargo,
                        porcDescuento = quotationAmmount.PorcDescuento,
                        montoDescuento = quotationAmmount.MontoDescuento,
                        porcImpuesto = PolicyData.TaxPercentage.GetValueOrDefault(),
                        montoImpuesto = pMontoImpuesto,
                        renovacionAutomatica = string.Empty,
                        primaBruta = AnnualPremium,
                        neto = pPrimaNeta,
                        montoAsegurado = item.VehicleValue.HasValue ? (decimal)item.VehicleValue : 0,
                        fechaInicio = BeginDate,
                        fechaFin = EndDate,
                        cantidadMeses = (int)QtyMonth,
                        codigoTarifa = null,
                        usuario = UserCodeName,
                        estatus = "ACTIVO",
                        tasa = 1,
                        noFormulario = "",
                        formadePago = "",
                        idTipoVehiculo = Idtipoveh,
                        idMarcaVehiculo = IdMarcavehiculo,
                        idModeloVehiculo = IdModeloVehiculo,
                        idVersion = "",
                        idAnoVehiculo = IdAniovehiculo,
                        idColor = "",
                        idCapacidad = IdCapacidad,
                        idUso = IdUsovehiculo,
                        idEstacionaEn = IdStorage,
                        iddeducible = IdDeductible,
                        deducible = item.DeductiblePercentage.GetValueOrDefault().Truncate() + "%",
                        categoria = "4",
                        beneficiarioEndoso = HasEndorsement ? item.EndorsementBeneficiary.Replace("'", "`") : string.Empty,
                        rncBeneficiarioEndoso = item.EndorsementBbeneficiaryRnc,
                        valorEndoso = item.EndorsementAmount,
                        nombreContactoBeneficiarioEndoso = item.EndorsementContactName,
                        telefonoContactoBeneficiarioEndoso = item.EndorsementContactPhone,
                        correoContactoBeneficiarioEndoso = item.EndorsementContactEmail,
                        sexoEdad = pSexoEdad,
                        porciendoCobertura = "100",
                        kilomatraje = kilometraje,
                        porcientoRecargoVentas = 0,
                        licenciaExtranjera = licenciaExtranjera,
                        montoProrrata = item.ProratedPremium,
                        secuenciaMov = SecuenciaMov
                    };

                    //Endosatario
                    if (HasEndorsement)
                    {
                        var GetCotizacionEndosoCesionResult = oSFPolicyServiceClient.GetCotizacionEndosoCesion(item.EndorsementBbeneficiaryRnc);

                        if (!string.IsNullOrEmpty(GetCotizacionEndosoCesionResult.JSONResult) ||
                            GetCotizacionEndosoCesionResult.JSONResult != null ||
                            GetCotizacionEndosoCesionResult.JSONResult != "[]" ||
                            GetCotizacionEndosoCesionResult.JSONResult.ToLower() != "null")
                        {
                            var dataEndorsementSysFlex = Utility.deserializeJSON<Utility.EndorsementSysFlex>(GetCotizacionEndosoCesionResult.JSONResult);
                            if (dataEndorsementSysFlex != null)
                                oSFPolicyServiceClient.CotizacionEndosoCesion((byte)vCompañia, Cotizacion, itemsCoverage, dataEndorsementSysFlex.Codigo, item.EndorsementBeneficiary, item.EndorsementAmount, UserCodeName);
                        }
                    }

                    var resultSetInlcusion = oSFPolicyServiceClient.SetInclusion(itemInclusion);

                    var OldValue = "{}";
                    var resultString = resultSetInlcusion.JSONResult.Replace(OldValue, "0");
                    var DataInsertVehicle = Utility.deserializeJSON<List<Utility.inclusionResult>>(resultString);
                    var lcoveragesids = new List<Tuple<int, int, string>>(0);

                    //Borrar cobertras
                    var deleteAllCoverages = oSFPolicyServiceClient.DeletePolizaCoberturaMovInlcusion(vCompañia, Cotizacion, DataInsertVehicle.FirstOrDefault().Secuencia, null, SecuenciaMov);

                    hasError = (ErrorCode.Contains(deleteAllCoverages.Code) || deleteAllCoverages == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", deleteAllCoverages.Message));
                    //

                    //Coberturas
                    foreach (Policy.VehicleCoverage vehicleItem in DataCoverage)
                    {
                        //1 servicios 
                        var indicador = vehicleItem.CoverageTypeId == 3 ? 1 : 0;

                        var dataCoverage = getSysFlexDataCoverage(vRamo, quotationAmmount.SubRamo, item.VehicleValue.GetValueOrDefault(), indicador);
                        var CoverageId = 0;
                        var Desc = vehicleItem.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                        var dataCoverageSysflex = dataCoverage.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                        if (dataCoverageSysflex.Any())
                            CoverageId = dataCoverageSysflex.FirstOrDefault().Secuencia;

                        if (CoverageId > 0)
                        {
                            var resultCobertura = oSFPolicyServiceClient.SetPolizaCoberturaMov(new PolicyinclusionvehicleCoverageparameter
                            {
                                compania = vCompañia,
                                cotizacion = Cotizacion,
                                coaseguro = vehicleItem.CoinsurancePercentage,
                                deducible = vehicleItem.DeductiblePercentage,
                                minDeducible = vehicleItem.DeductibleAmount,
                                prima = vehicleItem.UnitaryPrice,
                                tasa = vehicleItem.PremiumPercentage,
                                limite = vehicleItem.CoverageLimit.Value.Truncate().ToString(CultureInfo.InvariantCulture),
                                secuencia = CoverageId,
                                secuenciaCot = DataInsertVehicle.FirstOrDefault().Secuencia,
                                secuenciaMov = SecuenciaMov
                            });

                            lcoveragesids.Add(new Tuple<int, int, string>(CoverageId, vehicleItem.CoverageId, vehicleItem.CoverageDesc));
                        }
                        else
                        {
                            throw
                                new Exception(string.Format("{0} {1}", GenericMessage, string.Concat(" la cobertura \"", vehicleItem.CoverageDesc, "\" no existe en SysFlex")));
                        }

                    }

                    //Esto se hara porque si tiene servicios debe que recalcular la tarifa 
                    oSFPolicyServiceClient.SetInclusion(itemInclusion);

                    /*Reaseguro*/
                    var setReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle.Code) || setReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle.Code) || setCoverageReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle.Message));

                    //Llamar el proceso de guardar el Facultativo
                    SetFacultativeProduct(corpId,
                                          regionId,
                                          countryId,
                                          domesticRegId,
                                          stateProvId,
                                          cityId,
                                          officeId,
                                          caseSeqNo,
                                          histSeqNo,
                                          lcoveragesids,
                                          item.VehicleUniqueId,
                                          item.AppliesToReinsurance,
                                          item.ReinsuranceAmount,
                                          ErrorCode,
                                          vCompañia,
                                          Cotizacion,
                                          itemsCoverage,
                                          UserCodeName,
                                          Utility.RequestType.Inclusion,
                                          SecuenciaMov
                                          );


                    /*Reaseguro*/
                    var setReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle2.Code) || setReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle2.Code) || setCoverageReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle2.Message));


                    qtyVehicles++;
                }
                #endregion
                //Emitir la poliza con los acuerdos   
                try
                {

                    var TaxAmount = (AnnualPremium * TasaCalc);
                    var InvoiceTotalIncludingTax = AnnualPremium + (AnnualPremium * TasaCalc);

                    var CallGpMethod = (dataConfig.FirstOrDefault(u => u.Namekey == "CallGpMethodFromEmition").ConfigurationValue == "1");

                    if (CallGpMethod)
                    {
                        #region Llamar el metodo GetNCFandInvoiceNumber de GP
                        var NCFandInvoiceNumberResult = oSFPolicyServiceClient.GetNCFandInvoiceNumber(PolicyData.PolicyNoMain, DateTime.Now, InvoiceTotalIncludingTax, TaxAmount);

                        hasError = (ErrorCode.Contains(NCFandInvoiceNumberResult.Code) || NCFandInvoiceNumberResult == null);

                        if (hasError)
                            throw new Exception(string.Concat(GenericMessage, ",", NCFandInvoiceNumberResult.Message));

                        if (!string.IsNullOrEmpty(NCFandInvoiceNumberResult.JSONResult) || NCFandInvoiceNumberResult.JSONResult != null || NCFandInvoiceNumberResult.JSONResult != "[]")
                        {
                            var dNCFandInvoiceNumberResult = Utility.deserializeJSON<Utility.GPResultGeNextNCF>(NCFandInvoiceNumberResult.JSONResult);

                            if (dNCFandInvoiceNumberResult.Successful)
                            {

                                var ResultFactSinGp = oSFPolicyServiceClient.FacturacionMovimientoSinGP(vCompañia,
                                                                                                        Cotizacion,
                                                                                                        SecuenciaMov,
                                                                                                        UserCodeName,
                                                                                                        1,
                                                                                                        "",
                                                                                                        1,
                                                                                                        dNCFandInvoiceNumberResult.NCFNumber,
                                                                                                        dNCFandInvoiceNumberResult.InvoiceNumber,
                                                                                                        dNCFandInvoiceNumberResult.Error,
                                                                                                        false
                                                                                                       );

                                hasError = (ErrorCode.Contains(ResultFactSinGp.Code) || ResultFactSinGp == null);

                                if (hasError)
                                    HasErrorOnEmitionInvoice = true;
                            }
                            else
                                HasErrorOnEmitionInvoice = true;
                        }

                        #endregion
                    }
                    else
                    {
                        #region Metodo de facturacion con GP
                        ResultFacturacion = oSFPolicyServiceClient.SetMotionBillingVehicle(vCompañia,
                                                                                           Cotizacion,
                                                                                           SecuenciaMov,
                                                                                           UserCodeName,
                                                                                           1,
                                                                                           "",
                                                                                           1
                                                                                           );

                        HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");
                        #endregion
                    }
                }
                catch (Exception)
                {
                    HasErrorOnEmitionInvoice = true;
                }

                Payment.Agreement dataResultPaymentAgreement = null;

                //Buscar la data del acuerdo de pago  en global
                dataResultPaymentAgreement = this.oPaymentManager.GetPaymentAgreement(new Entity.UnderWriting.Entities.Payment.Agreement
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo
                });

                if (!HasErrorOnEmitionInvoice)
                {
                    var PaymentsAgreementQty = 0;
                    var InitialPayment = 0M;

                    if (dataResultPaymentAgreement != null)
                    {
                        PaymentsAgreementQty = dataResultPaymentAgreement.PaymentsAgreementQty;
                        InitialPayment = dataResultPaymentAgreement.InitialPayment;
                    }

                    var item = new oSysFlexService.PolicyPaymentAgreementKey
                    {
                        compania = vCompañia,
                        usuario = UserName,
                        sistema = "New Business",
                        cantidadCuotas = PaymentsAgreementQty,
                        inicial = InitialPayment,
                        cotizacion = Cotizacion
                    };

                    //Guardar el acuerdo de pago en sysflex
                    var SetPaymentAgreementResult = oSFPolicyServiceClient.SetAcuerdoPagoMov(vCompañia,
                                                                                             Cotizacion,
                                                                                             InitialPayment,
                                                                                             PaymentsAgreementQty,
                                                                                             UserName,
                                                                                             "New Business",
                                                                                             SecuenciaMov
                                                                                             );

                    hasError = (ErrorCode.Contains(SetPaymentAgreementResult.Code));

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", SetPaymentAgreementResult.Message));



                    #region Flotilla
                    if (AllowDescuentoFlotilla && !string.IsNullOrEmpty(FlotillaDiscountRules) && qtyVehicles > 1)
                    {
                        var json = Utility.deserializeJSON<List<Utility.Percent_Flotilla_Discount>>(FlotillaDiscountRules);

                        foreach (var qty in json)
                        {
                            if (qtyVehicles >= qty.From && qtyVehicles <= qty.To)
                            {
                                porcDescuentoFlotilla = (qty.Porc * 100);
                            }
                        }

                        if (porcDescuentoFlotilla > 0)
                        {
                            try
                            {
                                /*Si hay descuento de flotilla procesar el de flotilla primero*/
                                decimal realDiscountFlotilla = (porcDescuentoFlotilla / 100);

                                /*Descuentos a Polizas Flotilla*/
                                PolicySysFlexPolizaDescuentoParameter paramDiscount = new PolicySysFlexPolizaDescuentoParameter();
                                paramDiscount.Compania = vCompañia;
                                paramDiscount.Sistema = "New Business";
                                paramDiscount.Usuario = "VO-" + UserName;

                                paramDiscount.Poliza = PolicyData.PolicyNoMain;
                                paramDiscount.ConceptoId = descuentoFlotillaIDSysflex;
                                paramDiscount.PorcDescuento = realDiscountFlotilla;

                                oSFPolicyServiceClient.SetPolizaDescuento(paramDiscount);
                            }
                            catch (Exception ex)
                            { }
                        }

                    }
                    #endregion



                    var SourceId = string.Empty;

                    PolicyNo = PolicyData.PolicyNo;

                    //Actualizar la poliza en global
                    UpdatePolicyByGlobal(corpId,
                                         regionId,
                                         countryId,
                                         domesticRegId,
                                         stateProvId,
                                         cityId,
                                         officeId,
                                         caseSeqNo,
                                         histSeqNo,
                                         QuotationNumber,
                                         Cotizacion.ToString(),
                                         PolicyNo,
                                         SourceId,
                                         BeginDate.GetValueOrDefault(),
                                         EndDate.GetValueOrDefault(),
                                         LoanNumber: null,
                                         Financed: false,
                                         requestType: Utility.RequestType.Inclusion
                                         );

                    //LLevar los archivos requeridos a onBase
                    if (vOnBaseAvailable)
                        GenerateOnBaseFiles(
                                       corpId,
                                       regionId,
                                       countryId,
                                       domesticRegId,
                                       stateProvId,
                                       cityId,
                                       officeId,
                                       caseSeqNo,
                                       histSeqNo,
                                       false,
                                       ServerMapPathXML,
                                       Financed: false,
                                       ErrorCreateLoanKCO: false,
                                       LoanNumber: null,
                                       RepresentanteLegal: ContactData.ManagerName
                                      );
                }


            }
            catch (Exception ex)
            {
                throw ex;
            }

            return new Tuple<string, string, bool>(PolicyNo, Quotation, HasErrorOnEmitionInvoice);
        }


        public Tuple<String, String, Boolean> SendQuotInclusionDeclarativaSysflex(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, string QuotationNumber, out string VehiclesIncluded, string ServerMapPathXML = null)
        {
            VehiclesIncluded = string.Empty;
            oSysFlexService.SetMotionBillingResult ResultFacturacion = null;
            var HasErrorOnEmitionInvoice = false;
            var ErrorCreateLoanKCO = false;
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            string vEnabledChassisOrPlateValidationKey = string.Empty;
            bool vEnabledChassisOrPlateValidation;
            string UserCodeName = "VO-" + this.UserName;
            var PolicyNo = string.Empty;
            var HasFactultative = false;
            var Quotation = string.Empty;
            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);

                vEnabledChassisOrPlateValidationKey = ConfigurationManager.AppSettings["EnabledChassisOrPlateValidation"];
                bool.TryParse(vEnabledChassisOrPlateValidationKey, out vEnabledChassisOrPlateValidation);
            }
            catch (Exception)
            {
                vOnBaseAvailable = false;
                vEnabledChassisOrPlateValidation = false;
            }

            try
            {
                DateTime? BeginDate = null;
                DateTime? EndDate = null;
                var vCompañia = 30; //Atlantica Seguros 
                var vRamo = 106;//

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                PolicyNo = PolicyData.PolicyNoMain;
                Quotation = PolicyData.PolicyNo;

                //Validar si a la poliza en cuestion se le puede hacer una inclusión
                var CanPolicyMoveResult = oSFPolicyServiceClient.GetCanPolicyMove(PolicyNo);
                if (CanPolicyMoveResult.Code == "000")
                {
                    if (!string.IsNullOrEmpty(CanPolicyMoveResult.JSONResult))
                    {
                        var canMovement = CanPolicyMoveResult.JSONResult == "true";

                        if (!canMovement)
                        {
                            var mensaje = string.Format("A la poliza \"{0}\" no se le pueden hacer movimientos ya que la misma esta en transito", PolicyNo);
                            throw new Exception(mensaje);
                        }
                    }
                }
                else
                    throw new Exception(CanPolicyMoveResult.Message);

                var IllustrationData = getillustrationData();

                //Objeto de la data del Contacto
                var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

                //Validar el contacto
                if (ContactData == null)
                    throw new Exception(Resources.QuotationDontHasContact);

                oSysFlexService.UtilityGender Sexo;

                switch (ContactData.Gender)
                {
                    case "M":
                        Sexo = oSysFlexService.UtilityGender.Masculino; break;
                    case "F":
                        Sexo = oSysFlexService.UtilityGender.Femenino; break;
                    default:
                        Sexo = oSysFlexService.UtilityGender.Empresa; break;
                }

                //Data de los Vehiculos
                var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    UnderwriterId = Agent_LoginId,
                    LanguageId = Language.ToInt(),
                    UserId = this.UserID
                });

                #region validacion de Placa y Chasis
                var MessageError = string.Empty;
                var ListError = new StringBuilder();

                if (vEnabledChassisOrPlateValidation)
                {
                    foreach (var itemVehicle in dataVehicle)
                    {
                        var JSONResult = oSFPolicyServiceClient.CheckChassisOrRegistry(new oSysFlexService.PolicyVehicleKey
                        {
                            Chassis = itemVehicle.Chassis,
                            Registry = itemVehicle.Registry
                        }).JSONResult;

                        if (JSONResult == null)
                            JSONResult = "[]";

                        var OldValue = "{}";
                        var resultString = JSONResult.Replace(OldValue, "0");

                        //Verificar si el o los vehiculos de esta poliza no esta ya registrado en sysflex
                        var dataResult = Utility.deserializeJSON<IEnumerable<Utility.VehicleIdentification>>(resultString);

                        if (dataResult.Any())
                        {
                            foreach (var item in dataResult)
                            {
                                MessageError = (item.Type == "Placa") ? string.Format(Resources.PlateValidation, item.Value.ToUpper(), item.Policy)
                                                                      : string.Format(Resources.ChassisValidation, item.Value.ToUpper(), item.Policy);

                                ListError.Append(MessageError);
                            }

                            ListError.Insert(0, Resources.ChassisOrPlateValidation);
                        }

                        MessageError = string.Empty;
                    }

                }

                #region Facultativo
                foreach (var itemVehicle in dataVehicle)
                {
                    /*Facultativo Si Aplica*/
                    bool applyReinsu = itemVehicle.AppliesToReinsurance.HasValue ? itemVehicle.AppliesToReinsurance.Value
                                                                                 : false;

                    decimal reinsuAmo = itemVehicle.ReinsuranceAmount.HasValue ? itemVehicle.ReinsuranceAmount.Value
                                                                               : 0;

                    if (applyReinsu && reinsuAmo > 0)
                    {
                        DataTable dtFacultativeContractCoverage = oPolicyManager.GetFacultativeContractCoverage(new Policy.Facultative.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                            UniqueId = itemVehicle.VehicleUniqueId
                        });

                        if (dtFacultativeContractCoverage == null || dtFacultativeContractCoverage.Rows.Count == 0)
                            ListError.Append(Resources.FacultativeMissging);
                        else
                            HasFactultative = true;
                    }
                }
                #endregion


                if (ListError.Length > 0)
                {
                    Exception ex = new Exception(ListError.ToString());
                    ex.Source = "I";
                    throw ex;
                }

                if (HasFactultative)
                {
                    var resultValidationContractName = ExisteNombreContratoEnSysFlex();

                    if (resultValidationContractName.Item1)
                        throw new Exception(resultValidationContractName.Item2);
                }

                #endregion

                var TasaCalc = (PolicyData.TaxPercentage.GetValueOrDefault() / 100);

                if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                    TasaCalc = 0;

                var itemsCoverage = 0;
                var dCotizacion = oSFPolicyServiceClient.GetVehiculosFromPoliza(PolicyData.PolicyNoMain);
                long Cotizacion = 0;

                if (!string.IsNullOrEmpty(dCotizacion.JSONResult) && dCotizacion.JSONResult != "[]")
                {
                    var OldValue = "{}";
                    var resultString = dCotizacion.JSONResult.Replace(OldValue, "0");

                    var dataCotizacion = Utility.deserializeJSON<List<Utility.VehicleInclusion>>(resultString);
                    var oCotizacion = dataCotizacion.FirstOrDefault();
                    Cotizacion = oCotizacion.Cotizacion;
                    itemsCoverage = dataCotizacion.Max(v => v.Item.GetValueOrDefault());
                }

                var AnnualPremium = IllustrationData.ProratedPremium.GetValueOrDefault();
                var SecuenciaMov = -1;

                //Crear la encabezado del movimiento
                var ResultPolizaHeaderMov = oSFPolicyServiceClient.SetPolizaHeaderMov(Cotizacion, 58, AnnualPremium, UserCodeName);
                if (!string.IsNullOrEmpty(ResultPolizaHeaderMov.JSONResult) && ResultPolizaHeaderMov.JSONResult != "[]")
                {
                    var dPolizaHeaderMov = Utility.deserializeJSON<Utility.itemSecuenciaMov>(ResultPolizaHeaderMov.JSONResult);
                    SecuenciaMov = dPolizaHeaderMov.SecuenciaMov;
                }

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                #region Insertar vehiculos y coberturas
                foreach (var item in dataVehicle)
                {
                    var HasEndorsement = !string.IsNullOrEmpty(item.EndorsementBeneficiary);
                    itemsCoverage++;

                    var ReviewDataInspection = oVehicleManager.GetVehicleReview(new Vehicle
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        InsuredVehicleId = item.InsuredVehicleId
                    });

                    var kilometraje = 0;
                    var Version = "N/A";

                    if (ReviewDataInspection.Any())
                    {
                        var oDataReview = ReviewDataInspection.FirstOrDefault();
                        kilometraje = oDataReview.Odometer.GetValueOrDefault();
                        Version = oDataReview.VersionDesc;
                    }

                    Utility.rateJsonSysFlex rateJsonSysFlex;
                    var IdMarcavehiculo = string.Empty;
                    var IdUsovehiculo = string.Empty;
                    var Idtipoveh = string.Empty;
                    var IdAniovehiculo = string.Empty;
                    var IdDeductible = string.Empty;
                    var IdStorage = string.Empty;
                    var IdModeloVehiculo = string.Empty;
                    var IdCapacidad = string.Empty;
                    var Capacidad = string.Empty;
                    decimal PorcientoRecargoVentas = 0m;
                    bool licenciaExtranjera = false;

                    var IdTipoCombustible = string.Empty;
                    var TipoCombustible = string.Empty;

                    if (!string.IsNullOrEmpty(item.rateJsonSysflex))
                    {
                        rateJsonSysFlex = Utility.deserializeJSON<Utility.rateJsonSysFlex>(item.rateJsonSysflex.Replace("[", "").Replace("]", ""));
                        IdMarcavehiculo = rateJsonSysFlex.idMarcaVehiculo.ToString();
                        IdUsovehiculo = rateJsonSysFlex.idUso.ToString();
                        Idtipoveh = rateJsonSysFlex.idTipoVehiculo.ToString();
                        IdAniovehiculo = rateJsonSysFlex.idAnoVehiculo.ToString();
                        IdDeductible = rateJsonSysFlex.iddeducible.ToString();
                        IdStorage = rateJsonSysFlex.idEstacionaEn.ToString();
                        IdModeloVehiculo = rateJsonSysFlex.idModeloVehiculo.ToString();
                        IdCapacidad = rateJsonSysFlex.idCapacidad.ToString();
                        Capacidad = rateJsonSysFlex.capacidad;
                        PorcientoRecargoVentas = rateJsonSysFlex.PorcientoRecargoVentas;
                        licenciaExtranjera = rateJsonSysFlex.licenciaExtranjera;

                        IdTipoCombustible = rateJsonSysFlex.idTipoCombustible.ToString();
                        TipoCombustible = rateJsonSysFlex.tipoCombustible;
                    }

                    //Crear coberturas
                    //Data Coverturas
                    var DataCoverage = oPolicyManager.GetVehicleCoverage(new Policy.VehicleCoverageGet
                    {
                        CorpId = corpId,
                        VehicleUniqueId = item.VehicleUniqueId
                    });

                    Utility.QuotationAmmount quotationAmmount = GetQuotationAmmounts(caseSeqNo,
                                                                                     cityId,
                                                                                     corpId,
                                                                                     countryId,
                                                                                     domesticRegId,
                                                                                     histSeqNo,
                                                                                     officeId,
                                                                                     regionId,
                                                                                     stateProvId,
                                                                                     item.InsuredVehicleId,
                                                                                     item.VehicleTypeId,
                                                                                     item.VehicleUniqueId,
                                                                                     DataCoverage
                                                                                     );

                    var Edad = Utility.GetAge(ContactData.Dob.GetValueOrDefault()).ToString();

                    var pSexoEdad = string.Empty;

                    if (!ContactData.IsCompany)
                    {
                        pSexoEdad = oSFPolicyServiceClient.GetSexoEdadProducto(new oSysFlexService.PolicySexoEdadKeyParameter
                        {
                            subramo = quotationAmmount.SubRamo,
                            RamoID = vRamo,
                            Edad = Edad,
                            Sexo = Sexo.ToString()
                        });
                    }

                    var QtyMonth = Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Month, BeginDate.GetValueOrDefault(), EndDate.GetValueOrDefault());
                    var pMontoImpuesto = AnnualPremium * TasaCalc;
                    var pPrimaNeta = AnnualPremium + pMontoImpuesto;

                    var VehicleDesc = string.Concat(item.MakeDesc, " ", item.ModelDesc, " ", item.Year.ToString());
                    VehiclesIncluded += string.Concat(".-", VehicleDesc + "<br>");

                    var itemInclusion = new PolicyinclusionvehicleDetailMovparameter
                    {
                        compania = vCompañia,
                        cotizacion = (decimal)Cotizacion,
                        ramo = vRamo,
                        subRamo = quotationAmmount.SubRamo,
                        secuencia = itemsCoverage,
                        tipoVehiculo = item.VehicleTypeDesc,
                        marcaVehiculo = item.MakeDesc,
                        modeloVehiculo = item.ModelDesc,
                        version = Version,
                        anoVehiculo = item.Year.ToString(),
                        chasis = item.Chassis,
                        placa = item.Registry.SIsNullOrEmpty() ? "-" : item.Registry.Replace("'", "`"),
                        color = item.ColorDesc,
                        capacidad = string.IsNullOrEmpty(item.CylindersTons) ?
                                                                               string.IsNullOrEmpty(Capacidad) ? "No especificado"
                                                                                                               : Capacidad
                                                                              : item.CylindersTons,
                        uso = item.UsageDesc,
                        estacionaEn = item.StoredDesc,
                        porcRecargo = quotationAmmount.PorcRecargo,
                        montoRecargo = quotationAmmount.MontoRecargo,
                        porcDescuento = quotationAmmount.PorcDescuento,
                        montoDescuento = quotationAmmount.MontoDescuento,
                        porcImpuesto = PolicyData.TaxPercentage.GetValueOrDefault(),
                        montoImpuesto = pMontoImpuesto,
                        renovacionAutomatica = string.Empty,
                        primaBruta = AnnualPremium,
                        neto = pPrimaNeta,
                        montoAsegurado = item.VehicleValue.HasValue ? (decimal)item.VehicleValue : 0,
                        fechaInicio = BeginDate,
                        fechaFin = EndDate,
                        cantidadMeses = (int)QtyMonth,
                        codigoTarifa = null,
                        usuario = UserCodeName,
                        estatus = "ACTIVO",
                        tasa = 1,
                        noFormulario = "",
                        formadePago = "",
                        idTipoVehiculo = Idtipoveh,
                        idMarcaVehiculo = IdMarcavehiculo,
                        idModeloVehiculo = IdModeloVehiculo,
                        idVersion = "",
                        idAnoVehiculo = IdAniovehiculo,
                        idColor = "",
                        idCapacidad = IdCapacidad,
                        idUso = IdUsovehiculo,
                        idEstacionaEn = IdStorage,
                        iddeducible = IdDeductible,
                        deducible = item.DeductiblePercentage.GetValueOrDefault().Truncate() + "%",
                        categoria = "4",
                        beneficiarioEndoso = HasEndorsement ? item.EndorsementBeneficiary.Replace("'", "`") : string.Empty,
                        rncBeneficiarioEndoso = item.EndorsementBbeneficiaryRnc,
                        valorEndoso = item.EndorsementAmount,
                        nombreContactoBeneficiarioEndoso = item.EndorsementContactName,
                        telefonoContactoBeneficiarioEndoso = item.EndorsementContactPhone,
                        correoContactoBeneficiarioEndoso = item.EndorsementContactEmail,
                        sexoEdad = pSexoEdad,
                        porciendoCobertura = "100",
                        kilomatraje = kilometraje,
                        porcientoRecargoVentas = 0,
                        licenciaExtranjera = licenciaExtranjera,
                        montoProrrata = item.ProratedPremium,
                        secuenciaMov = SecuenciaMov,
                        idTipoCombustible = IdTipoCombustible,
                        tipoCombustible = TipoCombustible
                    };

                    //Endosatario
                    if (HasEndorsement)
                    {
                        var GetCotizacionEndosoCesionResult = oSFPolicyServiceClient.GetCotizacionEndosoCesion(item.EndorsementBbeneficiaryRnc);

                        if (!string.IsNullOrEmpty(GetCotizacionEndosoCesionResult.JSONResult) ||
                            GetCotizacionEndosoCesionResult.JSONResult != null ||
                            GetCotizacionEndosoCesionResult.JSONResult != "[]" ||
                            GetCotizacionEndosoCesionResult.JSONResult.ToLower() != "null")
                        {
                            var dataEndorsementSysFlex = Utility.deserializeJSON<Utility.EndorsementSysFlex>(GetCotizacionEndosoCesionResult.JSONResult);
                            if (dataEndorsementSysFlex != null)
                                oSFPolicyServiceClient.CotizacionEndosoCesion((byte)vCompañia, Cotizacion, itemsCoverage, dataEndorsementSysFlex.Codigo, item.EndorsementBeneficiary, item.EndorsementAmount, UserCodeName);
                        }
                    }

                    var resultSetInlcusion = oSFPolicyServiceClient.SetInclusion(itemInclusion);

                    var OldValue = "{}";
                    var resultString = resultSetInlcusion.JSONResult.Replace(OldValue, "0");
                    var DataInsertVehicle = Utility.deserializeJSON<List<Utility.inclusionResult>>(resultString);
                    var lcoveragesids = new List<Tuple<int, int, string>>(0);

                    //Borrar cobertras
                    var deleteAllCoverages = oSFPolicyServiceClient.DeletePolizaCoberturaMovInlcusion(vCompañia, Cotizacion, DataInsertVehicle.FirstOrDefault().Secuencia, null, SecuenciaMov);

                    hasError = (ErrorCode.Contains(deleteAllCoverages.Code) || deleteAllCoverages == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", deleteAllCoverages.Message));
                    //

                    //Coberturas
                    foreach (Policy.VehicleCoverage vehicleItem in DataCoverage)
                    {
                        //1 servicios 
                        var indicador = vehicleItem.CoverageTypeId == 3 ? 1 : 0;

                        var dataCoverage = getSysFlexDataCoverage(vRamo, quotationAmmount.SubRamo, item.VehicleValue.GetValueOrDefault(), indicador);
                        var CoverageId = 0;
                        var Desc = vehicleItem.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                        var dataCoverageSysflex = dataCoverage.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                        if (dataCoverageSysflex.Any())
                            CoverageId = dataCoverageSysflex.FirstOrDefault().Secuencia;

                        if (CoverageId > 0)
                        {
                            var resultCobertura = oSFPolicyServiceClient.SetPolizaCoberturaMov(new PolicyinclusionvehicleCoverageparameter
                            {
                                compania = vCompañia,
                                cotizacion = Cotizacion,
                                coaseguro = vehicleItem.CoinsurancePercentage,
                                deducible = vehicleItem.DeductiblePercentage,
                                minDeducible = vehicleItem.DeductibleAmount,
                                prima = vehicleItem.UnitaryPrice,
                                tasa = vehicleItem.PremiumPercentage,
                                limite = vehicleItem.CoverageLimit.Value.Truncate().ToString(CultureInfo.InvariantCulture),
                                secuencia = CoverageId,
                                secuenciaCot = DataInsertVehicle.FirstOrDefault().Secuencia,
                                secuenciaMov = SecuenciaMov
                            });

                            lcoveragesids.Add(new Tuple<int, int, string>(CoverageId, vehicleItem.CoverageId, vehicleItem.CoverageDesc));
                        }
                        else
                        {
                            throw
                                new Exception(string.Format("{0} {1}", GenericMessage, string.Concat(" la cobertura \"", vehicleItem.CoverageDesc, "\" no existe en SysFlex")));
                        }

                    }

                    //Esto se hara porque si tiene servicios debe que recalcular la tarifa 
                    oSFPolicyServiceClient.SetInclusion(itemInclusion);

                    /*Reaseguro*/
                    var setReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle.Code) || setReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle.Code) || setCoverageReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle.Message));

                    //Llamar el proceso de guardar el Facultativo
                    SetFacultativeProduct(corpId,
                                          regionId,
                                          countryId,
                                          domesticRegId,
                                          stateProvId,
                                          cityId,
                                          officeId,
                                          caseSeqNo,
                                          histSeqNo,
                                          lcoveragesids,
                                          item.VehicleUniqueId,
                                          item.AppliesToReinsurance,
                                          item.ReinsuranceAmount,
                                          ErrorCode,
                                          vCompañia,
                                          Cotizacion,
                                          itemsCoverage,
                                          UserCodeName,
                                          Utility.RequestType.InclusionDeclarativa,
                                          SecuenciaMov
                                          );


                    /*Reaseguro*/
                    var setReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle2.Code) || setReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle2.Code) || setCoverageReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle2.Message));
                }
                #endregion
                //Emitir la poliza con los acuerdos   
                try
                {

                    var TaxAmount = (AnnualPremium * TasaCalc);
                    var InvoiceTotalIncludingTax = AnnualPremium + (AnnualPremium * TasaCalc);

                    var CallGpMethod = (dataConfig.FirstOrDefault(u => u.Namekey == "CallGpMethodFromEmition").ConfigurationValue == "1");

                    if (CallGpMethod)
                    {
                        #region Llamar el metodo GetNCFandInvoiceNumber de GP
                        //var NCFandInvoiceNumberResult = oSFPolicyServiceClient.GetNCFandInvoiceNumber(PolicyData.PolicyNoMain, DateTime.Now, InvoiceTotalIncludingTax, TaxAmount);

                        //hasError = (ErrorCode.Contains(NCFandInvoiceNumberResult.Code) || NCFandInvoiceNumberResult == null);

                        //if (hasError)
                        //    throw new Exception(string.Concat(GenericMessage, ",", NCFandInvoiceNumberResult.Message));

                        //if (!string.IsNullOrEmpty(NCFandInvoiceNumberResult.JSONResult) || NCFandInvoiceNumberResult.JSONResult != null || NCFandInvoiceNumberResult.JSONResult != "[]")
                        //{
                        //var dNCFandInvoiceNumberResult = Utility.deserializeJSON<Utility.GPResultGeNextNCF>(NCFandInvoiceNumberResult.JSONResult);

                        //if (dNCFandInvoiceNumberResult.Successful)
                        //{

                        var ResultFactSinGp = oSFPolicyServiceClient.FacturacionMovimientoSinGP(vCompañia,
                                                                                                Cotizacion,
                                                                                                SecuenciaMov,
                                                                                                UserCodeName,
                                                                                                1,
                                                                                                "",
                                                                                                1,
                                                                                                null, //dNCFandInvoiceNumberResult.NCFNumber,
                                                                                                null, //dNCFandInvoiceNumberResult.InvoiceNumber,
                                                                                                null, //dNCFandInvoiceNumberResult.Error,
                                                                                                false
                                                                                               );

                        hasError = (ErrorCode.Contains(ResultFactSinGp.Code) || ResultFactSinGp == null);

                        if (hasError)
                            HasErrorOnEmitionInvoice = true;
                        //}
                        //else
                        //    HasErrorOnEmitionInvoice = true;
                        //}

                        #endregion
                    }
                    else
                    {
                        #region Metodo de facturacion con GP
                        ResultFacturacion = oSFPolicyServiceClient.SetMotionBillingVehicle(vCompañia,
                                                                                           Cotizacion,
                                                                                           SecuenciaMov,
                                                                                           UserCodeName,
                                                                                           1,
                                                                                           "",
                                                                                           1
                                                                                           );

                        HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");
                        #endregion
                    }
                }
                catch (Exception)
                {
                    HasErrorOnEmitionInvoice = true;
                }

                Payment.Agreement dataResultPaymentAgreement = null;

                //Buscar la data del acuerdo de pago  en global
                dataResultPaymentAgreement = this.oPaymentManager.GetPaymentAgreement(new Entity.UnderWriting.Entities.Payment.Agreement
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo
                });

                if (!HasErrorOnEmitionInvoice)
                {
                    var PaymentsAgreementQty = 0;
                    var InitialPayment = 0M;

                    if (dataResultPaymentAgreement != null)
                    {
                        PaymentsAgreementQty = dataResultPaymentAgreement.PaymentsAgreementQty;
                        InitialPayment = dataResultPaymentAgreement.InitialPayment;
                    }

                    var item = new oSysFlexService.PolicyPaymentAgreementKey
                    {
                        compania = vCompañia,
                        usuario = UserName,
                        sistema = "New Business",
                        cantidadCuotas = PaymentsAgreementQty,
                        inicial = InitialPayment,
                        cotizacion = Cotizacion
                    };

                    //Guardar el acuerdo de pago en sysflex
                    var SetPaymentAgreementResult = oSFPolicyServiceClient.SetAcuerdoPagoMov(vCompañia,
                                                                                             Cotizacion,
                                                                                             InitialPayment,
                                                                                             PaymentsAgreementQty,
                                                                                             UserName,
                                                                                             "New Business",
                                                                                             SecuenciaMov
                                                                                             );

                    hasError = (ErrorCode.Contains(SetPaymentAgreementResult.Code));

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", SetPaymentAgreementResult.Message));

                    var SourceId = string.Empty;

                    PolicyNo = PolicyData.PolicyNo;

                    //Actualizar la poliza en global
                    UpdatePolicyByGlobal(corpId,
                                         regionId,
                                         countryId,
                                         domesticRegId,
                                         stateProvId,
                                         cityId,
                                         officeId,
                                         caseSeqNo,
                                         histSeqNo,
                                         QuotationNumber,
                                         Cotizacion.ToString(),
                                         PolicyNo,
                                         SourceId,
                                         BeginDate.GetValueOrDefault(),
                                         EndDate.GetValueOrDefault(),
                                         LoanNumber: null,
                                         Financed: false,
                                         requestType: Utility.RequestType.InclusionDeclarativa
                                         );

                    //LLevar los archivos requeridos a onBase
                    if (vOnBaseAvailable)
                        GenerateOnBaseFiles(
                                       corpId,
                                       regionId,
                                       countryId,
                                       domesticRegId,
                                       stateProvId,
                                       cityId,
                                       officeId,
                                       caseSeqNo,
                                       histSeqNo,
                                       false,
                                       ServerMapPathXML,
                                       Financed: false,
                                       ErrorCreateLoanKCO: false,
                                       LoanNumber: null,
                                       RepresentanteLegal: ContactData.ManagerName
                                      );
                }


            }
            catch (Exception ex)
            {
                throw ex;
            }

            return new Tuple<string, string, bool>(PolicyNo, Quotation, HasErrorOnEmitionInvoice);
        }


        /// <summary>
        /// Inclusion de vehiculos en poliza existente
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="isQuotation"></param>
        /// <param name="QuotationNumber"></param>
        /// <param name="ServerMapPathXML"></param>
        public Tuple<String, String, Boolean> SendQuotRequestChanceSysflex(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, string QuotationNumber, out string VehiclesExcluded, string ServerMapPathXML = null)
        {
            VehiclesExcluded = string.Empty;
            oSysFlexService.SetMotionBillingResult ResultFacturacion = null;
            var HasErrorOnEmitionInvoice = false;
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            string vEnabledChassisOrPlateValidationKey = string.Empty;
            string UserCodeName = "VO-" + this.UserName;
            var PolicyNo = string.Empty;
            var Quotation = string.Empty;
            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);
            }
            catch (Exception)
            {
                vOnBaseAvailable = false;
            }

            try
            {
                DateTime? BeginDate = null;
                DateTime? EndDate = null;
                var vCompañia = 30; //Atlantica Seguros

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                PolicyNo = PolicyData.PolicyNoMain;
                Quotation = PolicyData.PolicyNo;

                var TasaCalc = ((PolicyData.TaxPercentage.GetValueOrDefault() == 0 ? 16 : PolicyData.TaxPercentage.GetValueOrDefault()) / 100);

                //Validar si a la poliza en cuestion se le puede hacer una exclusion
                var CanPolicyMoveResult = oSFPolicyServiceClient.GetCanPolicyMove(PolicyNo);
                if (CanPolicyMoveResult.Code == "000")
                {
                    if (!string.IsNullOrEmpty(CanPolicyMoveResult.JSONResult))
                    {
                        var canMovement = CanPolicyMoveResult.JSONResult == "true";

                        if (!canMovement)
                        {
                            var mensaje = string.Format("A la poliza \"{0}\" no se le pueden hacer movimientos ya que la misma esta en transito", PolicyNo);
                            throw new Exception(mensaje);
                        }
                    }
                }
                else
                    throw new Exception(CanPolicyMoveResult.Message);

                var IllustrationData = getillustrationData();

                //Data de los Vehiculos
                var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    UnderwriterId = Agent_LoginId,
                    LanguageId = Language.ToInt(),
                    UserId = this.UserID
                });

                var dCotizacion = oSFPolicyServiceClient.GetVehiculosFromPoliza(PolicyData.PolicyNoMain);
                long Cotizacion = 0;
                List<Utility.VehicleExclusion> dataCotizacion = new List<Utility.VehicleExclusion>();

                if (!string.IsNullOrEmpty(dCotizacion.JSONResult) && dCotizacion.JSONResult != "[]")
                {
                    var OldValue = "{}";
                    var resultString = dCotizacion.JSONResult.Replace(OldValue, "0");

                    dataCotizacion = Utility.deserializeJSON<List<Utility.VehicleExclusion>>(resultString);
                    var oCotizacion = dataCotizacion.FirstOrDefault();
                    Cotizacion = oCotizacion.Cotizacion;
                }

                var AnnualPremium = IllustrationData.ProratedPremium.GetValueOrDefault();
                var SecuenciaMov = -1;

                //Crear la encabezado del movimiento              

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                List<string> vehicleSecuences = new List<string>();
                var DataChange = oVehicleManager.GetVehicleRequestChange(PolicyData.PolicyNoMain, null).ToList();

                #region Insertar vehiculos y coberturas
                foreach (var item in dataVehicle)
                {
                    var VehicleDesc = string.Concat(item.MakeDesc, " ", item.ModelDesc, " ", item.Year.ToString());
                    VehiclesExcluded += string.Concat(".-", VehicleDesc + "<br>");
                }
                string realSecuences = "";
                if (DataChange.Count > 0)
                {
                    realSecuences = DataChange[0].Vehicle_Secuence.ToString();
                }

                var exclusion = oSFPolicyServiceClient.SetMoviminentoPolizaExclusion(vCompañia, PolicyNo, Cotizacion, realSecuences, 30, UserCodeName, PolicyData.OfficeId, BeginDate);

                hasError = (ErrorCode.Contains(exclusion.Code) || exclusion == null);

                if (hasError)
                {
                    throw new Exception(string.Concat(GenericMessage, ",", exclusion.Message));
                }

                if (!string.IsNullOrEmpty(exclusion.JSONResult) || exclusion.JSONResult != null || exclusion.JSONResult != "[]")
                {
                    var OldValue = "{}";
                    var resultString = exclusion.JSONResult.Replace(OldValue, "0");

                    var jsonresult = Utility.deserializeJSON<Utility.ExclusionResult>(resultString);

                    SecuenciaMov = jsonresult.SecuenciaMov;
                }


                if (DataChange.Count > 0)
                {
                    foreach (var item in DataChange)
                    {
                        if (item.Condition_Id == Utility.ChangeConditionCatalog.Color.ToInt())
                        {
                            if (item.New_Value != item.Old_Value)
                                oSFPolicyServiceClient.SetVehicleConditionChange(vCompañia, Cotizacion, item.Vehicle_Secuence, Utility.ChangeConditionCatalog.Color.ToInt(), SecuenciaMov, item.New_Value, 0, 0);
                        }
                        else if (item.Condition_Id == Utility.ChangeConditionCatalog.Chasis.ToInt())
                        {
                            if (item.New_Value != item.Old_Value)
                                oSFPolicyServiceClient.SetVehicleConditionChange(vCompañia, Cotizacion, item.Vehicle_Secuence, Utility.ChangeConditionCatalog.Chasis.ToInt(), SecuenciaMov, item.New_Value, 0, 0);
                        }
                        else if (item.Condition_Id == Utility.ChangeConditionCatalog.NoRegistro.ToInt())
                        {
                            if (item.New_Value != item.Old_Value)
                                oSFPolicyServiceClient.SetVehicleConditionChange(vCompañia, Cotizacion, item.Vehicle_Secuence, Utility.ChangeConditionCatalog.NoRegistro.ToInt(), SecuenciaMov, item.New_Value, 0, 0);
                        }
                    }
                }
                #endregion

                //Hacer la factura  
                try
                {
                    var TaxAmount = (AnnualPremium * TasaCalc);
                    var InvoiceTotalIncludingTax = AnnualPremium + (AnnualPremium * TasaCalc);

                    var CallGpMethod = (dataConfig.FirstOrDefault(u => u.Namekey == "CallGpMethodFromEmition").ConfigurationValue == "1");

                    if (CallGpMethod)
                    {
                        #region Llamar el metodo GetNCFandCreditNumber de GP

                        var ResultFactSinGp = oSFPolicyServiceClient.FacturacionMovimientoSinGP(vCompañia,
                                                                                                Cotizacion,
                                                                                                SecuenciaMov,
                                                                                                UserCodeName,
                                                                                                1,
                                                                                                "",
                                                                                                1,
                                                                                                string.Empty,//dcreditInvoiceResult.NCFNumber,
                                                                                                string.Empty,//dcreditInvoiceResult.CreditNumber,
                                                                                                string.Empty,//dcreditInvoiceResult.Error,
                                                                                                false
                                                                                               );

                        hasError = (ErrorCode.Contains(ResultFactSinGp.Code) || ResultFactSinGp == null);

                        if (hasError)
                            HasErrorOnEmitionInvoice = true;


                        #endregion
                    }
                    else
                    {
                        #region Metodo de facturacion con GP
                        ResultFacturacion = oSFPolicyServiceClient.SetMotionBillingVehicle(vCompañia,
                                                                                           Cotizacion,
                                                                                           SecuenciaMov,
                                                                                           UserCodeName,
                                                                                           1,
                                                                                           "",
                                                                                           1
                                                                                           );

                        HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");
                        #endregion
                    }
                }
                catch (Exception ex)
                {
                    HasErrorOnEmitionInvoice = true;
                }

                if (!HasErrorOnEmitionInvoice)
                {
                    var SourceId = string.Empty;
                    PolicyNo = PolicyData.PolicyNo;

                    //Actualizar la poliza en global
                    UpdatePolicyByGlobal(corpId,
                                         regionId,
                                         countryId,
                                         domesticRegId,
                                         stateProvId,
                                         cityId,
                                         officeId,
                                         caseSeqNo,
                                         histSeqNo,
                                         QuotationNumber,
                                         Cotizacion.ToString(),
                                         PolicyNo,
                                         SourceId,
                                         BeginDate.GetValueOrDefault(),
                                         EndDate.GetValueOrDefault(),
                                         LoanNumber: null,
                                         Financed: false,
                                         requestType: Utility.RequestType.Cambios
                                         );
                    PolicyNo = PolicyData.PolicyNoMain;

                    //LLevar los archivos requeridos a onBase
                    if (vOnBaseAvailable)
                        GenerateOnBaseFiles(
                                       corpId,
                                       regionId,
                                       countryId,
                                       domesticRegId,
                                       stateProvId,
                                       cityId,
                                       officeId,
                                       caseSeqNo,
                                       histSeqNo,
                                       false,
                                       ServerMapPathXML,
                                       Financed: false,
                                       ErrorCreateLoanKCO: false,
                                       LoanNumber: null
                                      );
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return new Tuple<string, string, bool>(PolicyNo, Quotation, HasErrorOnEmitionInvoice);
        }

        /// <summary>
        /// Exclusion de vehiculos en poliza existente
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="isQuotation"></param>
        /// <param name="QuotationNumber"></param>
        /// <param name="ServerMapPathXML"></param>
        public Tuple<String, String, Boolean> SendQuotExclusionSysflex(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, string QuotationNumber, out string VehiclesExcluded, string ServerMapPathXML = null)
        {
            VehiclesExcluded = string.Empty;
            oSysFlexService.SetMotionBillingResult ResultFacturacion = null;
            var HasErrorOnEmitionInvoice = false;
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            string vEnabledChassisOrPlateValidationKey = string.Empty;
            string UserCodeName = "VO-" + this.UserName;
            var PolicyNo = string.Empty;
            var Quotation = string.Empty;
            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);
            }
            catch (Exception)
            {
                vOnBaseAvailable = false;
            }

            try
            {
                DateTime? BeginDate = null;
                DateTime? EndDate = null;
                var vCompañia = 30; //Atlantica Seguros

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                PolicyNo = PolicyData.PolicyNoMain;
                Quotation = PolicyData.PolicyNo;

                var TasaCalc = ((PolicyData.TaxPercentage.GetValueOrDefault() == 0 ? 16 : PolicyData.TaxPercentage.GetValueOrDefault()) / 100);

                //Validar si a la poliza en cuestion se le puede hacer una exclusion
                var CanPolicyMoveResult = oSFPolicyServiceClient.GetCanPolicyMove(PolicyNo);
                if (CanPolicyMoveResult.Code == "000")
                {
                    if (!string.IsNullOrEmpty(CanPolicyMoveResult.JSONResult))
                    {
                        var canMovement = CanPolicyMoveResult.JSONResult == "true";

                        if (!canMovement)
                        {
                            var mensaje = string.Format("A la poliza \"{0}\" no se le pueden hacer movimientos ya que la misma esta en transito", PolicyNo);
                            throw new Exception(mensaje);
                        }
                    }
                }
                else
                    throw new Exception(CanPolicyMoveResult.Message);

                var IllustrationData = getillustrationData();

                //Data de los Vehiculos
                var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    UnderwriterId = Agent_LoginId,
                    LanguageId = Language.ToInt(),
                    UserId = this.UserID
                });

                var dCotizacion = oSFPolicyServiceClient.GetVehiculosFromPoliza(PolicyData.PolicyNoMain);
                long Cotizacion = 0;
                List<Utility.VehicleExclusion> dataCotizacion = new List<Utility.VehicleExclusion>();

                if (!string.IsNullOrEmpty(dCotizacion.JSONResult) && dCotizacion.JSONResult != "[]")
                {
                    var OldValue = "{}";
                    var resultString = dCotizacion.JSONResult.Replace(OldValue, "0");

                    dataCotizacion = Utility.deserializeJSON<List<Utility.VehicleExclusion>>(resultString);
                    var oCotizacion = dataCotizacion.FirstOrDefault();
                    Cotizacion = oCotizacion.Cotizacion;
                }

                var AnnualPremium = IllustrationData.ProratedPremium.GetValueOrDefault();
                var SecuenciaMov = -1;

                //Crear la encabezado del movimiento              

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                List<string> vehicleSecuences = new List<string>();

                #region Insertar vehiculos y coberturas
                foreach (var item in dataVehicle)
                {
                    var VehicleDesc = string.Concat(item.MakeDesc, " ", item.ModelDesc, " ", item.Year.ToString());
                    VehiclesExcluded += string.Concat(".-", VehicleDesc + "<br>");

                    var objVehicle = dataCotizacion.Where(x => x.chasis == item.Chassis).FirstOrDefault();
                    if (objVehicle != null)
                    {
                        vehicleSecuences.Add(objVehicle.Item.ToString());
                    }

                }

                string realSecuences = string.Join(",", vehicleSecuences.ToArray());

                var exclusion = oSFPolicyServiceClient.SetMoviminentoPolizaExclusion(vCompañia, PolicyNo, Cotizacion, realSecuences, 13, UserCodeName, PolicyData.OfficeId, BeginDate);

                hasError = (ErrorCode.Contains(exclusion.Code) || exclusion == null);

                if (hasError)
                {
                    throw new Exception(string.Concat(GenericMessage, ",", exclusion.Message));
                }

                if (!string.IsNullOrEmpty(exclusion.JSONResult) || exclusion.JSONResult != null || exclusion.JSONResult != "[]")
                {
                    var OldValue = "{}";
                    var resultString = exclusion.JSONResult.Replace(OldValue, "0");

                    var jsonresult = Utility.deserializeJSON<Utility.ExclusionResult>(resultString);

                    SecuenciaMov = jsonresult.SecuenciaMov;
                }

                #endregion

                //Hacer la factura  
                try
                {
                    var TaxAmount = (AnnualPremium * TasaCalc);
                    var InvoiceTotalIncludingTax = AnnualPremium + (AnnualPremium * TasaCalc);

                    var CallGpMethod = (dataConfig.FirstOrDefault(u => u.Namekey == "CallGpMethodFromEmition").ConfigurationValue == "1");

                    if (CallGpMethod)
                    {
                        #region Llamar el metodo GetNCFandCreditNumber de GP
                        var creditInvoiceResult = oSFPolicyServiceClient.GetNCFandCreditNumber(PolicyData.PolicyNoMain, DateTime.Now, InvoiceTotalIncludingTax, TaxAmount);
                        hasError = (ErrorCode.Contains(creditInvoiceResult.Code) || creditInvoiceResult == null);
                        if (hasError)
                        {
                            throw new Exception(string.Concat(GenericMessage, ",", creditInvoiceResult.Message));
                        }

                        if (!string.IsNullOrEmpty(creditInvoiceResult.JSONResult) || creditInvoiceResult.JSONResult != null || creditInvoiceResult.JSONResult != "[]")
                        {
                            var OldValue = "{}";
                            var resultString = creditInvoiceResult.JSONResult.Replace(OldValue, "0");

                            var dcreditInvoiceResult = Utility.deserializeJSON<Utility.GPResultGetNextCreditNCF>(resultString);

                            if (dcreditInvoiceResult.Successful)
                            {
                                var ResultFactSinGp = oSFPolicyServiceClient.FacturacionMovimientoSinGP(vCompañia,
                                                                                                        Cotizacion,
                                                                                                        SecuenciaMov,
                                                                                                        UserCodeName,
                                                                                                        1,
                                                                                                        "",
                                                                                                        1,
                                                                                                        dcreditInvoiceResult.NCFNumber,
                                                                                                        dcreditInvoiceResult.CreditNumber,
                                                                                                        dcreditInvoiceResult.Error,
                                                                                                        false
                                                                                                       );

                                hasError = (ErrorCode.Contains(ResultFactSinGp.Code) || ResultFactSinGp == null);

                                if (hasError)
                                    HasErrorOnEmitionInvoice = true;
                            }
                            else
                                HasErrorOnEmitionInvoice = true;
                        }

                        #endregion
                    }
                    else
                    {
                        #region Metodo de facturacion con GP
                        ResultFacturacion = oSFPolicyServiceClient.SetMotionBillingVehicle(vCompañia,
                                                                                           Cotizacion,
                                                                                           SecuenciaMov,
                                                                                           UserCodeName,
                                                                                           1,
                                                                                           "",
                                                                                           1
                                                                                           );

                        HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");
                        #endregion
                    }
                }
                catch (Exception ex)
                {
                    HasErrorOnEmitionInvoice = true;
                }

                if (!HasErrorOnEmitionInvoice)
                {
                    var SourceId = string.Empty;
                    PolicyNo = PolicyData.PolicyNo;

                    //Actualizar la poliza en global
                    UpdatePolicyByGlobal(corpId,
                                         regionId,
                                         countryId,
                                         domesticRegId,
                                         stateProvId,
                                         cityId,
                                         officeId,
                                         caseSeqNo,
                                         histSeqNo,
                                         QuotationNumber,
                                         Cotizacion.ToString(),
                                         PolicyNo,
                                         SourceId,
                                         BeginDate.GetValueOrDefault(),
                                         EndDate.GetValueOrDefault(),
                                         LoanNumber: null,
                                         Financed: false,
                                         requestType: Utility.RequestType.Exclusion
                                         );

                    //LLevar los archivos requeridos a onBase
                    if (vOnBaseAvailable)
                        GenerateOnBaseFiles(
                                       corpId,
                                       regionId,
                                       countryId,
                                       domesticRegId,
                                       stateProvId,
                                       cityId,
                                       officeId,
                                       caseSeqNo,
                                       histSeqNo,
                                       false,
                                       ServerMapPathXML,
                                       Financed: false,
                                       ErrorCreateLoanKCO: false,
                                       LoanNumber: null
                                      );
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return new Tuple<string, string, bool>(PolicyNo, Quotation, HasErrorOnEmitionInvoice);
        }

        /// <summary>
        /// Renovacion de vehiculos en poliza existente
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="isQuotation"></param>
        /// <param name="QuotationNumber"></param>
        /// <param name="ServerMapPathXML"></param>
        public Tuple<String, String, Boolean> SendQuotRenovacionSysflex(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, string QuotationNumber, out string VehiclesIncluded, string ServerMapPathXML = null)
        {
            VehiclesIncluded = string.Empty;
            oSysFlexService.SetMotionBillingResult ResultFacturacion = null;
            var HasErrorOnEmitionInvoice = false;
            var ErrorCreateLoanKCO = false;
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            string vEnabledChassisOrPlateValidationKey = string.Empty;
            bool vEnabledChassisOrPlateValidation;
            string UserCodeName = "VO-" + this.UserName;
            var PolicyNo = string.Empty;
            var HasFactultative = false;
            var Quotation = string.Empty;
            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);

                vEnabledChassisOrPlateValidationKey = ConfigurationManager.AppSettings["EnabledChassisOrPlateValidation"];
                bool.TryParse(vEnabledChassisOrPlateValidationKey, out vEnabledChassisOrPlateValidation);
            }
            catch (Exception)
            {
                vOnBaseAvailable = false;
                vEnabledChassisOrPlateValidation = false;
            }

            try
            {
                DateTime? BeginDate = null;
                DateTime? EndDate = null;
                var vCompañia = 30; //Atlantica Seguros 
                var vRamo = 106;//

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                PolicyNo = PolicyData.PolicyNoMain;
                Quotation = PolicyData.PolicyNo;

                //Validar si a la poliza en cuestion se le puede hacer una inclusión
                var CanPolicyMoveResult = oSFPolicyServiceClient.GetCanPolicyMove(PolicyNo);
                if (CanPolicyMoveResult.Code == "000")
                {
                    if (!string.IsNullOrEmpty(CanPolicyMoveResult.JSONResult))
                    {
                        var canMovement = CanPolicyMoveResult.JSONResult == "true";

                        if (!canMovement)
                        {
                            var mensaje = string.Format("A la poliza \"{0}\" no se le pueden hacer movimientos ya que la misma esta en transito", PolicyNo);
                            throw new Exception(mensaje);
                        }
                    }
                }
                else
                    throw new Exception(CanPolicyMoveResult.Message);

                var IllustrationData = getillustrationData();

                //Objeto de la data del Contacto
                var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

                //Validar el contacto
                if (ContactData == null)
                    throw new Exception(Resources.QuotationDontHasContact);

                oSysFlexService.UtilityGender Sexo;

                switch (ContactData.Gender)
                {
                    case "M":
                        Sexo = oSysFlexService.UtilityGender.Masculino; break;
                    case "F":
                        Sexo = oSysFlexService.UtilityGender.Femenino; break;
                    default:
                        Sexo = oSysFlexService.UtilityGender.Empresa; break;
                }

                //Data de los Vehiculos
                var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    UnderwriterId = Agent_LoginId,
                    LanguageId = Language.ToInt(),
                    UserId = this.UserID
                });

                #region validacion de Placa y Chasis
                var MessageError = string.Empty;
                var ListError = new StringBuilder();

                if (vEnabledChassisOrPlateValidation)
                {
                    foreach (var itemVehicle in dataVehicle)
                    {
                        var JSONResult = oSFPolicyServiceClient.CheckChassisOrRegistry(new oSysFlexService.PolicyVehicleKey
                        {
                            Chassis = itemVehicle.Chassis,
                            Registry = itemVehicle.Registry
                        }).JSONResult;

                        if (JSONResult == null)
                            JSONResult = "[]";

                        var OldValue = "{}";
                        var resultString = JSONResult.Replace(OldValue, "0");

                        //Verificar si el o los vehiculos de esta poliza no esta ya registrado en sysflex
                        var dataResult = Utility.deserializeJSON<IEnumerable<Utility.VehicleIdentification>>(resultString);
                        bool entro = false;

                        if (dataResult.Any())
                        {
                            foreach (var item in dataResult)
                            {
                                if (item.Policy.Trim() != PolicyData.PolicyNoMain.Trim())
                                {
                                    MessageError = (item.Type == "Placa") ? string.Format(Resources.PlateValidation, item.Value.ToUpper(), item.Policy)
                                                                      : string.Format(Resources.ChassisValidation, item.Value.ToUpper(), item.Policy);
                                    ListError.Append(MessageError);
                                    entro = true;
                                }
                            }

                            if (entro)
                            {
                                ListError.Insert(0, Resources.ChassisOrPlateValidation);
                            }
                        }

                        MessageError = string.Empty;
                    }

                }

                #region Facultativo
                foreach (var itemVehicle in dataVehicle)
                {
                    /*Facultativo Si Aplica*/
                    bool applyReinsu = itemVehicle.AppliesToReinsurance.HasValue ? itemVehicle.AppliesToReinsurance.Value
                                                                                 : false;

                    decimal reinsuAmo = itemVehicle.ReinsuranceAmount.HasValue ? itemVehicle.ReinsuranceAmount.Value
                                                                               : 0;

                    if (applyReinsu && reinsuAmo > 0)
                    {
                        DataTable dtFacultativeContractCoverage = oPolicyManager.GetFacultativeContractCoverage(new Policy.Facultative.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                            UniqueId = itemVehicle.VehicleUniqueId
                        });

                        if (dtFacultativeContractCoverage == null || dtFacultativeContractCoverage.Rows.Count == 0)
                            ListError.Append(Resources.FacultativeMissging);
                        else
                            HasFactultative = true;
                    }
                }
                #endregion


                if (ListError.Length > 0)
                {
                    Exception ex = new Exception(ListError.ToString());
                    ex.Source = "I";
                    throw ex;
                }

                if (HasFactultative)
                {
                    var resultValidationContractName = ExisteNombreContratoEnSysFlex();

                    if (resultValidationContractName.Item1)
                        throw new Exception(resultValidationContractName.Item2);
                }

                #endregion

                var TasaCalc = (PolicyData.TaxPercentage.GetValueOrDefault() / 100);

                if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                    TasaCalc = 0;

                var itemsCoverage = 0;
                var dCotizacion = oSFPolicyServiceClient.GetVehiculosFromPoliza(PolicyData.PolicyNoMain);
                long Cotizacion = 0;

                if (!string.IsNullOrEmpty(dCotizacion.JSONResult) && dCotizacion.JSONResult != "[]")
                {
                    var OldValue = "{}";
                    var resultString = dCotizacion.JSONResult.Replace(OldValue, "0");

                    var dataCotizacion = Utility.deserializeJSON<List<Utility.VehicleInclusion>>(resultString);
                    var oCotizacion = dataCotizacion.FirstOrDefault();
                    Cotizacion = oCotizacion.Cotizacion;
                    itemsCoverage = dataCotizacion.Max(v => v.Item.GetValueOrDefault());
                }

                var AnnualPremium = IllustrationData.AnnualPremium.GetValueOrDefault();
                var SecuenciaMov = -1;

                //Crear la encabezado del movimiento
                var ResultPolizaHeaderMov = oSFPolicyServiceClient.SetPolizaHeaderMov(Cotizacion, 6, AnnualPremium, UserCodeName);
                if (!string.IsNullOrEmpty(ResultPolizaHeaderMov.JSONResult) && ResultPolizaHeaderMov.JSONResult != "[]")
                {
                    var dPolizaHeaderMov = Utility.deserializeJSON<Utility.itemSecuenciaMov>(ResultPolizaHeaderMov.JSONResult);
                    SecuenciaMov = dPolizaHeaderMov.SecuenciaMov;
                }

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                #region Insertar vehiculos y coberturas
                foreach (var item in dataVehicle)
                {
                    var HasEndorsement = !string.IsNullOrEmpty(item.EndorsementBeneficiary);
                    itemsCoverage++;

                    var ReviewDataInspection = oVehicleManager.GetVehicleReview(new Vehicle
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        InsuredVehicleId = item.InsuredVehicleId
                    });

                    var kilometraje = 0;
                    var Version = "N/A";

                    if (ReviewDataInspection.Any())
                    {
                        var oDataReview = ReviewDataInspection.FirstOrDefault();
                        kilometraje = oDataReview.Odometer.GetValueOrDefault();
                        Version = oDataReview.VersionDesc;
                    }

                    Utility.rateJsonSysFlex rateJsonSysFlex;
                    var IdMarcavehiculo = string.Empty;
                    var IdUsovehiculo = string.Empty;
                    var Idtipoveh = string.Empty;
                    var IdAniovehiculo = string.Empty;
                    var IdDeductible = string.Empty;
                    var IdStorage = string.Empty;
                    var IdModeloVehiculo = string.Empty;
                    var IdCapacidad = string.Empty;
                    var Capacidad = string.Empty;
                    decimal PorcientoRecargoVentas = 0m;
                    bool licenciaExtranjera = false;

                    if (!string.IsNullOrEmpty(item.rateJsonSysflex))
                    {
                        rateJsonSysFlex = Utility.deserializeJSON<Utility.rateJsonSysFlex>(item.rateJsonSysflex.Replace("[", "").Replace("]", ""));
                        IdMarcavehiculo = rateJsonSysFlex.idMarcaVehiculo.ToString();
                        IdUsovehiculo = rateJsonSysFlex.idUso.ToString();
                        Idtipoveh = rateJsonSysFlex.idTipoVehiculo.ToString();
                        IdAniovehiculo = rateJsonSysFlex.idAnoVehiculo.ToString();
                        IdDeductible = rateJsonSysFlex.iddeducible.ToString();
                        IdStorage = rateJsonSysFlex.idEstacionaEn.ToString();
                        IdModeloVehiculo = rateJsonSysFlex.idModeloVehiculo.ToString();
                        IdCapacidad = rateJsonSysFlex.idCapacidad.ToString();
                        Capacidad = rateJsonSysFlex.capacidad;
                        PorcientoRecargoVentas = rateJsonSysFlex.PorcientoRecargoVentas;
                        licenciaExtranjera = rateJsonSysFlex.licenciaExtranjera;
                    }

                    //Crear coberturas
                    //Data Coverturas
                    var DataCoverage = oPolicyManager.GetVehicleCoverage(new Policy.VehicleCoverageGet
                    {
                        CorpId = corpId,
                        VehicleUniqueId = item.VehicleUniqueId
                    });

                    Utility.QuotationAmmount quotationAmmount = GetQuotationAmmounts(caseSeqNo,
                                                                                     cityId,
                                                                                     corpId,
                                                                                     countryId,
                                                                                     domesticRegId,
                                                                                     histSeqNo,
                                                                                     officeId,
                                                                                     regionId,
                                                                                     stateProvId,
                                                                                     item.InsuredVehicleId,
                                                                                     item.VehicleTypeId,
                                                                                     item.VehicleUniqueId,
                                                                                     DataCoverage
                                                                                     );

                    var Edad = Utility.GetAge(ContactData.Dob.GetValueOrDefault()).ToString();

                    var pSexoEdad = string.Empty;

                    if (!ContactData.IsCompany)
                    {
                        pSexoEdad = oSFPolicyServiceClient.GetSexoEdadProducto(new oSysFlexService.PolicySexoEdadKeyParameter
                        {
                            subramo = quotationAmmount.SubRamo,
                            RamoID = vRamo,
                            Edad = Edad,
                            Sexo = Sexo.ToString()
                        });
                    }

                    var QtyMonth = Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Month, BeginDate.GetValueOrDefault(), EndDate.GetValueOrDefault());
                    var pMontoImpuesto = AnnualPremium * TasaCalc;
                    var pPrimaNeta = AnnualPremium + pMontoImpuesto;

                    var VehicleDesc = string.Concat(item.MakeDesc, " ", item.ModelDesc, " ", item.Year.ToString());
                    VehiclesIncluded += string.Concat(".-", VehicleDesc + "<br>");

                    var itemInclusion = new PolicyinclusionvehicleDetailMovparameter
                    {
                        compania = vCompañia,
                        cotizacion = (decimal)Cotizacion,
                        ramo = vRamo,
                        subRamo = quotationAmmount.SubRamo,
                        secuencia = itemsCoverage,
                        tipoVehiculo = item.VehicleTypeDesc,
                        marcaVehiculo = item.MakeDesc,
                        modeloVehiculo = item.ModelDesc,
                        version = Version,
                        anoVehiculo = item.Year.ToString(),
                        chasis = item.Chassis,
                        placa = item.Registry.SIsNullOrEmpty() ? "-" : item.Registry.Replace("'", "`"),
                        color = item.ColorDesc,
                        capacidad = string.IsNullOrEmpty(item.CylindersTons) ?
                                                                               string.IsNullOrEmpty(Capacidad) ? "No especificado"
                                                                                                               : Capacidad
                                                                              : item.CylindersTons,
                        uso = item.UsageDesc,
                        estacionaEn = item.StoredDesc,
                        porcRecargo = quotationAmmount.PorcRecargo,
                        montoRecargo = quotationAmmount.MontoRecargo,
                        porcDescuento = quotationAmmount.PorcDescuento,
                        montoDescuento = quotationAmmount.MontoDescuento,
                        porcImpuesto = PolicyData.TaxPercentage.GetValueOrDefault(),
                        montoImpuesto = pMontoImpuesto,
                        renovacionAutomatica = string.Empty,
                        primaBruta = AnnualPremium,
                        neto = pPrimaNeta,
                        montoAsegurado = item.VehicleValue.HasValue ? (decimal)item.VehicleValue : 0,
                        fechaInicio = BeginDate,
                        fechaFin = EndDate,
                        cantidadMeses = (int)QtyMonth,
                        codigoTarifa = null,
                        usuario = UserCodeName,
                        estatus = "ACTIVO",
                        tasa = 1,
                        noFormulario = "",
                        formadePago = "",
                        idTipoVehiculo = Idtipoveh,
                        idMarcaVehiculo = IdMarcavehiculo,
                        idModeloVehiculo = IdModeloVehiculo,
                        idVersion = "",
                        idAnoVehiculo = IdAniovehiculo,
                        idColor = "",
                        idCapacidad = IdCapacidad,
                        idUso = IdUsovehiculo,
                        idEstacionaEn = IdStorage,
                        iddeducible = IdDeductible,
                        deducible = item.DeductiblePercentage.GetValueOrDefault().Truncate() + "%",
                        categoria = "4",
                        beneficiarioEndoso = HasEndorsement ? item.EndorsementBeneficiary.Replace("'", "`") : string.Empty,
                        rncBeneficiarioEndoso = item.EndorsementBbeneficiaryRnc,
                        valorEndoso = item.EndorsementAmount,
                        nombreContactoBeneficiarioEndoso = item.EndorsementContactName,
                        telefonoContactoBeneficiarioEndoso = item.EndorsementContactPhone,
                        correoContactoBeneficiarioEndoso = item.EndorsementContactEmail,
                        sexoEdad = pSexoEdad,
                        porciendoCobertura = "100",
                        kilomatraje = kilometraje,
                        porcientoRecargoVentas = 0,
                        licenciaExtranjera = licenciaExtranjera,
                        montoProrrata = item.ProratedPremium,
                        secuenciaMov = SecuenciaMov
                    };

                    //Endosatario
                    if (HasEndorsement)
                    {
                        var GetCotizacionEndosoCesionResult = oSFPolicyServiceClient.GetCotizacionEndosoCesion(item.EndorsementBbeneficiaryRnc);

                        if (!string.IsNullOrEmpty(GetCotizacionEndosoCesionResult.JSONResult) ||
                            GetCotizacionEndosoCesionResult.JSONResult != null ||
                            GetCotizacionEndosoCesionResult.JSONResult != "[]" ||
                            GetCotizacionEndosoCesionResult.JSONResult.ToLower() != "null")
                        {
                            var dataEndorsementSysFlex = Utility.deserializeJSON<Utility.EndorsementSysFlex>(GetCotizacionEndosoCesionResult.JSONResult);
                            if (dataEndorsementSysFlex != null)
                                oSFPolicyServiceClient.CotizacionEndosoCesion((byte)vCompañia, Cotizacion, itemsCoverage, dataEndorsementSysFlex.Codigo, item.EndorsementBeneficiary, item.EndorsementAmount, UserCodeName);
                        }
                    }

                    var resultSetInlcusion = oSFPolicyServiceClient.SetInclusion(itemInclusion);

                    var OldValue = "{}";
                    var resultString = resultSetInlcusion.JSONResult.Replace(OldValue, "0");
                    var DataInsertVehicle = Utility.deserializeJSON<List<Utility.inclusionResult>>(resultString);
                    var lcoveragesids = new List<Tuple<int, int, string>>(0);

                    //Borrar cobertras
                    var deleteAllCoverages = oSFPolicyServiceClient.DeletePolizaCoberturaMovInlcusion(vCompañia, Cotizacion, DataInsertVehicle.FirstOrDefault().Secuencia, null, SecuenciaMov);

                    hasError = (ErrorCode.Contains(deleteAllCoverages.Code) || deleteAllCoverages == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", deleteAllCoverages.Message));
                    //

                    //Coberturas
                    foreach (Policy.VehicleCoverage vehicleItem in DataCoverage)
                    {
                        //1 servicios 
                        var indicador = vehicleItem.CoverageTypeId == 3 ? 1 : 0;

                        var dataCoverage = getSysFlexDataCoverage(vRamo, quotationAmmount.SubRamo, item.VehicleValue.GetValueOrDefault(), indicador);
                        var CoverageId = 0;
                        var Desc = vehicleItem.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                        var dataCoverageSysflex = dataCoverage.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                        if (dataCoverageSysflex.Any())
                            CoverageId = dataCoverageSysflex.FirstOrDefault().Secuencia;

                        if (CoverageId > 0)
                        {
                            var resultCobertura = oSFPolicyServiceClient.SetPolizaCoberturaMov(new PolicyinclusionvehicleCoverageparameter
                            {
                                compania = vCompañia,
                                cotizacion = Cotizacion,
                                coaseguro = vehicleItem.CoinsurancePercentage,
                                deducible = vehicleItem.DeductiblePercentage,
                                minDeducible = vehicleItem.DeductibleAmount,
                                prima = vehicleItem.UnitaryPrice,
                                tasa = vehicleItem.PremiumPercentage,
                                limite = vehicleItem.CoverageLimit.Value.Truncate().ToString(CultureInfo.InvariantCulture),
                                secuencia = CoverageId,
                                secuenciaCot = DataInsertVehicle.FirstOrDefault().Secuencia,
                                secuenciaMov = SecuenciaMov
                            });

                            lcoveragesids.Add(new Tuple<int, int, string>(CoverageId, vehicleItem.CoverageId, vehicleItem.CoverageDesc));
                        }
                        else
                        {
                            throw
                                new Exception(string.Format("{0} {1}", GenericMessage, string.Concat(" la cobertura \"", vehicleItem.CoverageDesc, "\" no existe en SysFlex")));
                        }

                    }

                    //Esto se hara porque si tiene servicios debe que recalcular la tarifa 
                    oSFPolicyServiceClient.SetInclusion(itemInclusion);

                    /*Reaseguro*/
                    var setReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle.Code) || setReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle.Code) || setCoverageReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle.Message));

                    //Llamar el proceso de guardar el Facultativo
                    SetFacultativeProduct(corpId,
                                          regionId,
                                          countryId,
                                          domesticRegId,
                                          stateProvId,
                                          cityId,
                                          officeId,
                                          caseSeqNo,
                                          histSeqNo,
                                          lcoveragesids,
                                          item.VehicleUniqueId,
                                          item.AppliesToReinsurance,
                                          item.ReinsuranceAmount,
                                          ErrorCode,
                                          vCompañia,
                                          Cotizacion,
                                          itemsCoverage,
                                          UserCodeName,
                                          Utility.RequestType.Renovacion,
                                          SecuenciaMov
                                          );


                    /*Reaseguro*/
                    var setReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle2.Code) || setReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, SecuenciaMov);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle2.Code) || setCoverageReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle2.Message));
                }
                #endregion
                //Emitir la poliza con los acuerdos   
                try
                {

                    var TaxAmount = (AnnualPremium * TasaCalc);
                    var InvoiceTotalIncludingTax = AnnualPremium + (AnnualPremium * TasaCalc);

                    var CallGpMethod = (dataConfig.FirstOrDefault(u => u.Namekey == "CallGpMethodFromEmition").ConfigurationValue == "1");

                    if (CallGpMethod)
                    {
                        #region Llamar el metodo GetNCFandInvoiceNumber de GP
                        var NCFandInvoiceNumberResult = oSFPolicyServiceClient.GetNCFandInvoiceNumber(PolicyData.PolicyNoMain, DateTime.Now, InvoiceTotalIncludingTax, TaxAmount);

                        hasError = (ErrorCode.Contains(NCFandInvoiceNumberResult.Code) || NCFandInvoiceNumberResult == null);

                        if (hasError)
                            throw new Exception(string.Concat(GenericMessage, ",", NCFandInvoiceNumberResult.Message));

                        if (!string.IsNullOrEmpty(NCFandInvoiceNumberResult.JSONResult) || NCFandInvoiceNumberResult.JSONResult != null || NCFandInvoiceNumberResult.JSONResult != "[]")
                        {
                            var dNCFandInvoiceNumberResult = Utility.deserializeJSON<Utility.GPResultGeNextNCF>(NCFandInvoiceNumberResult.JSONResult);

                            if (dNCFandInvoiceNumberResult.Successful)
                            {

                                var ResultFactSinGp = oSFPolicyServiceClient.FacturacionMovimientoSinGP(vCompañia,
                                                                                                        Cotizacion,
                                                                                                        SecuenciaMov,
                                                                                                        UserCodeName,
                                                                                                        1,
                                                                                                        "",
                                                                                                        1,
                                                                                                        dNCFandInvoiceNumberResult.NCFNumber,
                                                                                                        dNCFandInvoiceNumberResult.InvoiceNumber,
                                                                                                        dNCFandInvoiceNumberResult.Error,
                                                                                                        false
                                                                                                       );

                                hasError = (ErrorCode.Contains(ResultFactSinGp.Code) || ResultFactSinGp == null);

                                if (hasError)
                                    HasErrorOnEmitionInvoice = true;
                            }
                            else
                                HasErrorOnEmitionInvoice = true;
                        }

                        #endregion
                    }
                    else
                    {
                        #region Metodo de facturacion con GP
                        ResultFacturacion = oSFPolicyServiceClient.SetMotionBillingVehicle(vCompañia,
                                                                                           Cotizacion,
                                                                                           SecuenciaMov,
                                                                                           UserCodeName,
                                                                                           1,
                                                                                           "",
                                                                                           1
                                                                                           );

                        HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");
                        #endregion
                    }
                }
                catch (Exception)
                {
                    HasErrorOnEmitionInvoice = true;
                }

                Payment.Agreement dataResultPaymentAgreement = null;

                //Buscar la data del acuerdo de pago  en global
                dataResultPaymentAgreement = this.oPaymentManager.GetPaymentAgreement(new Entity.UnderWriting.Entities.Payment.Agreement
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo
                });

                if (!HasErrorOnEmitionInvoice)
                {
                    var PaymentsAgreementQty = 0;
                    var InitialPayment = 0M;

                    if (dataResultPaymentAgreement != null)
                    {
                        PaymentsAgreementQty = dataResultPaymentAgreement.PaymentsAgreementQty;
                        InitialPayment = dataResultPaymentAgreement.InitialPayment;
                    }

                    var item = new oSysFlexService.PolicyPaymentAgreementKey
                    {
                        compania = vCompañia,
                        usuario = UserName,
                        sistema = "New Business",
                        cantidadCuotas = PaymentsAgreementQty,
                        inicial = InitialPayment,
                        cotizacion = Cotizacion
                    };

                    //Guardar el acuerdo de pago en sysflex
                    var SetPaymentAgreementResult = oSFPolicyServiceClient.SetAcuerdoPagoMov(vCompañia,
                                                                                             Cotizacion,
                                                                                             InitialPayment,
                                                                                             PaymentsAgreementQty,
                                                                                             UserName,
                                                                                             "New Business",
                                                                                             SecuenciaMov
                                                                                             );

                    hasError = (ErrorCode.Contains(SetPaymentAgreementResult.Code));

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", SetPaymentAgreementResult.Message));

                    var SourceId = string.Empty;

                    PolicyNo = PolicyData.PolicyNo;

                    //Actualizar la poliza en global
                    UpdatePolicyByGlobal(corpId,
                                         regionId,
                                         countryId,
                                         domesticRegId,
                                         stateProvId,
                                         cityId,
                                         officeId,
                                         caseSeqNo,
                                         histSeqNo,
                                         QuotationNumber,
                                         Cotizacion.ToString(),
                                         PolicyNo,
                                         SourceId,
                                         BeginDate.GetValueOrDefault(),
                                         EndDate.GetValueOrDefault(),
                                         LoanNumber: null,
                                         Financed: false,
                                         requestType: Utility.RequestType.Renovacion
                                         );

                    //LLevar los archivos requeridos a onBase
                    if (vOnBaseAvailable)
                        GenerateOnBaseFiles(
                                       corpId,
                                       regionId,
                                       countryId,
                                       domesticRegId,
                                       stateProvId,
                                       cityId,
                                       officeId,
                                       caseSeqNo,
                                       histSeqNo,
                                       false,
                                       ServerMapPathXML,
                                       Financed: false,
                                       ErrorCreateLoanKCO: false,
                                       LoanNumber: null,
                                       RepresentanteLegal: ContactData.ManagerName
                                      );
                }


            }
            catch (Exception ex)
            {
                throw ex;
            }

            return new Tuple<string, string, bool>(PolicyNo, Quotation, HasErrorOnEmitionInvoice);
        }


        /// <summary>
        /// Enviar la cotizacion al Core SysFlex y hacer la poliza efectiva
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="isQuotation"></param>
        /// <param name="QuotationNumber"></param>
        /// <param name="ServerMapPathXML"></param>
        /// <returns></returns>
        public Tuple<String, String, Boolean> SendQuotToSysFlexNewVersion(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, bool isQuotation, string QuotationNumber, string ServerMapPathXML = null)
        {
            var HasErrorOnEmitionInvoice = false;
            var ErrorCreateLoanKCO = false;
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            string vEnabledChassisOrPlateValidationKey = string.Empty;
            bool vEnabledChassisOrPlateValidation;

            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);

                vEnabledChassisOrPlateValidationKey = ConfigurationManager.AppSettings["EnabledChassisOrPlateValidation"];
                bool.TryParse(vEnabledChassisOrPlateValidationKey, out vEnabledChassisOrPlateValidation);
            }
            catch (Exception)
            {
                vOnBaseAvailable = false;
                vEnabledChassisOrPlateValidation = false;
            }

            DateTime? BeginDate = null;
            DateTime? EndDate = null;
            var vCompañia = 30; //Atlantica Seguros 
            var vRamo = 106;//
            var Intermediario = 0;
            var Oficina = 0;
            var Email = default(string);
            var PolicyNo = string.Empty;
            var Quotation = string.Empty;
            int itemsCoverage = 0; //Para utilizarse como secuencia en DataCoverage
            string UserCodeName = "VO-" + this.UserName;
            oSysFlexService.SetMotionBillingResult ResultFacturacion = null;
            decimal Cotizacion = 0m;
            bool HasFactultative = false;

            //Data de los Vehiculos
            var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                UnderwriterId = Agent_LoginId,
                LanguageId = Language.ToInt(),
                UserId = this.UserID
            });

            var MessageError = string.Empty;
            var ListError = new StringBuilder();

            if (vEnabledChassisOrPlateValidation)
            {
                foreach (var itemVehicle in dataVehicle)
                {
                    var JSONResult = oSFPolicyServiceClient.CheckChassisOrRegistry(new oSysFlexService.PolicyVehicleKey
                    {
                        Chassis = itemVehicle.Chassis,
                        Registry = itemVehicle.Registry
                    }).JSONResult;

                    if (JSONResult == null)
                        JSONResult = "[]";

                    var OldValue = "{}";
                    var resultString = JSONResult.Replace(OldValue, "0");

                    //Verificar si el o los vehiculos de esta poliza no esta ya registrado en sysflex
                    var dataResult = Utility.deserializeJSON<IEnumerable<Utility.VehicleIdentification>>(resultString);

                    if (dataResult.Any())
                    {
                        foreach (var item in dataResult)
                        {
                            MessageError = (item.Type == "Placa") ? string.Format(Resources.PlateValidation, item.Value.ToUpper(), item.Policy)
                                                                  : string.Format(Resources.ChassisValidation, item.Value.ToUpper(), item.Policy);

                            ListError.Append(MessageError);
                        }

                        ListError.Insert(0, Resources.ChassisOrPlateValidation);
                    }

                    MessageError = string.Empty;
                }

            }

            #region Facultativo
            foreach (var itemVehicle in dataVehicle)
            {
                /*Facultativo Si Aplica*/
                bool applyReinsu = itemVehicle.AppliesToReinsurance.HasValue ? itemVehicle.AppliesToReinsurance.Value
                                                                             : false;

                decimal reinsuAmo = itemVehicle.ReinsuranceAmount.HasValue ? itemVehicle.ReinsuranceAmount.Value
                                                                           : 0;

                if (applyReinsu && reinsuAmo > 0)
                {
                    DataTable dtFacultativeContractCoverage = oPolicyManager.GetFacultativeContractCoverage(new Policy.Facultative.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        UniqueId = itemVehicle.VehicleUniqueId
                    });

                    if (dtFacultativeContractCoverage == null || dtFacultativeContractCoverage.Rows.Count == 0)
                        ListError.Append(Resources.FacultativeMissging);
                    else
                        HasFactultative = true;
                }
            }
            #endregion

            if (ListError.Length > 0)
            {
                Exception ex = new Exception(ListError.ToString());
                ex.Source = "I";
                throw ex;
            }

            if (HasFactultative)
            {
                var resultValidationContractName = ExisteNombreContratoEnSysFlex();

                if (resultValidationContractName.Item1)
                    throw new Exception(resultValidationContractName.Item2);
            }

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
             , officeId, caseSeqNo, histSeqNo);

            var illustrationData = getillustrationData();

            #region Coupon Vars
            var couponData = getCouponInfo(PolicyData.PolicyNo);
            bool AllowDescuentoCoupon = (dataConfig.FirstOrDefault(u => u.Namekey == "AllowDescuentoCoupon").ConfigurationValue == "1");
            var dc = dataConfig.FirstOrDefault(u => u.Namekey == "CouponIdSysflex");
            int descuentoCouponIDSysflex = (dc != null ? dc.ConfigurationValue.ToInt() : -1);
            #endregion

            #region Flotilla Vars
            bool AllowDescuentoFlotilla = (dataConfig.FirstOrDefault(u => u.Namekey == "AllowDescuentoFlotilla").ConfigurationValue == "1");
            dc = dataConfig.FirstOrDefault(u => u.Namekey == "FlotillaIdSysflex");
            int descuentoFlotillaIDSysflex = (dc != null ? dc.ConfigurationValue.ToInt() : -1);
            string FlotillaDiscountRules = dataConfig.FirstOrDefault(u => u.Namekey == "FlotillaDiscountRules").ConfigurationValue;
            decimal porcDescuentoFlotilla = 0;
            int qtyVehicles = 0;
            #endregion


            Intermediario = PolicyData.AgentCode.ToInt();

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

            //Validar el contacto
            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager
                           .GetCommunicatonEmail(corpId, ContactData.ContactId, Language.ToInt());

            //Validar Email
            if (DataEmail.Any())
            {
                var EmailResult = DataEmail
                                 .FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                if (EmailResult != null)
                    Email = EmailResult.EmailAdress;
            }

            //Direccion del Contacto
            var oAddress = oContactManager
                          .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? oAddress.StreetAddress.Replace("'", "`") : "-";

            //Telefonos del contacto
            var oPhones = oContactManager
                          .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

            //Data Telefonos

            //Casa
            var DataTelefonoCasa = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 6);
            //Trabajo
            var DataTelefonoTrabajo = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 7);
            //Celular
            var DataTelefonoCelular = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 8);

            //Casa            
            var TelefonoCasa = DataTelefonoCasa != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCasa.CountryCode, DataTelefonoCasa.AreaCode, DataTelefonoCasa.PhoneNumber)
                               : default(string);
            //Trabajo
            var TelefonoTrabajo = DataTelefonoTrabajo != null ?
                               string.Format("{0}{1}{2}", DataTelefonoTrabajo.CountryCode, DataTelefonoTrabajo.AreaCode, DataTelefonoTrabajo.PhoneNumber)
                               : default(string);
            //Celular
            var TelefonoCelular = DataTelefonoCelular != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCelular.CountryCode, DataTelefonoCelular.AreaCode, DataTelefonoCelular.PhoneNumber)
                               : default(string);

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            if (!dataId.Any() || dataId == null)
                throw new Exception(string.Format("{0} {1}", GenericMessage, " El contacto no tiene ningun documento de identidad asociado"));

            var tipoCedula = default(string);
            var Registro = dataId.FirstOrDefault();
            var ContactIdType = Registro.ContactIdType;
            var CedulaRncOther = Registro.Id;
            var ExpirationDate = Registro.ExpireDate;
            /*
             Contact_Id_Type	Contact_Id_Type_Desc
                    0	            Other
                    1	            Id
                    2	            Passport
                    3	            Driver License
                    4	            Beneficiary Document
                    5	            Company Registration
                    6	            Birth Certificate
                    7	            School Registration
                    8	            Auto Generated ID
             */

            switch (ContactIdType)
            {   //Other 
                case 0: tipoCedula = "2"; break;
                //Cedula
                case 1: tipoCedula = "1"; break;
                //RNC
                case 5: tipoCedula = "0"; break;
                default: tipoCedula = "2"; break;
            }

            //-- 0 = Rnc, 1 = Cedula , 2 = Otros

            var CurrencyId = 0;
            /*
             Other = 0
             Id  = 1  => Cedula
             Company Registration = 5 => Rnc
             */

            try
            {
                if (!PolicyData.CurrencyId.HasValue)
                    throw new Exception(Resources.QuotationDontHasCurrency);

                switch (PolicyData.CurrencyId.Value)
                {
                    case 1:
                        CurrencyId = 2;// Dollar
                        break;
                    case 2:
                        CurrencyId = 3;//Euros
                        break;
                    case 3:
                        CurrencyId = 1;//Pesos
                        break;
                }

                var TasaCalc = (PolicyData.TaxPercentage.GetValueOrDefault() / 100);

                if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                    TasaCalc = 0;

                var AnnualPremium = PolicyData.AnnualPremium.HasValue ? PolicyData.AnnualPremium.Value : 0;
                var PrimaTotal = AnnualPremium + (AnnualPremium * TasaCalc);

                oSysFlexService.UtilityGender Sexo;

                switch (ContactData.Gender)
                {
                    case "M":
                        Sexo = oSysFlexService.UtilityGender.Masculino; break;
                    case "F":
                        Sexo = oSysFlexService.UtilityGender.Femenino; break;
                    default:
                        Sexo = oSysFlexService.UtilityGender.Empresa; break;
                }

                oSysFlexService.UtilityNCFType NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal;

                switch (ContactData.InvoiceTypeId)
                {
                    case 1: //Factura Valor Credito Fiscal
                        NCFType = oSysFlexService.UtilityNCFType.FacturaValorCreditoFiscal; break;
                    case 5: //Factura para Regimenes Especiales
                        NCFType = oSysFlexService.UtilityNCFType.FacturaparaRegimenesEspeciales; break;
                    case 6: //Comprobantes Gubernamentales
                        NCFType = oSysFlexService.UtilityNCFType.ComprobantesGubernamentales; break;
                    case 7: //Factura Consumidor Final  
                        NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal; break;
                }

                //Obtener la oficina en sysflex
                var DataResultSearchOffice = oSFPolicyServiceClient.GetMatchOffice(PolicyData.OfficeId);

                if (DataResultSearchOffice == null ||
                    string.IsNullOrEmpty(DataResultSearchOffice.JSONResult) ||
                    DataResultSearchOffice.JSONResult == "[]" ||
                    DataResultSearchOffice.JSONResult.ToLower() == "null")
                    throw new Exception(string.Format("{0} {1}", GenericMessage, " Error la Oficina no existe en sysflex"));

                var DataOffice = Utility.deserializeJSON<List<Utility.OfficeMatchWS>>(DataResultSearchOffice.JSONResult);
                Oficina = DataOffice.FirstOrDefault().OfficeIdSysFlex.GetValueOrDefault();

                /*
                    En Global 
                         USD = 1
                         EUR = 2
                         DOP = 3
                    En SysFlex 
                      PESOS = 1
                      DOLAR = 2
                      EURO  = 3                
                */

                if (string.IsNullOrEmpty(this.Nationality))
                    throw new Exception(string.Format("{0} {1}", GenericMessage, " al cliente no se le especifico la Nacionalidad"));

                //Crear el header de la cotizacion
                var Header = new oSysFlexService.PolicyQuotationKey
                {
                    Compania = vCompañia,
                    Cotizacion = 0, //Para Craer una cotizacion nueva                    
                    TipoCedula = tipoCedula, //-- 0 = Rnc, 1 = Cedula , 2 = Otros   
                    Cedula = CedulaRncOther != null ? CedulaRncOther : default(string),
                    Nombres = (ContactData.FirstName + " " + ContactData.MiddleName).Replace("'", "`"),
                    Apellidos = (ContactData.FirstLastName + " " + ContactData.SecondLastName).Replace("'", "`"),
                    FechaNacimiento = ContactData.Dob.HasValue ? ContactData.Dob.Value : new DateTime(1753, 1, 1),
                    Intermediario = Intermediario,
                    Direccion = Direccion,
                    TelefonoCasa = TelefonoCasa != null ? TelefonoCasa : default(string),
                    TelefonoTrabajo = TelefonoTrabajo != null ? TelefonoTrabajo : default(string),
                    Celular = TelefonoCelular != null ? TelefonoCelular : default(string),
                    Email = Email != null ? Email : default(string),
                    Nacionalidad = ContactData.CountryOfBirthDesc,
                    Ramo = vRamo,
                    SubRamo = 0, //Este valor no se usa en el stored procedure que consume este metodo
                    PrimaTotal = PrimaTotal, //Esta es la prima con los impuestos                    
                    Hora = string.Format("{0:T}", DateTime.Now),
                    SumaAsegurada = PolicyData.InsuredAmount.HasValue ? PolicyData.InsuredAmount.Value : 0,
                    CodMoneda = CurrencyId,
                    TasaMoneda = 1,
                    Ubicacion = ContactData.UbicacionId,
                    Oficina = Oficina,
                    FechaExIdLicencia = ExpirationDate.HasValue ? ExpirationDate : (DateTime?)null,
                    Sexo = Sexo,
                    Ncf = ContactData.InvoiceTypeId.GetValueOrDefault(),
                    Usuario = UserCodeName,
                    QuotationNumber = PolicyData.PolicyNo
                };

                var resultHeader = oSFPolicyServiceClient.SetQuotationHeaderVehicle(Header);

                hasError = (ErrorCode.Contains(resultHeader.Code));

                if (hasError)
                    throw new Exception(resultHeader.Message);
                else
                {
                    //Actualizar el sourceid del contacto                    
                    ContactData.SourceId = resultHeader.PolicyQuotationHeader.SourceId;
                    Cotizacion = resultHeader.PolicyQuotationHeader.Cotizacion;
                    oContactManager.UpdateContact(ContactData);
                }

                //Recorrer la lista de vehiculos para ir creando el detalle de la cotizacion                
                foreach (Policy.VehicleInsured item in dataVehicle)
                {
                    var HasEndorsement = !string.IsNullOrEmpty(item.EndorsementBeneficiary);
                    itemsCoverage++;    //Para utilizarse como secuencia en DataCoverage

                    //Crear coberturas
                    //Data Coverturas
                    var DataCoverage = oPolicyManager.GetVehicleCoverage(new Policy.VehicleCoverageGet
                    {
                        CorpId = corpId,
                        VehicleUniqueId = item.VehicleUniqueId
                    });

                    Utility.QuotationAmmount quotationAmmount = GetQuotationAmmounts(caseSeqNo,
                                                                                     cityId,
                                                                                     corpId,
                                                                                     countryId,
                                                                                     domesticRegId,
                                                                                     histSeqNo,
                                                                                     officeId,
                                                                                     regionId,
                                                                                     stateProvId,
                                                                                     item.InsuredVehicleId,
                                                                                     item.VehicleTypeId,
                                                                                     item.VehicleUniqueId,
                                                                                     DataCoverage
                                                                                     );

                    if (!item.ExpirationDate.HasValue)
                        throw new Exception(Resources.QuotationDontHasExpirationDate);

                    var pMontoImpuesto = item.PremiumAmount.GetValueOrDefault() * TasaCalc;
                    var pPrimaNeta = item.PremiumAmount.GetValueOrDefault() + pMontoImpuesto;

                    var Edad = Utility.GetAge(ContactData.Dob.GetValueOrDefault()).ToString();

                    var pSexoEdad = string.Empty;

                    if (!ContactData.IsCompany)
                    {
                        pSexoEdad = oSFPolicyServiceClient.GetSexoEdadProducto(new oSysFlexService.PolicySexoEdadKeyParameter
                        {
                            subramo = quotationAmmount.SubRamo,
                            RamoID = vRamo,
                            Edad = Edad,
                            Sexo = Sexo.ToString()
                        });
                    }

                    BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                    EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                    var ReviewDataInspection = oVehicleManager.GetVehicleReview(new Vehicle
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        InsuredVehicleId = item.InsuredVehicleId
                    });

                    var kilometraje = 0;
                    var Version = "N/A";

                    if (ReviewDataInspection.Any())
                    {
                        var oDataReview = ReviewDataInspection.FirstOrDefault();
                        kilometraje = oDataReview.Odometer.GetValueOrDefault();
                        Version = oDataReview.VersionDesc;
                    }

                    var QtyMonth = Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Month, BeginDate.GetValueOrDefault(), EndDate.GetValueOrDefault());

                    Utility.rateJsonSysFlex rateJsonSysFlex;
                    var IdMarcavehiculo = string.Empty;
                    var IdUsovehiculo = string.Empty;
                    var Idtipoveh = string.Empty;
                    var IdAniovehiculo = string.Empty;
                    var IdDeductible = string.Empty;
                    var IdStorage = string.Empty;
                    var IdModeloVehiculo = string.Empty;
                    var IdCapacidad = string.Empty;
                    var Capacidad = string.Empty;
                    decimal PorcientoRecargoVentas = 0m;
                    bool licenciaExtranjera = false;

                    var IdTipoCombustible = string.Empty;
                    var TipoCombustible = string.Empty;

                    if (!string.IsNullOrEmpty(item.rateJsonSysflex))
                    {
                        rateJsonSysFlex = Utility.deserializeJSON<Utility.rateJsonSysFlex>(item.rateJsonSysflex.Replace("[", "").Replace("]", ""));
                        IdMarcavehiculo = rateJsonSysFlex.idMarcaVehiculo.ToString();
                        IdUsovehiculo = rateJsonSysFlex.idUso.ToString();
                        Idtipoveh = rateJsonSysFlex.idTipoVehiculo.ToString();
                        IdAniovehiculo = rateJsonSysFlex.idAnoVehiculo.ToString();
                        IdDeductible = rateJsonSysFlex.iddeducible.ToString();
                        IdStorage = rateJsonSysFlex.idEstacionaEn.ToString();
                        IdModeloVehiculo = rateJsonSysFlex.idModeloVehiculo.ToString();
                        IdCapacidad = rateJsonSysFlex.idCapacidad.ToString();
                        Capacidad = rateJsonSysFlex.capacidad;
                        PorcientoRecargoVentas = rateJsonSysFlex.PorcientoRecargoVentas;
                        licenciaExtranjera = rateJsonSysFlex.licenciaExtranjera;
                        IdTipoCombustible = rateJsonSysFlex.idTipoCombustible.ToString();
                        TipoCombustible = rateJsonSysFlex.tipoCombustible;
                    }

                    var Detail = new oSysFlexService.PolicySysFlexCotizacionDetailKey
                    {
                        anoVehiculo = item.Year.ToString(),
                        chasis = item.Chassis,
                        capacidad = string.IsNullOrEmpty(item.CylindersTons) ?
                                                                              string.IsNullOrEmpty(Capacidad) ? "No especificado"
                                                                                                              : Capacidad
                                                                             : item.CylindersTons,
                        color = item.ColorDesc,
                        compania = vCompañia,
                        cotizacion = Cotizacion,
                        estacionaEn = item.StoredDesc,
                        fechaFin = EndDate.GetValueOrDefault(),
                        fechaInicio = BeginDate.GetValueOrDefault(),
                        marcaVehiculo = item.MakeDesc,
                        modeloVehiculo = item.ModelDesc,
                        secuencia = itemsCoverage,
                        montoDescuento = quotationAmmount.MontoDescuento,
                        montoRecargo = quotationAmmount.MontoRecargo,
                        cantidadMeses = (int)QtyMonth,
                        placa = item.Registry.SIsNullOrEmpty() ? "-" : item.Registry.Replace("'", "`"),
                        porcDescuento = quotationAmmount.PorcDescuento,
                        montoImpuesto = pMontoImpuesto,
                        porcImpuesto = PolicyData.TaxPercentage.GetValueOrDefault(),
                        primaBruta = PolicyData.AnnualPremium.GetValueOrDefault(),
                        neto = pPrimaNeta,
                        porcRecargo = quotationAmmount.PorcRecargo,
                        ramo = vRamo,
                        subRamo = quotationAmmount.SubRamo,
                        tasa = 1,
                        tipoVehiculo = item.VehicleTypeDesc,
                        uso = item.UsageDesc,
                        beneficiarioEndoso = HasEndorsement ? item.EndorsementBeneficiary.Replace("'", "`") : string.Empty,
                        rncBeneficiarioEndoso = item.EndorsementBbeneficiaryRnc,
                        valorEndoso = item.EndorsementAmount,
                        nombreContactoBeneficiarioEndoso = item.EndorsementContactName,
                        telefonoContactoBeneficiarioEndoso = item.EndorsementContactPhone,
                        correoContactoBeneficiarioEndoso = item.EndorsementContactEmail,
                        deducible = item.DeductiblePercentage.GetValueOrDefault().Truncate() + "%",
                        montoAsegurado = item.VehicleValue.HasValue ? (decimal)item.VehicleValue : 0,
                        porciendoCobertura = "100",
                        sexoEdad = pSexoEdad,
                        kilomatraje = kilometraje,
                        usuario = UserCodeName,
                        version = Version,
                        idMarcaVehiculo = IdMarcavehiculo,
                        idUso = IdUsovehiculo,
                        idTipoVehiculo = Idtipoveh,
                        idAnoVehiculo = IdAniovehiculo,
                        iddeducible = IdDeductible,
                        idEstacionaEn = IdStorage,
                        idModeloVehiculo = IdModeloVehiculo,
                        idCapacidad = IdCapacidad,
                        PorcientoRecargoVentas = PorcientoRecargoVentas,
                        LicenciaExtranjera = licenciaExtranjera,
                        idTipoCombustible = IdTipoCombustible,
                        tipoCombustible = TipoCombustible
                    };

                    //Endosatario
                    if (HasEndorsement)
                    {
                        var GetCotizacionEndosoCesionResult = oSFPolicyServiceClient.GetCotizacionEndosoCesion(item.EndorsementBbeneficiaryRnc);

                        if (!string.IsNullOrEmpty(GetCotizacionEndosoCesionResult.JSONResult) ||
                            GetCotizacionEndosoCesionResult.JSONResult != null ||
                            GetCotizacionEndosoCesionResult.JSONResult != "[]" ||
                            GetCotizacionEndosoCesionResult.JSONResult.ToLower() != "null")
                        {
                            var dataEndorsementSysFlex = Utility.deserializeJSON<Utility.EndorsementSysFlex>(GetCotizacionEndosoCesionResult.JSONResult);
                            if (dataEndorsementSysFlex != null)
                                oSFPolicyServiceClient.CotizacionEndosoCesion((byte)vCompañia, Cotizacion, itemsCoverage, dataEndorsementSysFlex.Codigo, item.EndorsementBeneficiary, item.EndorsementAmount, UserCodeName);
                        }
                    }

                    var resultDetail = oSFPolicyServiceClient.SetQuotationDetailVehicle(Detail);

                    hasError = (ErrorCode.Contains(resultDetail.Code));

                    if (hasError)
                        throw new Exception(resultDetail.Message);
                    else
                    {
                        //Actualizar el SourceId de la tabla de vehiculos
                        item.SourceId = resultDetail.DetailResult.Insured_Vehicle_Id_Source_ID;
                        oPolicyManager.SetVehicleInsured(item);
                    }

                    //Limpiar las coberturas
                    var DeleteCotizacionCoberturaResult = oSFPolicyServiceClient.DeleteCotizacionCobertura(vCompañia, Cotizacion, itemsCoverage);

                    hasError = (ErrorCode.Contains(DeleteCotizacionCoberturaResult.Code));

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", DeleteCotizacionCoberturaResult.Message));


                    var lcoveragesids = new List<Tuple<int, int, string>>(0);

                    foreach (Policy.VehicleCoverage vehicleItem in DataCoverage)
                    {
                        //1 servicios 
                        var indicador = vehicleItem.CoverageTypeId == 3 ? 1 : 0;

                        var dataCoverage = getSysFlexDataCoverage(vRamo, quotationAmmount.SubRamo, item.VehicleValue.GetValueOrDefault(), indicador);

                        var CoverageId = 0;
                        var Desc = vehicleItem.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                        var dataCoverageSysflex = dataCoverage.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                        if (dataCoverageSysflex.Any())
                            CoverageId = dataCoverageSysflex.FirstOrDefault().Secuencia;

                        if (CoverageId > 0)
                        {
                            var resultCobertura = oSFPolicyServiceClient.SetQuotationCoverageVehicle(new oSysFlexService.PolicyQuotationCoverageKey
                            {
                                Compania = vCompañia,
                                Cotizacion = Cotizacion,
                                CoberturaID = CoverageId,
                                Items = itemsCoverage,
                                coaseguro = vehicleItem.CoinsurancePercentage,
                                deducible = vehicleItem.DeductiblePercentage,
                                minDeducible = vehicleItem.DeductibleAmount,
                                prima = vehicleItem.UnitaryPrice,
                                tasa = vehicleItem.PremiumPercentage,
                                Limite = vehicleItem.CoverageLimit.Value.Truncate().ToString(CultureInfo.InvariantCulture)
                            });

                            lcoveragesids.Add(new Tuple<int, int, string>(CoverageId, vehicleItem.CoverageId, vehicleItem.CoverageDesc));
                        }
                        else
                        {
                            throw
                                new Exception(string.Format("{0} {1}", GenericMessage, string.Concat(" la cobertura \"", vehicleItem.CoverageDesc, "\" no existe en SysFlex")));
                        }
                    }

                    /*Actualizar las coberturas*/
                    var ResultActualizaDetCovertura = oSFPolicyServiceClient.ActualizaDetailCobertura(vCompañia, Cotizacion, itemsCoverage);

                    hasError = (ErrorCode.Contains(ResultActualizaDetCovertura.Code));

                    if (hasError)
                        if (hasError)
                            throw new Exception(string.Concat(GenericMessage, ",", ResultActualizaDetCovertura.Message));

                    /*Reaseguro*/
                    var setReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, 0);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle.Code) || setReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, 0);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle.Code) || setCoverageReinsuranceVehicle == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle.Message));

                    //Llamar el proceso de guardar el Facultativo
                    SetFacultativeProduct(corpId,
                                          regionId,
                                          countryId,
                                          domesticRegId,
                                          stateProvId,
                                          cityId,
                                          officeId,
                                          caseSeqNo,
                                          histSeqNo,
                                          lcoveragesids,
                                          item.VehicleUniqueId,
                                          item.AppliesToReinsurance,
                                          item.ReinsuranceAmount,
                                          ErrorCode,
                                          vCompañia,
                                          Cotizacion,
                                          itemsCoverage,
                                          UserCodeName
                                          );


                    /*Reaseguro*/
                    var setReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, 0);

                    hasError = (ErrorCode.Contains(setReinsuranceVehicle2.Code) || setReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setReinsuranceVehicle.Message));

                    var setCoverageReinsuranceVehicle2 = oSFPolicyServiceClient.SetQuotationCoverageReinsuranceVehicle(vCompañia, Cotizacion, itemsCoverage, 0);

                    hasError = (ErrorCode.Contains(setCoverageReinsuranceVehicle2.Code) || setCoverageReinsuranceVehicle2 == null);

                    if (hasError)
                        throw new Exception(string.Concat(GenericMessage, ",", setCoverageReinsuranceVehicle2.Message));



                    qtyVehicles++;
                }

                var SetPasstransitResult = oSFPolicyServiceClient.SetPasstransitVehicle(vCompañia,
                                                                                        Cotizacion,
                                                                                        UserCodeName,
                                                                                        "",
                                                                                        Oficina,
                                                                                        1  //Emision
                                                                                        );

                hasError = (ErrorCode.Contains(SetPasstransitResult.Code) || SetPasstransitResult.QuotationPassTransit == null);

                if (!hasError)
                {
                    PolicyNo = SetPasstransitResult.QuotationPassTransit.Poliza;
                    var SourceId = SetPasstransitResult.QuotationPassTransit.SourceId;

                    var TaxAmount = (AnnualPremium * TasaCalc);
                    var InvoiceTotalIncludingTax = AnnualPremium + (AnnualPremium * TasaCalc);

                    //Paso #3  Emitir la poliza con los acuerdos   
                    try
                    {
                        var CallGpMethod = (dataConfig.FirstOrDefault(u => u.Namekey == "CallGpMethodFromEmition").ConfigurationValue == "1");

                        if (CallGpMethod)
                        {
                            #region Llamar el metodo GetNCFandInvoiceNumber de GP
                            var NCFandInvoiceNumberResult = oSFPolicyServiceClient.GetNCFandInvoiceNumber(PolicyNo, DateTime.Now, InvoiceTotalIncludingTax, TaxAmount);

                            hasError = (ErrorCode.Contains(NCFandInvoiceNumberResult.Code) || NCFandInvoiceNumberResult == null);

                            if (hasError)
                                throw new Exception(string.Concat(GenericMessage, ",", NCFandInvoiceNumberResult.Message));

                            if (!string.IsNullOrEmpty(NCFandInvoiceNumberResult.JSONResult) || NCFandInvoiceNumberResult.JSONResult != null || NCFandInvoiceNumberResult.JSONResult != "[]")
                            {
                                var dNCFandInvoiceNumberResult = Utility.deserializeJSON<Utility.GPResultGeNextNCF>(NCFandInvoiceNumberResult.JSONResult);

                                if (dNCFandInvoiceNumberResult.Successful)
                                {

                                    var ResultFactSinGp = oSFPolicyServiceClient.FacturacionMovimientoSinGP(vCompañia,
                                                                                                         Cotizacion,
                                                                                                         1,
                                                                                                         UserCodeName,
                                                                                                         1,
                                                                                                         "",
                                                                                                         1,
                                                                                                         dNCFandInvoiceNumberResult.NCFNumber,
                                                                                                         dNCFandInvoiceNumberResult.InvoiceNumber,
                                                                                                         dNCFandInvoiceNumberResult.Error,
                                                                                                         illustrationData.Financed
                                                                                                        );

                                    hasError = (ErrorCode.Contains(ResultFactSinGp.Code) || ResultFactSinGp == null);

                                    if (hasError)
                                        HasErrorOnEmitionInvoice = true;
                                }
                                else
                                    HasErrorOnEmitionInvoice = true;
                            }

                            #endregion
                        }
                        else
                        {
                            #region Metodo de facturacion con GP
                            ResultFacturacion = oSFPolicyServiceClient.SetMotionBillingVehicle(vCompañia,
                                                                                               Cotizacion,
                                                                                               1,
                                                                                               UserCodeName,
                                                                                               1,
                                                                                               "",
                                                                                               1
                                                                                               );

                            HasErrorOnEmitionInvoice = (ErrorCode.Contains(ResultFacturacion.Code) || ResultFacturacion.MovResult.ErrorMessage != "N/A");
                            #endregion
                        }
                    }
                    catch (Exception)
                    {
                        HasErrorOnEmitionInvoice = true;
                    }

                    Payment.Agreement dataResultPaymentAgreement = null;

                    //Buscar la data del acuerdo de pago  en global
                    dataResultPaymentAgreement = this.oPaymentManager.GetPaymentAgreement(new Entity.UnderWriting.Entities.Payment.Agreement
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo
                    });

                    if (!HasErrorOnEmitionInvoice)
                    {
                        var PaymentsAgreementQty = 0;
                        var InitialPayment = 0M;

                        if (dataResultPaymentAgreement != null)
                        {
                            PaymentsAgreementQty = dataResultPaymentAgreement.PaymentsAgreementQty;
                            InitialPayment = dataResultPaymentAgreement.InitialPayment;
                        }

                        var item = new oSysFlexService.PolicyPaymentAgreementKey
                        {
                            compania = vCompañia,
                            usuario = UserName,
                            sistema = "New Business",
                            cantidadCuotas = PaymentsAgreementQty,
                            inicial = InitialPayment,
                            cotizacion = Cotizacion
                        };

                        //Guardar el acuerdo de pago en sysflex
                        var SetPaymentAgreementResult = oSFPolicyServiceClient.SetPaymentAgreement(item);

                        hasError = (ErrorCode.Contains(SetPaymentAgreementResult.Code));

                        if (hasError)
                            throw new Exception(string.Concat(GenericMessage, ",", SetPaymentAgreementResult.Message));

                        #region Flotilla
                        if (AllowDescuentoFlotilla && !string.IsNullOrEmpty(FlotillaDiscountRules) && qtyVehicles > 1)
                        {
                            var json = Utility.deserializeJSON<List<Utility.Percent_Flotilla_Discount>>(FlotillaDiscountRules);

                            foreach (var qty in json)
                            {
                                if (qtyVehicles >= qty.From && qtyVehicles <= qty.To)
                                {
                                    porcDescuentoFlotilla = (qty.Porc * 100);
                                }
                            }

                            if (porcDescuentoFlotilla > 0)
                            {
                                try
                                {
                                    /*Si hay descuento de flotilla procesar el de flotilla primero*/
                                    decimal realDiscountFlotilla = (porcDescuentoFlotilla / 100);

                                    /*Descuentos a Polizas Flotilla*/
                                    PolicySysFlexPolizaDescuentoParameter paramDiscount = new PolicySysFlexPolizaDescuentoParameter();
                                    paramDiscount.Compania = vCompañia;
                                    paramDiscount.Sistema = "New Business";
                                    paramDiscount.Usuario = "VO-" + UserName;

                                    paramDiscount.Poliza = SetPasstransitResult.QuotationPassTransit.Poliza;
                                    paramDiscount.ConceptoId = descuentoFlotillaIDSysflex;
                                    paramDiscount.PorcDescuento = realDiscountFlotilla;

                                    oSFPolicyServiceClient.SetPolizaDescuento(paramDiscount);
                                }
                                catch (Exception ex)
                                { }
                            }

                        }
                        #endregion

                        #region Coupon
                        if (couponData != null && !string.IsNullOrEmpty(couponData.CouponCode))
                        {
                            if (AllowDescuentoCoupon)
                            {
                                try
                                {
                                    /*Si hay descuento de flotilla procesar el de flotilla primero*/
                                    decimal realDiscountCoupon = (couponData.CouponPercentageDiscount.GetValueOrDefault() / 100);

                                    /*Descuentos a Polizas Flotilla*/
                                    PolicySysFlexPolizaDescuentoParameter paramDiscount = new PolicySysFlexPolizaDescuentoParameter();
                                    paramDiscount.Compania = vCompañia;
                                    paramDiscount.Sistema = "New Business";
                                    paramDiscount.Usuario = "VO-" + UserName;

                                    paramDiscount.Poliza = SetPasstransitResult.QuotationPassTransit.Poliza;
                                    paramDiscount.ConceptoId = descuentoCouponIDSysflex;
                                    paramDiscount.PorcDescuento = realDiscountCoupon;

                                    oSFPolicyServiceClient.SetPolizaDescuento(paramDiscount);

                                    //hacer la logica de setear la poliza al prospecto
                                    var lstEmails = GetCommunicationEmail();
                                    string realEmail = "";
                                    if (lstEmails != null && lstEmails.Any())
                                    {
                                        var email = lstEmails.FirstOrDefault();
                                        if (email != null)
                                            realEmail = email.EmailAdress;
                                    }

                                    var lstPhones = GetCommunicatonPhone();
                                    string realPhone = "";
                                    if (lstPhones != null && lstPhones.Any())
                                    {
                                        var phone = lstPhones.FirstOrDefault(o =>
                                            o.DirectoryTypeId == Utility.DirectoryType.HomePhone.ToInt() ||
                                            o.DirectoryTypeId == Utility.DirectoryType.OtherPhone.ToInt());
                                        if (phone != null)
                                            realPhone = (String.IsNullOrEmpty(phone.AreaCode) ? "" : (phone.AreaCode + "-")) + phone.PhoneNumber;

                                        phone = lstPhones.FirstOrDefault(o => o.DirectoryTypeId == Utility.DirectoryType.CellPhone.ToInt());
                                        if (phone != null)
                                            realPhone = (String.IsNullOrEmpty(phone.AreaCode) ? "" : (phone.AreaCode + "-")) + phone.PhoneNumber;
                                    }

                                    UpdateCouponProspect(new GlobalServices.CouponsCouponProspect()
                                    {
                                        ProspectId = couponData.CouponProspectId.GetValueOrDefault(),
                                        Name = ContactData.FirstName,
                                        LastName = ContactData.FirstLastName,
                                        Policy = SetPasstransitResult.QuotationPassTransit.Poliza,
                                        Email = realEmail,
                                        PhoneNumber = realPhone
                                    });
                                    //
                                }
                                catch (Exception ex)
                                {
                                    //throw new Exception("Ha ocurrido un error al momento de hacer el descuento de Código Promicional");
                                }
                            }
                        }
                        #endregion
                    }

                    Utility.CLoanResult CloanResult = null;
                    string LoanNumber = null;

                    var isTest = System.Configuration.ConfigurationManager.AppSettings["isTestingQuotDebug"] == "true";

                    //Si se genero el numero de poliza aunque hayan errores deben de ejecutarse los metodos de actualizacion de la poliza en global y la flat table y generar los archivos de onbase
                    if (!string.IsNullOrEmpty(PolicyNo))
                    {
                        #region Crear el prestamo en KreditCo
                        if (illustrationData.Financed.GetValueOrDefault())
                        {
                            short? ksitipoCedula = null;

                            switch (ContactIdType)
                            {
                                case 1:
                                case 3:
                                    ksitipoCedula = 1; //Cedula
                                    break;
                                case 2:
                                    ksitipoCedula = 2; //Pasaporte
                                    break;
                                case 5:
                                    ksitipoCedula = 3; //RNC
                                    break;
                            }

                            var itemContactParameter = new Utility.ContactParameter
                            {
                                Email = Email,
                                Direccion = Direccion,
                                TelefonoCasa = TelefonoCasa,
                                TelefonoTrabajo = TelefonoTrabajo,
                                TelefonoCelular = TelefonoCelular,
                                tipoCedula = ksitipoCedula,
                                CedulaRncOther = CedulaRncOther,
                                oAddress = oAddress,
                                oPhones = oPhones
                            };

                            CloanResult = kcoCreateLoan(ContactData, PolicyData, itemContactParameter, PolicyNo);

                            ErrorCreateLoanKCO = ErrorCode.Contains(CloanResult.Code);

                            if (!ErrorCreateLoanKCO)
                                LoanNumber = CloanResult.LoanNo.ToString();
                            else
                            {
                                var subject = string.Format("Bandeja {0} - Error creando préstamo en KCO para la póliza número : {1}", isTest ? "Dev" : "Prod", PolicyNo);
                                SendEmailError(CloanResult.Message, subject, "EmailSendErrorKCO");
                            }
                        }

                        #endregion

                        #region Domiciliacion
                        //Si todo esta correcto entonces verificar si hay domiciliacion del pago para entonces proceder
                        if (!illustrationData.Financed.GetValueOrDefault() && illustrationData.DirectDebit.GetValueOrDefault())
                        {
                            var Result = this.Domiciliation(ContactData, dataResultPaymentAgreement, vCompañia, Cotizacion, BeginDate, PolicyNo, UserCodeName, illustrationData.DomicileInitialPayment.GetValueOrDefault());
                            var msg = Result.oReturn.Message;

                            if (msg != "Exito")
                                SendEmailError(msg, string.Format("Bandeja {0} - Error domiciliando pago poliza número : {1}", isTest ? "Dev" : "Prod", PolicyNo), "EmailSendErrorDomiciliationGP");
                        }

                        #endregion

                        //Actualizar la poliza en global
                        UpdatePolicyByGlobal(corpId,
                                             regionId,
                                             countryId,
                                             domesticRegId,
                                             stateProvId,
                                             cityId,
                                             officeId,
                                             caseSeqNo,
                                             histSeqNo,
                                             QuotationNumber,
                                             Cotizacion.ToString(),
                                             PolicyNo,
                                             SourceId,
                                             BeginDate.GetValueOrDefault(),
                                             EndDate.GetValueOrDefault(),
                                             LoanNumber: LoanNumber,
                                             Financed: illustrationData.Financed.GetValueOrDefault()
                                             );


                        //LLevar los archivos requeridos a onBase
                        if (vOnBaseAvailable)
                            GenerateOnBaseFiles(
                                           corpId,
                                           regionId,
                                           countryId,
                                           domesticRegId,
                                           stateProvId,
                                           cityId,
                                           officeId,
                                           caseSeqNo,
                                           histSeqNo,
                                           isQuotation,
                                           ServerMapPathXML,
                                           Financed: illustrationData.Financed.GetValueOrDefault(),
                                           ErrorCreateLoanKCO: ErrorCreateLoanKCO,
                                           LoanNumber: LoanNumber,
                                           RepresentanteLegal: ContactData.ManagerName
                                          );


                    }
                }
                else
                    throw new Exception(string.Concat(GenericMessage, ",", SetPasstransitResult.Message));
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return new Tuple<string, string, bool>(PolicyNo, Quotation, HasErrorOnEmitionInvoice);
        }


        /// <summary>
        /// Notificar por correo los errores
        /// </summary>
        /// <param name="msg"></param>
        /// <param name="Subject"></param>
        /// <param name="pNameKey"></param>
        public void SendEmailError(string msg, string Subject, string pNameKey)
        {
            try
            {
                var dataEmail = dataConfig.FirstOrDefault(x => x.Namekey == pNameKey);

                if (dataEmail != null)
                {
                    //Loguear Error                      
                    oPolicyManager.InsertLog(new Policy.LogParameter
                    {
                        LogTypeId = Utility.LogTypeId.Exception.ToInt(),
                        CorpId = this.Corp_Id,
                        CompanyId = this.CompanyId,
                        ProjectId = this.ProjectId,
                        Identifier = Guid.NewGuid(),
                        LogValue = msg
                    });

                    var EmailFrom = ConfigurationManager.AppSettings["EmailFrom"];
                    var Cc = ConfigurationManager.AppSettings["EmailCc"];
                    var BCc = ConfigurationManager.AppSettings["EmailBCc"];

                    var emailSendList = dataEmail.ConfigurationValue.Split(';');

                    if (emailSendList.Count() > 1)
                    {
                        foreach (var item in emailSendList)
                        {
                            MailManager.SendMessage(
                                                    item,
                                                    Cc,
                                                    BCc,
                                                    msg,
                                                    EmailFrom,
                                                    Subject,
                                                    "",
                                                    true
                                                   );
                        }
                    }
                    else
                    {
                        MailManager.SendMessage(
                                                dataEmail.ConfigurationValue,
                                                Cc,
                                                BCc,
                                                msg,
                                                EmailFrom,
                                                Subject,
                                                "",
                                                true
                                               );
                    }
                }
            }
            catch (Exception ex)
            {
                //Loguear Error                      
                oPolicyManager.InsertLog(new Policy.LogParameter
                {
                    LogTypeId = Utility.LogTypeId.Exception.ToInt(),
                    CorpId = this.Corp_Id,
                    CompanyId = this.CompanyId,
                    ProjectId = this.ProjectId,
                    Identifier = Guid.NewGuid(),
                    LogValue = ex.Message
                });
            }
        }

        /// <summary>
        /// Enviar correo de notifcacion de creacion de prestamo de KCO
        /// </summary>
        /// <param name="msg"></param>
        /// <param name="Subject"></param>
        /// <param name="pNameKey"></param>
        public void SendEmailKCOFinanced(string msg, string Subject, string pNameKey)
        {
            try
            {
                var dataEmail = dataConfig.FirstOrDefault(x => x.Namekey == pNameKey);

                if (dataEmail != null)
                {
                    var EmailFrom = ConfigurationManager.AppSettings["EmailFrom"];
                    var Cc = ConfigurationManager.AppSettings["EmailCc"];
                    var BCc = ConfigurationManager.AppSettings["EmailBCc"];

                    var emailSendList = dataEmail.ConfigurationValue.Split(';');

                    if (emailSendList.Count() > 1)
                    {
                        foreach (var item in emailSendList)
                        {
                            MailManager.SendMessage(
                                                    item,
                                                    Cc,
                                                    BCc,
                                                    msg,
                                                    EmailFrom,
                                                    Subject,
                                                    "",
                                                    true
                                                   );
                        }
                    }
                    else
                    {
                        MailManager.SendMessage(
                                                dataEmail.ConfigurationValue,
                                                Cc,
                                                BCc,
                                                msg,
                                                EmailFrom,
                                                Subject,
                                                "",
                                                true
                                               );
                    }
                }
            }
            catch (Exception ex)
            {
                //Loguear Error                      
                oPolicyManager.InsertLog(new Policy.LogParameter
                {
                    LogTypeId = Utility.LogTypeId.Exception.ToInt(),
                    CorpId = this.Corp_Id,
                    CompanyId = this.CompanyId,
                    ProjectId = this.ProjectId,
                    Identifier = Guid.NewGuid(),
                    LogValue = ex.Message
                });
            }
        }

        /// <summary>
        /// Domiciliacion del pago con GP
        /// </summary>
        /// <param name="ContactData"></param>
        /// <param name="dataResultPaymentAgreement"></param>
        /// <param name="vCompañia"></param>
        /// <param name="Cotizacion"></param>
        /// <param name="BeginDate"></param>
        /// <param name="PolicyNo"></param>
        /// <param name="UserCodeName"></param>
        /// <returns></returns>
        public GlobalServices.GpDomiciliationResult Domiciliation(Contact ContactData,
                                                                  Payment.Agreement dataResultPaymentAgreement,
                                                                  int vCompañia,
                                                                  decimal Cotizacion,
                                                                  DateTime? BeginDate,
                                                                  string PolicyNo,
                                                                  string UserCodeName,
                                                                  bool IncludeInitialPayment
                                                                  )
        {
            var _contractClass = new GlobalServices.ST_PC_CONTRACT_CLASSES();
            var HasError = false;
            GlobalServices.PolicyGpDomiciliationparameters itemGpDomiciliation;
            GlobalServices.GpDomiciliationResult PublicCollectionContractResult = null;
            var _payments = 0;  //Cantidad de pagos a realizar.
            var _Amount = 0m;   //Pagos Siguientes
            var _InitialPayment = 0m; //Pago inicial

            if (dataResultPaymentAgreement != null)
            {
                //Buscar acuerdo en sysflex
                _payments = dataResultPaymentAgreement.PaymentsAgreementQty;
                var dataBuscarAcuerdos = oSFPolicyServiceClient.BuscarAcuerdos(vCompañia, Cotizacion, 1, dataResultPaymentAgreement.InitialPayment, _payments, "Cotizacion");
                if (!string.IsNullOrEmpty(dataBuscarAcuerdos.JSONResult))
                {
                    var DTBuscarAcuerdos = Utility.deserializeJSON<List<Utility.ItemAcuerdos>>(dataBuscarAcuerdos.JSONResult);
                    if (DTBuscarAcuerdos.Any())
                    {
                        _InitialPayment = dataResultPaymentAgreement.InitialPayment;
                        var cuota = DTBuscarAcuerdos.Where(x => x.Cuota > 0).FirstOrDefault();
                        if (cuota != null)
                            _Amount = cuota.MontoCuota;
                    }
                }
            }

            var _Paiment_Frequeci = Utility.GpFrecuencytype.Monthly.ToInt();

            var _contractNumber = string.Empty;
            var _Card_Type = string.Empty;

            var _dpDateBegin = BeginDate.GetValueOrDefault().Date.AddDays(1);
            var _dpDateEnd = _dpDateBegin.Date.AddMonths(_payments);

            GlobalServices.Customer _customer = null;
            GlobalServices.CardTypes cardType = GlobalServices.CardTypes.VISA;

            switch (ContactData.CreditCardTypeId)
            {
                case 1:
                    cardType = GlobalServices.CardTypes.MASTERCARD;
                    break;
                case 2:
                    cardType = GlobalServices.CardTypes.AMEX;
                    break;
                case 3:
                    cardType = GlobalServices.CardTypes.VISA;
                    break;
                case 4:
                    cardType = GlobalServices.CardTypes.DINERS;
                    break;
                case 5:
                    cardType = GlobalServices.CardTypes.DISCOVER;
                    break;
                case 6:
                    cardType = GlobalServices.CardTypes.AMEX;
                    break;
            }

            _customer = new GlobalServices.Customer
            {
                CustClass = string.Empty,
                Custname = ContactData.FullName,
                Custnmbr = PolicyNo,
                Inactive = 1
            };

            var dataContract = oPolicyGlobalService.GPGetContractNumber(_customer.Custnmbr, UserCodeName);
            if (!string.IsNullOrEmpty(dataContract.JSONResult))
                _contractNumber = dataContract.JSONResult.Replace("\"", "");

            var dataGpCardType = oPolicyGlobalService.GPGetCardType();

            if (!string.IsNullOrEmpty(dataGpCardType.JSONResult))
            {
                var DataCardType = Utility.deserializeJSON<Utility.GpItemCardTypes>(dataGpCardType.JSONResult);

                if (DataCardType != null)
                    _Card_Type = DataCardType.CARDNAME.FirstOrDefault(x => x.Trim().Replace(" ", "").ToUpper() == cardType.ToString().Trim().Replace(" ", "").ToUpper());
            }

            DateTime _nextDate;

            //Pago inicial
            var PaymentFreqPagoInicial = Utility.GpFrecuencytype.Onetime.ToInt();
            //_nextDate = GetNextDate(_dpDateBegin, PaymentFreqPagoInicial).GetValueOrDefault();
            _nextDate = _dpDateBegin;

            if (IncludeInitialPayment)
            {
                itemGpDomiciliation = new GlobalServices.PolicyGpDomiciliationparameters
                {
                    AccountHolderName = ContactData.CardHolder,
                    AccountNumber = Utility.Decrypt_Query(ContactData.CreditCardNumber),
                    AccountType = "CC",
                    CardType = _Card_Type,
                    ContractNumber = _contractNumber,
                    ContratClass = _contractClass,
                    CurrencyId = "Z-DOP$",
                    CustomerNumnber = _customer,
                    ExpMonth = ContactData.ExpirationDateMonth.GetValueOrDefault(),
                    ExpYear = ContactData.ExpirationDateYear.GetValueOrDefault(),
                    Frecuency = PaymentFreqPagoInicial,
                    Hold = false,
                    DayofMonth = _dpDateBegin.Day,
                    EndDate = _dpDateBegin,
                    StartDate = _dpDateBegin,
                    NextDate = _nextDate,
                    NumberofPayment = 1,
                    PaymentMethod = 0,
                    RoutingNumber = string.Empty,
                    TaxId = string.Empty,
                    amount = _InitialPayment,
                    user = UserCodeName
                };

                PublicCollectionContractResult = oPolicyGlobalService.GPPublicCollectionContract(itemGpDomiciliation);
                HasError = ErrorCode.Contains(PublicCollectionContractResult.Code);
            }

            if (!HasError)
            {
                var dataContractNextPay = oPolicyGlobalService.GPGetContractNumber(_customer.Custnmbr, UserCodeName);
                if (!string.IsNullOrEmpty(dataContractNextPay.JSONResult))
                    _contractNumber = dataContractNextPay.JSONResult.Replace("\"", "");

                //Proximos pagos
                _nextDate = GetNextDate(_dpDateBegin, _Paiment_Frequeci).GetValueOrDefault();
                itemGpDomiciliation = new GlobalServices.PolicyGpDomiciliationparameters
                {
                    AccountHolderName = ContactData.CardHolder,
                    AccountNumber = Utility.Decrypt_Query(ContactData.CreditCardNumber),
                    AccountType = "CC",
                    CardType = _Card_Type,
                    ContractNumber = _contractNumber,
                    ContratClass = _contractClass,
                    CurrencyId = "Z-DOP$",
                    CustomerNumnber = _customer,
                    ExpMonth = ContactData.ExpirationDateMonth.GetValueOrDefault(),
                    ExpYear = ContactData.ExpirationDateYear.GetValueOrDefault(),
                    Frecuency = _Paiment_Frequeci,
                    Hold = false,
                    DayofMonth = _dpDateBegin.Day,
                    EndDate = _dpDateEnd,
                    StartDate = _dpDateBegin,
                    NextDate = _nextDate,
                    NumberofPayment = _payments,
                    PaymentMethod = 0,
                    RoutingNumber = string.Empty,
                    TaxId = string.Empty,
                    amount = _Amount,
                    user = UserCodeName
                };

                PublicCollectionContractResult = oPolicyGlobalService.GPPublicCollectionContract(itemGpDomiciliation);
            }

            return
                PublicCollectionContractResult;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="_dpDateBegin"></param>
        /// <param name="_Paiment_Frequeci"></param>
        /// <returns></returns>
        private DateTime? GetNextDate(DateTime _dpDateBegin, int _Paiment_Frequeci)
        {
            try
            {
                var nextDate = _Paiment_Frequeci == 1 ? _dpDateBegin.AddDays(1) :
                               _Paiment_Frequeci == 2 ? _dpDateBegin.AddDays(7) :
                               _Paiment_Frequeci == 3 ? _dpDateBegin.AddDays(14) :
                               _Paiment_Frequeci == 4 ? _dpDateBegin.AddMonths(1) :
                               _Paiment_Frequeci == 5 ? _dpDateBegin.AddMonths(2) :
                               _Paiment_Frequeci == 6 ? _dpDateBegin.AddMonths(3) :
                               _Paiment_Frequeci == 7 ? _dpDateBegin.AddMonths(6) :
                               _Paiment_Frequeci == 8 ? _dpDateBegin.AddYears(1) : _dpDateBegin;

                return nextDate;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        /// <summary>
        /// Este metodo inserta en el core Sysflex la cotización y emite una nueva poliza de seguros de auto
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        public Tuple<String, String, Boolean> SendQuotToSysFlex(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                      , int officeId, int caseSeqNo, int histSeqNo, bool isQuotation, string QuotationNumber, string ServerMapPathXML = null)
        {
            var HasErrorOnEmitionInvoice = false;
            string vOnBaseAvailablekey = string.Empty;
            bool vOnBaseAvailable;
            string vEnabledChassisOrPlateValidationKey = string.Empty;
            bool vEnabledChassisOrPlateValidation;

            try
            {
                vOnBaseAvailablekey = ConfigurationManager.AppSettings["OnBaseAvailable"];
                bool.TryParse(vOnBaseAvailablekey, out vOnBaseAvailable);

                vEnabledChassisOrPlateValidationKey = ConfigurationManager.AppSettings["EnabledChassisOrPlateValidation"];
                bool.TryParse(vEnabledChassisOrPlateValidationKey, out vEnabledChassisOrPlateValidation);
            }
            catch (Exception)
            {
                vOnBaseAvailable = false;
                vEnabledChassisOrPlateValidation = false;
            }

            DateTime? BeginDate = null;
            DateTime? EndDate = null;
            var vCompañia = 30; //Atlantica Seguros 
            var vRamo = 106;//
            var Intermediario = 0;
            var Oficina = 0;
            var Email = default(string);
            var PolicyNo = string.Empty;
            var Quotation = string.Empty;
            int itemsCoverage = 0; //Para utilizarse como secuencia en DataCoverage


            //Data de los Vehiculos
            var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                UnderwriterId = Agent_LoginId,
                LanguageId = Language.ToInt(),
                UserId = this.UserID
            });

            #region Validaciones

            var MessageError = string.Empty;
            var ListError = new StringBuilder();

            if (vEnabledChassisOrPlateValidation)
            {
                foreach (var itemVehicle in dataVehicle)
                {
                    var JSONResult = oSFPolicyServiceClient.CheckChassisOrRegistry(new oSysFlexService.PolicyVehicleKey
                    {
                        Chassis = itemVehicle.Chassis,
                        Registry = itemVehicle.Registry
                    }).JSONResult;

                    if (JSONResult == null)
                        JSONResult = "[]";

                    var OldValue = "{}";
                    var resultString = JSONResult.Replace(OldValue, "0");

                    //Verificar si el o los vehiculos de esta poliza no esta ya registrado en sysflex
                    var dataResult = Utility.deserializeJSON<IEnumerable<Utility.VehicleIdentification>>(resultString);

                    if (dataResult.Any())
                    {
                        foreach (var item in dataResult)
                        {
                            MessageError = (item.Type == "Placa") ? string.Format(Resources.PlateValidation, item.Value.ToUpper(), item.Policy)
                                                                  : string.Format(Resources.ChassisValidation, item.Value.ToUpper(), item.Policy);

                            ListError.Append(MessageError);
                        }

                        ListError.Insert(0, Resources.ChassisOrPlateValidation);
                    }

                    MessageError = string.Empty;
                }

            }

            if (ListError.Length > 0)
            {
                Exception ex = new Exception(ListError.ToString());
                ex.Source = "I";
                throw ex;
            }
            #endregion

            #region Creacion de la cabecera de la cotizacion
            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
             , officeId, caseSeqNo, histSeqNo);

            Intermediario = PolicyData.AgentCode.ToInt();

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

            //Validar el contacto
            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager
                           .GetCommunicatonEmail(corpId, ContactData.ContactId, Language.ToInt());

            //Validar Email
            if (DataEmail.Any())
            {
                var EmailResult = DataEmail
                                 .FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                if (EmailResult != null)
                    Email = EmailResult.EmailAdress;
            }

            //Direccion del Contacto
            var oAddress = oContactManager
                          .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? oAddress.StreetAddress.Replace("'", "`") : "-";

            //Telefonos del contacto
            var oPhones = oContactManager
                          .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

            //Data Telefonos

            //Casa
            var DataTelefonoCasa = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 6);
            //Trabajo
            var DataTelefonoTrabajo = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 7);
            //Celular
            var DataTelefonoCelular = oPhones
                                   .FirstOrDefault(x => x.DirectoryTypeId == 8);

            //Casa            
            var TelefonoCasa = DataTelefonoCasa != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCasa.CountryCode, DataTelefonoCasa.AreaCode, DataTelefonoCasa.PhoneNumber)
                               : default(string);
            //Trabajo
            var TelefonoTrabajo = DataTelefonoTrabajo != null ?
                               string.Format("{0}{1}{2}", DataTelefonoTrabajo.CountryCode, DataTelefonoTrabajo.AreaCode, DataTelefonoTrabajo.PhoneNumber)
                               : default(string);
            //Celular
            var TelefonoCelular = DataTelefonoCelular != null ?
                               string.Format("{0}{1}{2}", DataTelefonoCelular.CountryCode, DataTelefonoCelular.AreaCode, DataTelefonoCelular.PhoneNumber)
                               : default(string);

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var tipoCedula = default(string);
            var Registro = dataId.FirstOrDefault();
            var ContactIdType = Registro.ContactIdType;
            var CedulaRncOther = Registro.Id;
            var ExpirationDate = Registro.ExpireDate;
            /*
             Contact_Id_Type	Contact_Id_Type_Desc
                    0	            Other
                    1	            Id
                    2	            Passport
                    3	            Driver License
                    4	            Beneficiary Document
                    5	            Company Registration
                    6	            Birth Certificate
                    7	            School Registration
                    8	            Auto Generated ID
             */

            switch (ContactIdType)
            {
                case 0:
                    tipoCedula = "2"; //Other 
                    break;
                case 1:
                    tipoCedula = "1"; //Cedula
                    break;
                case 5:
                    tipoCedula = "0"; //RNC
                    break;
                default:
                    tipoCedula = "2";
                    break;
            }

            //-- 0 = Rnc, 1 = Cedula , 2 = Otros

            var CurrencyId = 0;
            /*
             Other = 0
             Id  = 1  => Cedula
             Company Registration = 5 => Rnc
             */

            try
            {
                if (!PolicyData.CurrencyId.HasValue)
                    throw new Exception(Resources.QuotationDontHasCurrency);

                switch (PolicyData.CurrencyId.Value)
                {
                    case 1:
                        CurrencyId = 2;// Dollar
                        break;
                    case 2:
                        CurrencyId = 3;//Euros
                        break;
                    case 3:
                        CurrencyId = 1;//Pesos
                        break;
                }

                var TasaCalc = (PolicyData.TaxPercentage.GetValueOrDefault() / 100);

                if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                    TasaCalc = 0;

                var AnnualPremium = PolicyData.AnnualPremium.HasValue ? PolicyData.AnnualPremium.Value : 0;
                var PrimaTotal = AnnualPremium + (AnnualPremium * TasaCalc);

                oSysFlexService.UtilityGender Sexo;

                switch (ContactData.Gender)
                {
                    case "M":
                        Sexo = oSysFlexService.UtilityGender.Masculino;
                        break;
                    case "F":
                        Sexo = oSysFlexService.UtilityGender.Femenino;
                        break;
                    default:
                        Sexo = oSysFlexService.UtilityGender.Empresa;
                        break;
                }

                oSysFlexService.UtilityNCFType NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal;

                switch (ContactData.InvoiceTypeId)
                {
                    case 1: //Factura Valor Credito Fiscal
                        NCFType = oSysFlexService.UtilityNCFType.FacturaValorCreditoFiscal;
                        break;
                    case 5: //Factura para Regimenes Especiales
                        NCFType = oSysFlexService.UtilityNCFType.FacturaparaRegimenesEspeciales;
                        break;
                    case 6: //Comprobantes Gubernamentales
                        NCFType = oSysFlexService.UtilityNCFType.ComprobantesGubernamentales;
                        break;
                    case 7: //Factura Consumidor Final  
                        NCFType = oSysFlexService.UtilityNCFType.FacturaConsumidorFinal;
                        break;
                }

                //Obtener la oficina en sysflex
                var DataResultSearchOffice = oSFPolicyServiceClient.GetMatchOffice(PolicyData.OfficeId);

                if (DataResultSearchOffice == null || string.IsNullOrEmpty(DataResultSearchOffice.JSONResult) || DataResultSearchOffice.JSONResult == "[]")
                    throw new Exception("Error la Oficina no existe en sysflex");

                var DataOffice = Utility.deserializeJSON<List<Utility.OfficeMatchWS>>(DataResultSearchOffice.JSONResult);
                Oficina = DataOffice.FirstOrDefault().OfficeIdSysFlex.GetValueOrDefault();


                //Crear el header de la cotizacion
                var Header = new oSysFlexService.PolicyQuotationKey
                {
                    Compania = vCompañia,
                    Cotizacion = 0, //Para Craer una cotizacion nueva                    
                    TipoCedula = tipoCedula, //-- 0 = Rnc, 1 = Cedula , 2 = Otros   
                    Cedula = CedulaRncOther != null ? CedulaRncOther : default(string),
                    Nombres = (ContactData.FirstName + " " + ContactData.MiddleName).Replace("'", "`"),
                    Apellidos = (ContactData.FirstLastName + " " + ContactData.SecondLastName).Replace("'", "`"),
                    FechaNacimiento = ContactData.Dob.HasValue ? ContactData.Dob.Value : new DateTime(1753, 1, 1),
                    Intermediario = Intermediario,
                    Direccion = Direccion,
                    TelefonoCasa = TelefonoCasa != null ? TelefonoCasa : default(string),
                    TelefonoTrabajo = TelefonoTrabajo != null ? TelefonoTrabajo : default(string),
                    Celular = TelefonoCelular != null ? TelefonoCelular : default(string),
                    Email = Email != null ? Email : default(string),
                    Nacionalidad = ContactData.CountryOfBirthDesc,
                    Ramo = vRamo,
                    SubRamo = 0, //Este valor no se usa en el stored procedure que consume este metodo                    
                    PrimaTotal = PrimaTotal, //Esta es la prima con los impuestos                    
                    Hora = string.Format("{0:T}", DateTime.Now),
                    SumaAsegurada = PolicyData.InsuredAmount.HasValue ? PolicyData.InsuredAmount.Value : 0,
                    /*
                     En Global 
                     USD = 1
                     EUR = 2
                     DOP = 3
                     */

                    /*
                     En SysFlex 
                     PESOS = 1
                     DOLAR = 2
                     EURO  = 3
                    */
                    CodMoneda = CurrencyId,
                    TasaMoneda = 1,
                    Oficina = Oficina,
                    FechaExIdLicencia = ExpirationDate.HasValue ? ExpirationDate : (DateTime?)null,
                    Sexo = Sexo,
                    TipoNCF = NCFType,
                    Usuario = "VO-" + this.UserFullName,
                    QuotationNumber = PolicyData.PolicyNo
                };

                var resultHeader = oSFPolicyServiceClient.SetQuotationHeader(Header);

                if (resultHeader.Code == "002" || resultHeader.Code == "001")
                    throw new Exception(resultHeader.Message);
                else
                    if (resultHeader.Code == "000")
                {
                    //Actualizar el sourceid del contacto                    
                    ContactData.SourceId = resultHeader.PolicyQuotationHeader.SourceId;
                    oContactManager.UpdateContact(ContactData);
                }
                #endregion
                //Recorrer la lista de vehiculos para ir creando el detalle de la cotizacion                
                foreach (Policy.VehicleInsured item in dataVehicle)
                {
                    itemsCoverage++;    //Para utilizarse como secuencia en DataCoverage

                    //Crear coberturas
                    //Data Coverturas
                    var DataCoverage = oPolicyManager.GetVehicleCoverage(new Policy.VehicleCoverageGet
                    {
                        CorpId = corpId,
                        VehicleUniqueId = item.VehicleUniqueId
                    });

                    Utility.QuotationAmmount quotationAmmount = GetQuotationAmmounts(caseSeqNo,
                                                                                     cityId,
                                                                                     corpId,
                                                                                     countryId,
                                                                                     domesticRegId,
                                                                                     histSeqNo,
                                                                                     officeId,
                                                                                     regionId,
                                                                                     stateProvId,
                                                                                     item.InsuredVehicleId,
                                                                                     item.VehicleTypeId,
                                                                                     item.VehicleUniqueId,
                                                                                     DataCoverage
                                                                                     );

                    if (!item.ExpirationDate.HasValue)
                        throw new Exception(Resources.QuotationDontHasExpirationDate);

                    var pMontoImpuesto = item.PremiumAmount.GetValueOrDefault() * TasaCalc;
                    var pPrimaNeta = item.PremiumAmount.GetValueOrDefault() + pMontoImpuesto;

                    var Edad = Utility.GetAge(ContactData.Dob.GetValueOrDefault()).ToString();

                    var pSexoEdad = string.Empty;

                    if (!ContactData.IsCompany)
                    {
                        pSexoEdad = oSFPolicyServiceClient.GetSexoEdadProducto(new oSysFlexService.PolicySexoEdadKeyParameter
                        {
                            subramo = quotationAmmount.SubRamo,
                            Edad = Edad,
                            Sexo = Sexo.ToString()
                        });
                    }

                    BeginDate = PolicyData.PolicyEffectiveDate.HasValue ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                    EndDate = PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                    var ReviewDataInspection = oVehicleManager.GetVehicleReview(new Vehicle
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        InsuredVehicleId = item.InsuredVehicleId
                    });

                    var kilometraje = 0;

                    if (ReviewDataInspection.Any())
                        kilometraje = ReviewDataInspection.FirstOrDefault().Odometer.GetValueOrDefault();


                    //Crear el detalle de la cotizacion
                    var Detail = new oSysFlexService.PolicyQuotationDetailKey
                    {
                        AnoVehiculo = item.Year.ToString(),
                        Chasis = item.Chassis,
                        Cilindro = string.IsNullOrEmpty(item.CylindersTons) ? "No especificado" : item.CylindersTons,
                        Color = item.ColorDesc,
                        Compania = vCompañia,
                        Cotizacion = resultHeader.PolicyQuotationHeader.Cotizacion,
                        EstacionaEn = item.StoredDesc,
                        FechaFin = EndDate.GetValueOrDefault(),
                        FechaInicio = BeginDate.GetValueOrDefault(),
                        MarcaVehiculo = item.MakeDesc,
                        ModeloVehiculo = item.ModelDesc,
                        MontoDescuento = quotationAmmount.MontoDescuento,
                        MontoRecargo = quotationAmmount.MontoRecargo,
                        Items = 0,//Se le envia cero para insertar un nuevo detalle
                        Pasajeros = item.PassengerNumber.HasValue ? item.PassengerNumber.Value : 0,
                        Placa = item.Registry.SIsNullOrEmpty() ? "-" : item.Registry.Replace("'", "`"),
                        PorcDescuento = quotationAmmount.PorcDescuento,
                        MontoImpuesto = pMontoImpuesto,
                        PorcImpuesto = PolicyData.TaxPercentage.GetValueOrDefault(),
                        PrimaBruta = PolicyData.AnnualPremium.GetValueOrDefault(),
                        PrimaNeta = pPrimaNeta,
                        PorcRecargo = quotationAmmount.PorcRecargo,
                        Ramo = vRamo,
                        SubRamo = quotationAmmount.SubRamo,
                        SumaAsegurada = item.VehicleValue.HasValue ? (decimal)item.VehicleValue : 0,
                        TarifaLeyID = 1,
                        Tasa = 1,
                        TipoVehiculo = item.VehicleTypeDesc,
                        Uso = item.UsageDesc,
                        BeneficiarioEndoso = !string.IsNullOrEmpty(item.EndorsementBeneficiary) ? item.EndorsementBeneficiary.Replace("'", "`") : string.Empty,
                        RncBeneficiarioEndoso = item.EndorsementBbeneficiaryRnc,
                        ValorEndoso = item.EndorsementAmount,
                        NombreContactoBeneficiarioEndoso = item.EndorsementContactName,
                        TelefonoContactoBeneficiarioEndoso = item.EndorsementContactPhone,
                        CorreoContactoBeneficiarioEndoso = item.EndorsementContactEmail,
                        deducible = quotationAmmount.DeducibleDesc,
                        valorvehiculo = item.VehicleValue.HasValue ? (decimal)item.VehicleValue : 0,
                        PorciendoCobertura = "100",
                        SexoEdad = pSexoEdad,
                        Kilometraje = kilometraje,
                        Usuario = "VO-" + this.UserFullName
                    };

                    var resultDetail = oSFPolicyServiceClient.SetQuotationDetail(Detail);

                    if (resultDetail.Code == "002" || resultDetail.Code == "001")
                        throw new Exception(resultDetail.Message);
                    else
                        if (resultDetail.Code == "000")
                    {
                        //Actualizar le SourceId de la tabla de vehiculos
                        item.SourceId = resultDetail.SourceId;
                        oPolicyManager.SetVehicleInsured(item);
                    }

                    //Crear las coberturas para cada vehiculo                      
                    foreach (Policy.VehicleCoverage vehicleItem in DataCoverage)
                    {
                        var indicador = vehicleItem.CoverageTypeId == 3 ? 1 : 0;

                        var dataCoverage = getSysFlexDataCoverage(vRamo, quotationAmmount.SubRamo, item.VehicleValue.GetValueOrDefault(), indicador);

                        var CoverageId = 0;
                        var Desc = vehicleItem.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                        var dataCoverageSysflex = dataCoverage.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                        if (dataCoverageSysflex.Any())
                            CoverageId = dataCoverageSysflex.FirstOrDefault().Secuencia;

                        if (CoverageId > 0)
                        {
                            var resultCobertura = oSFPolicyServiceClient.SetQuotationCoverage(new oSysFlexService.PolicyQuotationCoverageKey
                            {
                                Compania = vCompañia,
                                Cotizacion = resultHeader.PolicyQuotationHeader.Cotizacion,
                                CoberturaID = CoverageId,
                                Items = itemsCoverage,
                                Limite = vehicleItem.CoverageLimit.Value.Truncate().ToString(CultureInfo.InvariantCulture)
                            });
                        }
                    }
                }

                var itemEmition = new oSysFlexService.PolicyQuotationCoverageEmitionKey
                {
                    CodigoConcepto = 1, // 1 Es Emision
                    Compania = vCompañia,
                    Cotizacion = resultHeader.PolicyQuotationHeader.Cotizacion,
                    Usuario = "VO-" + this.UserFullName
                };

                //Emitir la cotizacion
                var resultEmision = oSFPolicyServiceClient.SetQuotationEmition(itemEmition);

                if (resultEmision.Key != null)
                {
                    //Actualizar los datos de la poliza en global
                    UpdatePolicyByGlobal(corpId,
                                         regionId,
                                         countryId,
                                         domesticRegId,
                                         stateProvId,
                                         cityId,
                                         officeId,
                                         caseSeqNo,
                                         histSeqNo,
                                         QuotationNumber,
                                         resultHeader.PolicyQuotationHeader.Cotizacion.ToString(),
                                         resultEmision.Key.Poliza,
                                         resultEmision.Key.SourceId,
                                         BeginDate.GetValueOrDefault(),
                                         EndDate.GetValueOrDefault()
                                         );

                    //Generar la factura
                    var result = oSFPolicyServiceClient.SetQuotationEmitionFactura(itemEmition);

                    HasErrorOnEmitionInvoice = (result.Code.ToInt() == -1);

                    if (!HasErrorOnEmitionInvoice)
                    {
                        //Guardar el acuerdo de pago                    
                        var dataResult = this.oPaymentManager.GetPaymentAgreement(new Entity.UnderWriting.Entities.Payment.Agreement
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo
                        });

                        var PaymentsAgreementQty = 0;
                        var InitialPayment = 0M;

                        if (dataResult != null)
                        {
                            PaymentsAgreementQty = dataResult.PaymentsAgreementQty;
                            InitialPayment = dataResult.InitialPayment;
                        }

                        var item = new oSysFlexService.PolicyPaymentAgreementKey
                        {
                            compania = vCompañia,
                            usuario = UserName,
                            sistema = "New Business",
                            cantidadCuotas = PaymentsAgreementQty,
                            inicial = InitialPayment,
                            cotizacion = resultHeader.PolicyQuotationHeader.Cotizacion
                        };

                        oSFPolicyServiceClient.SetPaymentAgreement(item);
                    }

                    //LLevar los archivos requeridos a onBase
                    if (vOnBaseAvailable)
                        GenerateOnBaseFiles(
                                            corpId,
                                            regionId,
                                            countryId,
                                            domesticRegId,
                                            stateProvId,
                                            cityId,
                                            officeId,
                                            caseSeqNo,
                                            histSeqNo,
                                            isQuotation,
                                            ServerMapPathXML,
                                            RepresentanteLegal: ContactData.ManagerName
                                           );
                }
                else
                    throw new Exception(resultEmision.Message);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return new Tuple<string, string, bool>(this.Policy_Id, Quotation, HasErrorOnEmitionInvoice);
        }


        /// <summary>
        /// Obtener las coberturas de SysFlex
        /// </summary>
        /// <param name="vRamo"></param>
        /// <param name="SubRamo"></param>
        /// <param name="VehiculoMonto"></param>
        /// <param name="Indicador"></param>
        /// <returns></returns>
        private List<Utility.SysflexProduct> getSysFlexDataCoverage(int vRamo, int SubRamo, decimal VehiculoMonto, int Indicador)
        {
            List<Utility.SysflexProduct> result = null;

            var PolicyCoverageKey = new oSysFlexService.PolicyCoverageKey
            {
                Ramo = vRamo,
                VehiculoMonto = VehiculoMonto,
                CoverageID = SubRamo,
                Indicador = Indicador
            };

            //Extraer informacion de coverturas en sysflex
            var CoverageSysflex = oSFPolicyServiceClient.GetCoverageProduct(PolicyCoverageKey);

            if (string.IsNullOrEmpty(CoverageSysflex.JSONResult) || CoverageSysflex.JSONResult.ToLower() == "null")
                throw new Exception(CoverageSysflex.Message);

            var oCoverageSysflexValues = new List<Utility.SysflexProduct>();

            if (!string.IsNullOrEmpty(CoverageSysflex.JSONResult) && CoverageSysflex.JSONResult.ToLower() != "null")
            {
                var OldValue = "{}";
                var resultString = CoverageSysflex.JSONResult.Replace(OldValue, "0");
                oCoverageSysflexValues = Utility.deserializeJSON<List<Utility.SysflexProduct>>(resultString);
                result = oCoverageSysflexValues;
            }

            return
                result;
        }

        private void SetFacultativeProduct(int corpId, int regionId, int countryId, int domesticRegId,
                                           int stateProvId, int cityId, int officeId, int caseSeqNo, int histSeqNo,
                                           List<Tuple<int, int, string>> lcoveragesids, long UniqueId,
                                           bool? AppliesToReinsurance, decimal? ReinsuranceAmount, string[] ErrorCode, int vCompañia, decimal Cotizacion,
                                           int itemsCoverage, string UserCodeName, Utility.RequestType requestType = Utility.RequestType.Emision, int? SecuenciaMov = null)
        {

            /*Facultativo Si Aplica*/
            bool applyReinsu = AppliesToReinsurance.HasValue ? AppliesToReinsurance.Value : false;
            decimal reinsuAmo = ReinsuranceAmount.HasValue ? ReinsuranceAmount.Value : 0;

            if (applyReinsu && reinsuAmo > 0)
            {
                var dtFacultativeContractCoverage = oPolicyManager.GetFacultativeContractCoverage(new Policy.Facultative.Key
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    UniqueId = UniqueId
                });

                if (dtFacultativeContractCoverage.Rows.Count > 0)
                {
                    var lccs = new List<Utility.ContractCoveragesSysflex>(0);

                    var dtFacultativeContractCoverage2 = oPolicyManager.GetFacultativeContractCoverage2(new Policy.Facultative.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        UniqueId = UniqueId
                    });

                    int incrementID = 1;
                    var lIncrementID = new List<int>(0);

                    foreach (var fcc in dtFacultativeContractCoverage2)
                    {
                        var ids = lcoveragesids.FirstOrDefault(x => x.Item2 == fcc.CoverageId);

                        if (lIncrementID.Contains(fcc.CompanyFacultativeNameKey.ToInt()) && ids != null)
                        {
                            var Item = new Utility.ContractCoveragesSysflex()
                            {
                                AseguradoraId = fcc.CompanyFacultativeNameKey.ToInt(),
                                CoberturaId = ids.Item1,
                                CoberturaPorcComisio = fcc.ContractCoveragePercentage,
                                ContratoMonto = fcc.ContractAmount,
                                ContratoNombre = fcc.ContractName,
                                ContratoPorcComision = fcc.ContractCommissionPercentage,
                                FechaDePago = fcc.PaymentDate.GetValueOrDefault(),
                                Id = incrementID
                            };

                            lccs.Add(Item);

                            incrementID++;
                            lIncrementID.Add(fcc.CompanyFacultativeNameKey.ToInt());
                        }
                        else if (ids != null)
                        {
                            lIncrementID = new List<int>();
                            incrementID = 1;

                            var item2 = new Utility.ContractCoveragesSysflex()
                            {
                                AseguradoraId = fcc.CompanyFacultativeNameKey.ToInt(),
                                CoberturaId = ids.Item1,
                                CoberturaPorcComisio = fcc.ContractCoveragePercentage,
                                ContratoMonto = fcc.ContractAmount,
                                ContratoNombre = fcc.ContractName,
                                ContratoPorcComision = fcc.ContractCommissionPercentage,
                                FechaDePago = fcc.PaymentDate.GetValueOrDefault(),
                                Id = incrementID
                            };

                            lccs.Add(item2);

                            lIncrementID.Add(fcc.CompanyFacultativeNameKey.ToInt());
                            incrementID++;
                        }
                    }

                    dtFacultativeContractCoverage = Utility.AsDataTable<Utility.ContractCoveragesSysflex>(lccs);

                    var FacArgs = new PolicyFacultativePlacementParameter()
                    {
                        Compania = vCompañia,
                        Cotizacion = Cotizacion,
                        Secuencia = itemsCoverage,
                        Usuario = UserCodeName,
                        ContratoCobertura = dtFacultativeContractCoverage,
                        SecuenciaMov = SecuenciaMov.HasValue ? SecuenciaMov.GetValueOrDefault() : -1
                    };

                    getResult resultFacultativePlacement = null;

                    switch (requestType)
                    {
                        case Utility.RequestType.Emision:
                            resultFacultativePlacement = oSFPolicyServiceClient.SetFacultativePlacementSysflex(FacArgs);
                            break;
                        case Utility.RequestType.Inclusion:
                            resultFacultativePlacement = oSFPolicyServiceClient.SetFacultativePlacementSysflexMov(FacArgs);
                            break;
                        case Utility.RequestType.Exclusion:
                            break;
                        case Utility.RequestType.Renovacion:
                            break;
                    }

                    var hasError = (ErrorCode.Contains(resultFacultativePlacement.Code));

                    if (hasError)
                        throw new Exception(resultFacultativePlacement.Message);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ContratosTemp"></param>
        /// <returns></returns>
        public Tuple<bool, string> ExisteNombreContratoEnSysFlex(List<Utility.Contrato> ContratosTemp = null)
        {
            var ContratosExistentesEnSysFlex = new List<string>(0);
            var ContratosItems = new List<Tuple<long, string>>(0);
            var result = new Tuple<bool, string>(false, string.Empty);

            //Recorrer los items de esta poliza
            switch (ProductLine)
            {
                case Utility.ProductLine.Auto:
                    if (ContratosTemp == null)
                    {
                        //Data de los Vehiculos
                        var dataVehicle = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                        {
                            CorpId = Corp_Id,
                            RegionId = Region_Id,
                            CountryId = Country_Id,
                            DomesticregId = Domesticreg_Id,
                            StateProvId = State_Prov_Id,
                            CityId = City_Id,
                            OfficeId = Office_Id,
                            CaseSeqNo = Case_Seq_No,
                            HistSeqNo = Hist_Seq_No,
                            UnderwriterId = Agent_LoginId,
                            LanguageId = Language.ToInt(),
                            UserId = this.UserID
                        });

                        foreach (var _keyItemSelected in dataVehicle)
                        {
                            //Buscar los contratos de este item
                            var DataContract = oPolicyManager.GetFacultativeContract(new Policy.Facultative.Key
                            {
                                CorpId = _keyItemSelected.CorpId,
                                RegionId = _keyItemSelected.RegionId,
                                CountryId = _keyItemSelected.CountryId,
                                DomesticregId = _keyItemSelected.DomesticregId,
                                StateProvId = _keyItemSelected.StateProvId,
                                CityId = _keyItemSelected.CityId,
                                OfficeId = _keyItemSelected.OfficeId,
                                CaseSeqNo = _keyItemSelected.CaseSeqNo,
                                HistSeqNo = _keyItemSelected.HistSeqNo,
                                UniqueId = _keyItemSelected.VehicleUniqueId
                            }).Where(x => x.ContractName != "Retencion");

                            foreach (var item in DataContract)
                                ContratosItems.Add(new Tuple<long, string>(_keyItemSelected.VehicleUniqueId, item.ContractName));
                        }
                    }
                    break;
                case Utility.ProductLine.AlliedLines:
                    switch (AlliedLinesProductBehavior)
                    {
                        case Utility.AlliedLinesType.Airplane:
                            var AirPlaneDetail = oAirPlaneManager.GetAirplaneInsured(new Airplane.Insured.Key
                            {
                                CorpId = Corp_Id,
                                RegionId = Region_Id,
                                CountryId = Country_Id,
                                DomesticRegId = Domesticreg_Id,
                                StateProvId = State_Prov_Id,
                                CityId = City_Id,
                                OfficeId = Office_Id,
                                CaseSeqNo = Case_Seq_No,
                                HistSeqNo = Hist_Seq_No
                            });

                            foreach (var _keyItemSelected in AirPlaneDetail)
                            {
                                //Buscar los contratos de este item
                                var DataContract = oPolicyManager.GetFacultativeContract(new Policy.Facultative.Key
                                {
                                    CorpId = _keyItemSelected.CorpId.GetValueOrDefault(),
                                    RegionId = _keyItemSelected.RegionId.GetValueOrDefault(),
                                    CountryId = _keyItemSelected.CountryId.GetValueOrDefault(),
                                    DomesticregId = _keyItemSelected.DomesticRegId.GetValueOrDefault(),
                                    StateProvId = _keyItemSelected.StateProvId.GetValueOrDefault(),
                                    CityId = _keyItemSelected.CityId.GetValueOrDefault(),
                                    OfficeId = _keyItemSelected.OfficeId.GetValueOrDefault(),
                                    CaseSeqNo = _keyItemSelected.CaseSeqNo.GetValueOrDefault(),
                                    HistSeqNo = _keyItemSelected.HistSeqNo.GetValueOrDefault(),
                                    UniqueId = _keyItemSelected.UniqueAirplaneId
                                }).Where(x => x.ContractName != "Retencion");

                                foreach (var item in DataContract)
                                    ContratosItems.Add(new Tuple<long, string>(_keyItemSelected.UniqueAirplaneId, item.ContractName));
                            }
                            break;
                        case Utility.AlliedLinesType.Bail:
                            var BailDetail = oBailManager.GetBailInsured(new Entity.UnderWriting.Entities.Bail.Insured.Key
                            {
                                CorpId = Corp_Id,
                                RegionId = Region_Id,
                                CountryId = Country_Id,
                                DomesticRegId = Domesticreg_Id,
                                StateProvId = State_Prov_Id,
                                CityId = City_Id,
                                OfficeId = Office_Id,
                                CaseSeqNo = Case_Seq_No,
                                HistSeqNo = Hist_Seq_No
                            });

                            foreach (var _keyItemSelected in BailDetail)
                            {
                                //Buscar los contratos de este item
                                var DataContract = oPolicyManager.GetFacultativeContract(new Policy.Facultative.Key
                                {
                                    CorpId = _keyItemSelected.CorpId.GetValueOrDefault(),
                                    RegionId = _keyItemSelected.RegionId.GetValueOrDefault(),
                                    CountryId = _keyItemSelected.CountryId.GetValueOrDefault(),
                                    DomesticregId = _keyItemSelected.DomesticregId.GetValueOrDefault(),
                                    StateProvId = _keyItemSelected.StateProvId.GetValueOrDefault(),
                                    CityId = _keyItemSelected.CityId.GetValueOrDefault(),
                                    OfficeId = _keyItemSelected.OfficeId.GetValueOrDefault(),
                                    CaseSeqNo = _keyItemSelected.CaseSeqNo.GetValueOrDefault(),
                                    HistSeqNo = _keyItemSelected.HistSeqNo.GetValueOrDefault(),
                                    UniqueId = _keyItemSelected.UniqueBailId
                                }).Where(x => x.ContractName != "Retencion");

                                foreach (var item in DataContract)
                                    ContratosItems.Add(new Tuple<long, string>(_keyItemSelected.UniqueBailId, item.ContractName));
                            }
                            break;
                        case Utility.AlliedLinesType.Navy:
                            var NavyDetail = oNavyManager.GetNavyInsured(new Navy.Insured.Key
                            {
                                CorpId = Corp_Id,
                                RegionId = Region_Id,
                                CountryId = Country_Id,
                                DomesticRegId = Domesticreg_Id,
                                StateProvId = State_Prov_Id,
                                CityId = City_Id,
                                OfficeId = Office_Id,
                                CaseSeqNo = Case_Seq_No,
                                HistSeqNo = Hist_Seq_No
                            });

                            foreach (var _keyItemSelected in NavyDetail)
                            {
                                //Buscar los contratos de este item
                                var DataContract = oPolicyManager.GetFacultativeContract(new Policy.Facultative.Key
                                {
                                    CorpId = _keyItemSelected.CorpId,
                                    RegionId = _keyItemSelected.RegionId,
                                    CountryId = _keyItemSelected.CountryId,
                                    DomesticregId = _keyItemSelected.DomesticRegId,
                                    StateProvId = _keyItemSelected.StateProvId,
                                    CityId = _keyItemSelected.CityId,
                                    OfficeId = _keyItemSelected.OfficeId,
                                    CaseSeqNo = _keyItemSelected.CaseSeqNo,
                                    HistSeqNo = _keyItemSelected.HistSeqNo,
                                    UniqueId = _keyItemSelected.UniqueNavyId
                                }).Where(x => x.ContractName != "Retencion");

                                foreach (var item in DataContract)
                                    ContratosItems.Add(new Tuple<long, string>(_keyItemSelected.UniqueNavyId, item.ContractName));
                            }
                            break;
                        case Utility.AlliedLinesType.Property:
                            var PropertyDetail = oPropertyManager.GetProperty(new Property.Key
                            {
                                CorpId = Corp_Id,
                                RegionId = Region_Id,
                                CountryId = Country_Id,
                                DomesticregId = Domesticreg_Id,
                                StateProvId = State_Prov_Id,
                                CityId = City_Id,
                                OfficeId = Office_Id,
                                CaseSeqNo = Case_Seq_No,
                                HistSeqNo = Hist_Seq_No
                            });

                            foreach (var _keyItemSelected in PropertyDetail)
                            {
                                //Buscar los contratos de este item
                                var DataContract = oPolicyManager.GetFacultativeContract(new Policy.Facultative.Key
                                {
                                    CorpId = _keyItemSelected.CorpId,
                                    RegionId = _keyItemSelected.RegionId,
                                    CountryId = _keyItemSelected.CountryId,
                                    DomesticregId = _keyItemSelected.DomesticregId,
                                    StateProvId = _keyItemSelected.StateProvId,
                                    CityId = _keyItemSelected.CityId,
                                    OfficeId = _keyItemSelected.OfficeId,
                                    CaseSeqNo = _keyItemSelected.CaseSeqNo,
                                    HistSeqNo = _keyItemSelected.HistSeqNo,
                                    UniqueId = _keyItemSelected.UniquePropertyId
                                }).Where(x => x.ContractName != "Retencion");

                                foreach (var item in DataContract)
                                    ContratosItems.Add(new Tuple<long, string>(_keyItemSelected.UniquePropertyId, item.ContractName));
                            }
                            break;
                        case Utility.AlliedLinesType.Transport:
                            var TransportDetail = oTransportManager.GetTransportInsured(new Transport.Insured.Key
                            {
                                CorpId = Corp_Id,
                                RegionId = Region_Id,
                                CountryId = Country_Id,
                                DomesticregId = Domesticreg_Id,
                                StateProvId = State_Prov_Id,
                                CityId = City_Id,
                                OfficeId = Office_Id,
                                CaseSeqNo = Case_Seq_No,
                                HistSeqNo = Hist_Seq_No
                            });

                            foreach (var _keyItemSelected in TransportDetail)
                            {
                                //Buscar los contratos de este item
                                var DataContract = oPolicyManager.GetFacultativeContract(new Policy.Facultative.Key
                                {
                                    CorpId = _keyItemSelected.CorpId.GetValueOrDefault(),
                                    RegionId = _keyItemSelected.RegionId.GetValueOrDefault(),
                                    CountryId = _keyItemSelected.CountryId.GetValueOrDefault(),
                                    DomesticregId = _keyItemSelected.DomesticRegId.GetValueOrDefault(),
                                    StateProvId = _keyItemSelected.StateProvId.GetValueOrDefault(),
                                    CityId = _keyItemSelected.CityId.GetValueOrDefault(),
                                    OfficeId = _keyItemSelected.OfficeId.GetValueOrDefault(),
                                    CaseSeqNo = _keyItemSelected.CaseSeqNo.GetValueOrDefault(),
                                    HistSeqNo = _keyItemSelected.HistSeqNo.GetValueOrDefault(),
                                    UniqueId = _keyItemSelected.UniqueTransportId
                                }).Where(x => x.ContractName != "Retencion");

                                foreach (var item in DataContract)
                                    ContratosItems.Add(new Tuple<long, string>(_keyItemSelected.UniqueTransportId, item.ContractName));
                            }
                            break;
                    }
                    break;
            }

            #region codigo de verifcacion de los nombres de contrato en Sysflex
            //Validar los nombres de los contratos en SysFlex
            var ContratosResult = oSFPolicyServiceClient.GetContrato();

            if (!string.IsNullOrEmpty(ContratosResult.JSONResult) ||
                ContratosResult.JSONResult != "[]" ||
                ContratosResult.JSONResult.ToLower() != "null")
            {
                var dataNombresContratos = Utility.deserializeJSON<List<string>>(ContratosResult.JSONResult).Select(c => c.ToUpper());

                foreach (var item in ContratosItems)
                {
                    var xData = dataNombresContratos.Contains(item.Item2.ToUpper());

                    if (xData)
                        ContratosExistentesEnSysFlex.Add(item.Item2);
                }
            }

            if (ContratosExistentesEnSysFlex.Any())
            {
                var contratosMsg = string.Join(",", ContratosExistentesEnSysFlex.ToArray());
                var msg = ContratosExistentesEnSysFlex.Count() > 1 ? string.Format("Los contratos : {0} existen en SysFlex debe modificar los nombres antes de guardar y/o emitir", contratosMsg)
                                                                   : string.Format("El contrato : {0} existe en SysFlex debe modificar el nombre antes de guardar y/o emitir", contratosMsg);

                result = new Tuple<bool, string>
                        (true, msg);
            }

            #endregion

            return
                 result;
        }

        /// <summary>
        /// Actualizar la poliza en global
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="QuotationNumber"></param>
        /// <param name="Cotizacion"></param>
        /// <param name="Poliza"></param>
        /// <param name="SourceId"></param>
        public void UpdatePolicyByGlobal(int corpId,
                                          int regionId,
                                          int countryId,
                                          int domesticRegId,
                                          int stateProvId,
                                          int cityId,
                                          int officeId,
                                          int caseSeqNo,
                                          int histSeqNo,
                                          string QuotationNumber,
                                          string Cotizacion,
                                          string Poliza,
                                          string SourceId,
                                          DateTime EffectiveDate,
                                          DateTime ExpirationDate,
                                          string LoanNumber = null,
                                          bool Financed = false,
                                          Utility.RequestType requestType = Utility.RequestType.Emision
                                          )
        {

            if (requestType == Utility.RequestType.Emision)
            {
                //Actualizar el numero de la poliza
                oPolicyManager.SetPolicyNo(new Policy.Number
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticRegId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    PolicyNo = Poliza,
                    UserId = UserID
                });

                //Actualizar el sourceID  
                oPolicyManager.SetPolicySourceId(new Policy.PSourceId
                {
                    PolicyNo = Poliza,
                    SourceId = SourceId,
                    UserId = this.UserID.GetValueOrDefault()
                });
            }

            //Actualizar la fecha de efectividad de la poliza
            oPolicyManager.UpdatePolicyEffectiveDate(new Policy.OEffectiveDate
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticRegId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                EffectiveDate = EffectiveDate
            });

            //Actualizar la fecha de expiración de la poliza
            oPolicyManager.UpdatePolicyExpirationDate(new Policy.OExpirationDate
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticRegId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                ExpirationDate = ExpirationDate
            });

            //Actualizar el status de la poliza
            var oPolicyChangeStatus = new Policy.Parameter
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                StatusChangeTypeId = 12,
                UserId = this.UserID
            };

            oPolicyChangeStatus.StatusId = 19; //Aprobada por suscripcion
            oPolicyManager.SetPolicyStatus(oPolicyChangeStatus);
            oPolicyChangeStatus.StatusId = 10; //Efectiva
            oPolicyManager.SetPolicyStatus(oPolicyChangeStatus);
            this.Policy_Id = Poliza;

            if (Financed)
                //Actualizar le numero de prestamo en caso de que esta poliza sea financiada
                oPolicyManager.SetPolicyLoanNo
                    (
                        corpId,
                        regionId,
                        countryId,
                        domesticRegId,
                        stateProvId,
                        cityId,
                        officeId,
                        caseSeqNo,
                        histSeqNo,
                        LoanNumber,
                        UserID.GetValueOrDefault()
                    );

            //Actualizar la tabla temporal
            var resultUpdateByQuotation = UpdateTempTable(QuotationNumber, UserID.GetValueOrDefault());

            if (!resultUpdateByQuotation)
                //Actualizar la tabla temporal
                UpdateTempTable(Poliza, UserID.GetValueOrDefault());
        }


        /// <summary>
        /// Obtener el binario del documento pdf
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="DocumentCategoryId"></param>
        /// <param name="DocumentTypeId"></param>
        /// <param name="DocumentId"></param>
        /// <returns></returns>
        public Tuple<byte[], DateTime, string> GetBinaryDocument(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                      , int officeId, int caseSeqNo, int histSeqNo, int DocumentCategoryId, int DocumentTypeId, int DocumentId)
        {
            var Document = oPaymentManager.GetDocument(corpId,
                                                       regionId,
                                                       countryId,
                                                       domesticRegId,
                                                       stateProvId,
                                                       cityId,
                                                       officeId,
                                                       caseSeqNo,
                                                       histSeqNo,
                                                       DocumentCategoryId,
                                                       DocumentTypeId,
                                                       DocumentId
                                                      );

            return new Tuple<byte[], DateTime, string>(
                                                       Document.DocumentBinary,
                                                       Document.FileCreationDate.GetValueOrDefault(),
                                                       Document.DocumentName
                                                      );
        }

        /// <summary>
        /// Llevar los archivos de la cotización/poliza al sistema onbase
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="isQuotation"></param>
        /// <param name="ServerMaptPathXML"></param>
        public void GenerateOnBaseFiles(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                      , int officeId, int caseSeqNo, int histSeqNo, bool isQuotation = false,
                                       string ServerMaptPathXML = null, string Oficina = "",
                                       string Plan = "",
                                       string Producto = "",
                                       bool Financed = false,
                                       bool ErrorCreateLoanKCO = false,
                                       string LoanNumber = null,
                                       bool CopyKCOFile = true,
                                       bool CopyATLFile = true,
                                       string RepresentanteLegal = ""
                                       )
        {
            const string FormatoFecha = "{0:dd-MMM-yyyy}";
            var vFileName = string.Empty;
            var PolicyNo = this.Policy_Id;
            var ErrorsGenerateFiles = new StringBuilder();
            var StringResult = string.Empty;
            var StringResultKCO = string.Empty;
            var StringResultFinal = new StringBuilder();
            var StringResultFinalKCO = new StringBuilder();
            var PathFiletxt = string.Empty;
            var PathFiletxtKCO = string.Empty;
            StringBuilder TextBuilder;
            var FileList = new List<Tuple<byte[], string, string>>(0);
            var OnBasePath = string.Empty;
            var OnBasePathKCO = string.Empty;
            var SUSEndosoCesionDerechos = string.Empty;
            var SUSCotizacion = string.Empty;
            var SUSFormularioInspeccion = string.Empty;
            var PathFileDoc = string.Empty;
            var PathFileDocKCO = string.Empty;
            IEnumerable<Policy.VehicleInsured> Vehicles = null;
            IEnumerable<Policy.Vehicle.Requirement> DocReqVehicle = null;
            IEnumerable<Requirement.Product> DocReqAlliedLines = null;
            IEnumerable<Requirement.Product> oDocReqVehicle = null;
            var ErrorInKCO = false;
            var ErrorInATL = false;
            var ftpksiHostname = string.Empty;
            var ftpksiUsername = string.Empty;
            var ftpksiPassword = string.Empty;
            var ftpksiPort = string.Empty;

            string chasis = "";

            try
            {
                var IlustrationData = getillustrationData();
                var RequestType = (Utility.RequestType)Enum.Parse(typeof(Utility.RequestType), IlustrationData.RequestTypeDesc.MyRemoveInvalidCharactersFilName());
                if (string.IsNullOrEmpty(RepresentanteLegal))
                {
                    RepresentanteLegal = "";
                }

                OnBasePath = ProductLine == Utility.ProductLine.Auto ? System.Configuration.ConfigurationManager.AppSettings["OnBasePath"]
                                                                     : System.Configuration.ConfigurationManager.AppSettings["OnBasePathIL"];

                OnBasePathKCO = ProductLine == Utility.ProductLine.Auto ? System.Configuration.ConfigurationManager.AppSettings["OnBasePathKSI"]
                                                                        : System.Configuration.ConfigurationManager.AppSettings["OnBasePathKSIPropiedad"];

                //ftpksiHostname = System.Configuration.ConfigurationManager.AppSettings["ftpksiHostname"];
                //ftpksiUsername = System.Configuration.ConfigurationManager.AppSettings["ftpksiUsername"];
                //ftpksiPassword = System.Configuration.ConfigurationManager.AppSettings["ftpksiPassword"];
                //ftpksiPort = System.Configuration.ConfigurationManager.AppSettings["ftpksiPort"];

                SUSEndosoCesionDerechos = System.Configuration.ConfigurationManager.AppSettings["SUSEndosoCesionDerechos"];
                SUSCotizacion = System.Configuration.ConfigurationManager.AppSettings["SUSCotizacion"];
                SUSFormularioInspeccion = System.Configuration.ConfigurationManager.AppSettings["SUSFormularioInspeccion"];
                PathFileDoc = string.Concat(OnBasePath, @"\");
                PathFileDocKCO = string.Concat(OnBasePathKCO, @"\");

                #region Auto
                if (ProductLine == Utility.ProductLine.Auto)
                {
                    if (RequestType == Utility.RequestType.Exclusion)
                    {
                        oDocReqVehicle = oRequirementManager.GetRequirementProduct(new Requirement.Product.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticRegId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                        });

                        if (oDocReqVehicle.Count() == 0)
                            return;
                    }
                    else
                    {
                        //Obtener los documentos requeridos para vehiculos
                        DocReqVehicle = oPolicyManager.GetVehicleRequirement(new Policy.Parameter
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticregId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                            UnderwriterId = Agent_LoginId,
                            LanguageId = Language.ToInt(),
                            AgentId = Agent_LoginId,
                            UserId = UserID,
                            StatusChangeTypeId = null,
                            StatusId = null,
                            ContactId = null
                        }).Where(o => o.DocumentId.HasValue && o.RequimentOnBaseNameKey != "ClienteContactadoVíaTelefonica");

                        if (DocReqVehicle.Count() == 0)
                            return;
                    }

                }
                #endregion
                #region Propiedad
                else
                    if (ProductLine == Utility.ProductLine.AlliedLines)
                {
                    //Obtener los documentos requeridos para incendio y lineas aliadas
                    DocReqAlliedLines = oRequirementManager.GetRequirementProduct(new Requirement.Product.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticRegId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No,
                        ContactId = null
                    }).Where(o => o.DocumentId.HasValue && o.RequimentOnBaseNameKey != "ClienteContactadoVíaTelefonica");

                    if (DocReqAlliedLines.Count() == 0)
                        return;
                }
                #endregion

                var PathFile = string.Empty;

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                var vinsured = oVehicleManager.GetVehicleInsured(new Vehicle.Policy()
                {
                    CaseSeqNo = PolicyData.CaseSeqNo,
                    CityId = PolicyData.CityId,
                    ContactId = PolicyData.ContactId,
                    CorpId = PolicyData.CorpId,
                    CountryId = PolicyData.CountryId,
                    DomesticRegId = PolicyData.DomesticregId,
                    HistSeqNo = PolicyData.HistSeqNo,
                    OfficeId = PolicyData.OfficeId,
                    RegionId = PolicyData.RegionId,
                    StateProvId = PolicyData.StateProvId,
                    PolicyStatusId = PolicyData.PolicyStatusId
                }).ToList();

                if (RequestType == Utility.RequestType.Exclusion || RequestType == Utility.RequestType.Inclusion || RequestType == Utility.RequestType.Cambios)
                    PolicyNo = PolicyData.PolicyNoMain;

                vFileName = PolicyNo + ".txt";
                PathFiletxt = string.Concat(OnBasePath, @"\", vFileName);
                PathFiletxtKCO = string.Concat(OnBasePathKCO, @"\", vFileName);

                //Objeto de la data del Contacto            
                var ContactData = oContactManager.GetContact(Corp_Id, PolicyData.ContactId, Language.ToInt());

                //Id Doc
                var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
                var RecordId = dataId.FirstOrDefault();

                //FTPHelper oFTPHelper = new FTPHelper(ftpksiHostname, ftpksiUsername, ftpksiPassword, "");
                //var ListFileKSI = new List<FileInfo>(0);

                #region Documentos Requeridos
                #region Auto
                if (ProductLine == Utility.ProductLine.Auto)
                {
                    if (RequestType == Utility.RequestType.Exclusion)
                    {
                        foreach (var item in oDocReqVehicle)
                        {
                            //Obener el documento
                            var DocData = GetBinaryDocument(corpId,
                                                            regionId,
                                                            countryId,
                                                            domesticRegId,
                                                            stateProvId,
                                                            cityId,
                                                            officeId,
                                                            caseSeqNo,
                                                            histSeqNo,
                                                            item.DocCategoryId.Value,
                                                            item.DocTypeId.Value,
                                                            item.DocumentId.Value
                                                           );


                            TextBuilder = getIndexFileText();

                            var FechaAutorizacion = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DocData.Item2);
                            var FechaFinal = PolicyData.ExpirationDate.HasValue ? string.Format(CultureInfo.InvariantCulture, FormatoFecha, PolicyData.ExpirationDate.Value)
                                                                                : string.Empty;

                            var FechaInicio = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DocData.Item2);

                            var RutaRequireDoc = PathFileDoc + PolicyNo + "-" + DocData.Item3;
                            var RutaRequireDocKCO = PathFileDocKCO + PolicyNo + "-" + DocData.Item3;

                            StringResult = string.Format(TextBuilder.ToString(),
                                                         item.RequimentOnBaseNameKey, //{0}
                                                         FechaAutorizacion,//{1}
                                                         isQuotation ? "" : PolicyNo,//{2}
                                                         ContactData.FullName,//{3}
                                                         FechaAutorizacion,//{4}
                                                         FechaFinal,//{5}
                                                         FechaInicio,//{6}
                                                         UserName,//{7}
                                                         isQuotation ? PolicyNo : "",//{8}
                                                         item.RequimentOnBaseNameKey == "SUS-Cedula" ? RecordId.Id : string.Empty,//{9}                                                                                    
                                                         string.Empty, //{10}
                                                         RutaRequireDoc,//{11}
                                                         RequestType, //{12}
                                                         "", /////{13}
                                                         RepresentanteLegal //{14}
                                                        );

                            StringResultFinal.AppendLine(StringResult);


                            if (Financed && !ErrorCreateLoanKCO)
                            {
                                StringResultKCO = string.Format(TextBuilder.ToString(),
                                                             item.RequimentOnBaseNameKey, //{0}
                                                             FechaAutorizacion,//{1}
                                                             isQuotation ? "" : PolicyNo,//{2}
                                                             ContactData.FullName,//{3}
                                                             FechaAutorizacion,//{4}
                                                             FechaFinal,//{5}
                                                             FechaInicio,//{6}
                                                             UserName,//{7}
                                                             isQuotation ? PolicyNo : "",//{8}
                                                             item.RequimentOnBaseNameKey == "SUS-Cedula" ? RecordId.Id : string.Empty,//{9}                                                                                    
                                                             LoanNumber, //{10}
                                                             RutaRequireDocKCO,//{11}
                                                             RequestType, //{12}
                                                             "", /////{13}
                                                             RepresentanteLegal //{14}
                                                            );

                                StringResultFinalKCO.AppendLine(StringResultKCO);
                            }

                            //Guardar el archivo pdf                    
                            FileList.Add(new Tuple<byte[], string, string>(DocData.Item1, RutaRequireDoc, (Financed && !ErrorCreateLoanKCO) ? RutaRequireDocKCO : string.Empty));
                        }
                    }
                    else
                    {
                        foreach (var item in DocReqVehicle)
                        {
                            //Obener el documento
                            var DocData = GetBinaryDocument(corpId,
                                                            regionId,
                                                            countryId,
                                                            domesticRegId,
                                                            stateProvId,
                                                            cityId,
                                                            officeId,
                                                            caseSeqNo,
                                                            histSeqNo,
                                                            item.DocCategoryId.Value,
                                                            item.DocTypeId.Value,
                                                            item.DocumentId.Value
                                                           );


                            TextBuilder = getIndexFileText();

                            var FechaAutorizacion = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DocData.Item2);
                            var FechaFinal = PolicyData.ExpirationDate.HasValue ? string.Format(CultureInfo.InvariantCulture, FormatoFecha, PolicyData.ExpirationDate.Value)
                                                                                : string.Empty;

                            var FechaInicio = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DocData.Item2);

                            var RutaRequireDoc = PathFileDoc + PolicyNo + "-" + DocData.Item3;
                            var RutaRequireDocKCO = PathFileDocKCO + PolicyNo + "-" + DocData.Item3;

                            chasis = "";
                            var v = vinsured.FirstOrDefault(x => x.InsuredVehicleId == item.InsuredVehicleId);

                            if (v != null)
                            {
                                chasis = v.Chassis;
                            }

                            StringResult = string.Format(TextBuilder.ToString(),
                                                         (item.RequimentOnBaseNameKey == "SUS-Cedula Funcionario" ? "SUS-Cedula" : item.RequimentOnBaseNameKey), //{0}
                                                         FechaAutorizacion,//{1}
                                                         isQuotation ? "" : PolicyNo,//{2}
                                                         ContactData.FullName,//{3}
                                                         FechaAutorizacion,//{4}
                                                         FechaFinal,//{5}
                                                         FechaInicio,//{6}
                                                         UserName,//{7}
                                                         isQuotation ? PolicyNo : "",//{8}
                                                         item.RequimentOnBaseNameKey == "SUS-Cedula" ? RecordId.Id : string.Empty,//{9}                                                                                    
                                                         string.Empty, //{10}
                                                         RutaRequireDoc,//{11}
                                                         RequestType, //{12}
                                                         chasis, //{13}
                                                         RepresentanteLegal // {14}
                                                        );

                            StringResultFinal.AppendLine(StringResult);


                            if (Financed && !ErrorCreateLoanKCO)
                            {
                                StringResultKCO = string.Format(TextBuilder.ToString(),
                                                             item.RequimentOnBaseNameKey, //{0}
                                                             FechaAutorizacion,//{1}
                                                             isQuotation ? "" : PolicyNo,//{2}
                                                             ContactData.FullName,//{3}
                                                             FechaAutorizacion,//{4}
                                                             FechaFinal,//{5}
                                                             FechaInicio,//{6}
                                                             UserName,//{7}
                                                             isQuotation ? PolicyNo : "",//{8}
                                                             item.RequimentOnBaseNameKey == "SUS-Cedula" ? RecordId.Id : string.Empty,//{9}                                                                                    
                                                             LoanNumber, //{10}
                                                             RutaRequireDocKCO,//{11}
                                                             RequestType, //{12},
                                                             chasis, // {13}
                                                             RepresentanteLegal //{14}
                                                            );

                                StringResultFinalKCO.AppendLine(StringResultKCO);
                            }

                            //Guardar el archivo pdf                    
                            FileList.Add(new Tuple<byte[], string, string>(DocData.Item1, RutaRequireDoc, (Financed && !ErrorCreateLoanKCO) ? RutaRequireDocKCO : string.Empty));
                        }
                    }
                    //var Items = RequestType == Utility.RequestType.Exclusion ? oDocReqVehicle : DocReqVehicle;

                }
                #endregion
                #region Propiedad
                else if (ProductLine == Utility.ProductLine.AlliedLines)
                {
                    foreach (var item in DocReqAlliedLines)
                    {
                        //Obener el documento
                        var DocData = GetBinaryDocument(corpId,
                                                        regionId,
                                                        countryId,
                                                        domesticRegId,
                                                        stateProvId,
                                                        cityId,
                                                        officeId,
                                                        caseSeqNo,
                                                        histSeqNo,
                                                        item.DocCategoryId.Value,
                                                        item.DocTypeId.Value,
                                                        item.DocumentId.Value
                                                       );

                        TextBuilder = getIndexFileText(Utility.BusinessLine.IncendioLineasAliadas);

                        var FechaAutorizacion = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DocData.Item2);
                        var FechaFinal = PolicyData.ExpirationDate.HasValue ? string.Format(CultureInfo.InvariantCulture, FormatoFecha, PolicyData.ExpirationDate.Value)
                                                                            : string.Empty;

                        var FechaInicio = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DocData.Item2);
                        var RutaRequireDoc = PathFileDoc + PolicyNo + "-" + DocData.Item3;
                        var RutaRequireDocKCO = PathFileDocKCO + PolicyNo + "-" + DocData.Item3;

                        StringResult = string.Format(TextBuilder.ToString(),
                                                     item.RequimentOnBaseNameKey, //{0}
                                                     FechaAutorizacion,//{1}
                                                     isQuotation ? string.Empty : PolicyNo,//{2}
                                                     ContactData.FullName,//{3}
                                                     FechaFinal,//{4}
                                                     FechaInicio,//{5}
                                                     UserName,//{6}
                                                     isQuotation ? PolicyNo : string.Empty,//{7}
                                                     item.RequimentOnBaseNameKey == "PROSUS-Cedula" ? RecordId.Id : string.Empty,//{8}
                                                     Oficina,//{9}                                                                                    
                                                     Plan,//{10}
                                                     Producto,//{11}
                                                     string.Empty,//{12}
                                                     string.Empty, //{13}
                                                     RutaRequireDoc,//{14}
                                                     RequestType, ////{15}
                                                     RepresentanteLegal //{16}
                                                    );

                        StringResultFinal.AppendLine(StringResult);

                        if (Financed && !ErrorCreateLoanKCO)
                        {
                            StringResultKCO = string.Format(TextBuilder.ToString(),
                                                      item.RequimentOnBaseNameKey, //{0}
                                                      FechaAutorizacion,//{1}
                                                      isQuotation ? string.Empty : PolicyNo,//{2}
                                                      ContactData.FullName,//{3}
                                                      FechaFinal,//{4}
                                                      FechaInicio,//{5}
                                                      UserName,//{6}
                                                      isQuotation ? PolicyNo : string.Empty,//{7}
                                                      item.RequimentOnBaseNameKey == "PROSUS-Cedula" ? RecordId.Id : string.Empty,//{8}
                                                      Oficina,//{9}                                                                                    
                                                      Plan,//{10}
                                                      Producto,//{11}
                                                      string.Empty,//{12}
                                                      LoanNumber, //{13}
                                                      RutaRequireDocKCO,//{14}
                                                      RequestType, ////{15}
                                                      RepresentanteLegal //{16}
                                                     );

                            StringResultFinalKCO.AppendLine(StringResultKCO);
                        }

                        //Guardar el archivo pdf                    
                        FileList.Add(new Tuple<byte[], string, string>(DocData.Item1, RutaRequireDoc, (Financed && !ErrorCreateLoanKCO) ? RutaRequireDocKCO : string.Empty));
                    }
                }
                #endregion
                #endregion

                #region Verificar si existe algun endoso de cesion de derecho

                //Esto aplica solo para vehiculos
                if (ProductLine == Utility.ProductLine.Auto)
                {
                    Vehicles = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo
                    }).ToList();

                    foreach (var item in Vehicles)
                    {
                        if (item.EndorsementAmount.HasValue)
                        {
                            TextBuilder = getIndexFileText();

                            var FechaAutorizacion = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DateTime.Now);
                            var FechaFinal = PolicyData.ExpirationDate.HasValue ? string.Format(CultureInfo.InvariantCulture, FormatoFecha, PolicyData.ExpirationDate.Value)
                                                                                : string.Empty;

                            var FechaInicio = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DateTime.Now);
                            var vNameFile = string.Concat(Utility.GetSerialId(), "EndosoCesionDerecho");

                            var RutaDocEndoso = PathFileDoc + PolicyNo + "-" + vNameFile + ".pdf";
                            var RutaDocEndosoKCO = PathFileDocKCO + PolicyNo + "-" + vNameFile + ".pdf";

                            StringResult = string.Format(TextBuilder.ToString(),
                                                         SUSEndosoCesionDerechos, //{0}
                                                         FechaAutorizacion,//{1}
                                                         isQuotation ? "" : PolicyNo,//{2}
                                                         ContactData.FullName,//{3}
                                                         FechaAutorizacion,//{4}
                                                         FechaFinal,//{5}
                                                         FechaInicio,//{6}
                                                         UserName,//{7}
                                                         isQuotation ? PolicyNo : "",//{8}
                                                         string.Empty,//{9}   
                                                         string.Empty, //{10}                        
                                                         RutaDocEndoso,//{11}
                                                         RequestType, //{12}
                                                         chasis, //{13}
                                                         RepresentanteLegal //{14}
                                                        );

                            StringResultFinal.AppendLine(StringResult);

                            if (Financed && !ErrorCreateLoanKCO)
                            {
                                StringResultKCO = string.Format(TextBuilder.ToString(),
                                                           SUSEndosoCesionDerechos, //{0}
                                                           FechaAutorizacion,//{1}
                                                           isQuotation ? "" : PolicyNo,//{2}
                                                           ContactData.FullName,//{3}
                                                           FechaAutorizacion,//{4}
                                                           FechaFinal,//{5}
                                                           FechaInicio,//{6}
                                                           UserName,//{7}
                                                           isQuotation ? PolicyNo : "",//{8}
                                                           string.Empty,//{9}   
                                                           LoanNumber, //{10}                        
                                                           RutaDocEndosoKCO,//{11}
                                                           RequestType, //{12}
                                                           chasis, //{13}
                                                           RepresentanteLegal //{14}
                                                          );

                                StringResultFinalKCO.AppendLine(StringResultKCO);
                            }

                            var XMLByteArray = GenerateXMLQuotationToThunderhead(corpId,
                                                                                 regionId,
                                                                                 countryId,
                                                                                 domesticRegId,
                                                                                 stateProvId,
                                                                                 cityId,
                                                                                 officeId,
                                                                                 caseSeqNo,
                                                                                 histSeqNo,
                                                                                 ServerMaptPathXML,
                                                                                 vehicleUniqueID: item.VehicleUniqueId,
                                                                                 templateType: ThunderheadWrap.Service.TemplateType.EndosoCesionDerecho
                                                                                );

                            var PDFByteArray = SendToThunderHead(XMLByteArray, ThunderheadWrap.Service.TemplateType.EndosoCesionDerecho);

                            //Generar el archivo de endoso de cesión de derecho                                            
                            FileList.Add(new Tuple<byte[], string, string>(PDFByteArray, RutaDocEndoso, (Financed && !ErrorCreateLoanKCO) ? RutaDocEndosoKCO : string.Empty));
                        }
                    }
                }
                else if (ProductLine == Utility.ProductLine.AlliedLines)
                {
                    //TODO crear documento de endoso de cesión de derecho para incendio y lienas aliadas
                }

                #endregion

                #region Generar la cotizacion
                if (ProductLine == Utility.ProductLine.Auto)
                {
                    TextBuilder = getIndexFileText();

                    var FechaAutorizacionQuot = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DateTime.Now);
                    var FechaFinalQuot = PolicyData.ExpirationDate.HasValue ? string.Format(CultureInfo.InvariantCulture, FormatoFecha, PolicyData.ExpirationDate.Value)
                                                                            : string.Empty;

                    var FechaInicioQuot = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DateTime.Now);

                    var RutaDocCotizacion = string.Concat(PathFileDoc, PolicyNo, "-", Utility.GetSerialId(), "Cotizacion.pdf");
                    var RutaDocCotizacionKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", Utility.GetSerialId(), "Cotizacion.pdf");

                    StringResult = string.Format(TextBuilder.ToString(),
                                                 SUSCotizacion, //{0}
                                                 FechaAutorizacionQuot,//{1}
                                                 isQuotation ? "" : PolicyNo,//{2}
                                                 ContactData.FullName,//{3}
                                                 FechaAutorizacionQuot,//{4}
                                                 FechaFinalQuot,//{5}
                                                 FechaInicioQuot,//{6}
                                                 UserName,//{7}
                                                 isQuotation ? PolicyNo : "",//{8}
                                                 string.Empty,//{9}          
                                                 string.Empty, //{10}                         
                                                 RutaDocCotizacion,//{11}
                                                 RequestType, //{12}
                                                 string.Empty, //{13}
                                                 RepresentanteLegal //{14}
                                                 );

                    StringResultFinal.AppendLine(StringResult);

                    if (Financed && !ErrorCreateLoanKCO)
                    {
                        StringResultKCO = string.Format(TextBuilder.ToString(),
                                                 SUSCotizacion, //{0}
                                                 FechaAutorizacionQuot,//{1}
                                                 isQuotation ? "" : PolicyNo,//{2}
                                                 ContactData.FullName,//{3}
                                                 FechaAutorizacionQuot,//{4}
                                                 FechaFinalQuot,//{5}
                                                 FechaInicioQuot,//{6}
                                                 UserName,//{7}
                                                 isQuotation ? PolicyNo : "",//{8}
                                                 string.Empty,//{9}          
                                                 LoanNumber, //{10}                         
                                                 RutaDocCotizacionKCO,//{11}
                                                 RequestType, //{12}
                                                 string.Empty, //{13}
                                                 RepresentanteLegal //{14}
                                                );

                        StringResultFinalKCO.AppendLine(StringResultKCO);
                    }

                    var XMLbyte = GenerateXMLQuotationToThunderhead(corpId,
                                                                    regionId,
                                                                    countryId,
                                                                    domesticRegId,
                                                                    stateProvId,
                                                                    cityId,
                                                                    officeId,
                                                                    caseSeqNo,
                                                                    histSeqNo,
                                                                    ServerMaptPathXML,
                                                                    templateType: ThunderheadWrap.Service.TemplateType.Cotizacion
                                                                );

                    var PDFByte = SendToThunderHead(XMLbyte, ThunderheadWrap.Service.TemplateType.EndosoCesionDerecho);

                    //Generar el archivo de endoso de cesion de derecho                 
                    FileList.Add(new Tuple<byte[], string, string>(PDFByte, RutaDocCotizacion, (Financed && !ErrorCreateLoanKCO) ? RutaDocCotizacionKCO : string.Empty));
                }
                else if (ProductLine == Utility.ProductLine.AlliedLines)
                {
                    //TODO Generar la cotizacion para Incendio y lineas aliadas

                }
                #endregion

                #region Formulario de inspeccion de vehiculos
                if (ProductLine == Utility.ProductLine.Auto)
                {
                    foreach (var item in Vehicles)
                    {
                        var vehicleReview = oVehicleManager.GetVehicleReview(new Vehicle
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticRegId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                            InsuredVehicleId = item.InsuredVehicleId
                        });

                        if (vehicleReview.Any())
                        {
                            TextBuilder = getIndexFileText();

                            var FechaAutorizacion = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DateTime.Now);
                            var FechaFinal = PolicyData.ExpirationDate.HasValue ? string.Format(CultureInfo.InvariantCulture, FormatoFecha, PolicyData.ExpirationDate.Value)
                                                                                : string.Empty;

                            var FechaInicio = string.Format(CultureInfo.InvariantCulture, FormatoFecha, DateTime.Now);
                            var vNameFile = string.Concat(Utility.GetSerialId(), "FormulariodeInspeccion");
                            var RutaDocInspeccion = string.Concat(PathFileDoc, PolicyNo, "-", vNameFile, ".pdf");
                            var RutaDocInspeccionKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", vNameFile, ".pdf");

                            StringResult = string.Format(TextBuilder.ToString(),
                                                         SUSFormularioInspeccion, //{0}
                                                         FechaAutorizacion,//{1}
                                                         isQuotation ? "" : PolicyNo,//{2}
                                                         ContactData.FullName,//{3}
                                                         FechaAutorizacion,//{4}
                                                         FechaFinal,//{5}
                                                         FechaInicio,//{6}
                                                         UserName,//{7}
                                                         isQuotation ? PolicyNo : "",//{8}
                                                         string.Empty,//{9}     
                                                         string.Empty, //{10}                      
                                                         RutaDocInspeccion,//{11}
                                                         RequestType, //{12}
                                                         string.Empty, //{13}
                                                         RepresentanteLegal //{14}
                                                        );

                            StringResultFinal.AppendLine(StringResult);

                            if (Financed && !ErrorCreateLoanKCO)
                            {
                                StringResultKCO = string.Format(TextBuilder.ToString(),
                                                            SUSFormularioInspeccion, //{0}
                                                            FechaAutorizacion,//{1}
                                                            isQuotation ? "" : PolicyNo,//{2}
                                                            ContactData.FullName,//{3}
                                                            FechaAutorizacion,//{4}
                                                            FechaFinal,//{5}
                                                            FechaInicio,//{6}
                                                            UserName,//{7}
                                                            isQuotation ? PolicyNo : "",//{8}
                                                            string.Empty,//{9}     
                                                            LoanNumber, //{10}                      
                                                            RutaDocInspeccionKCO,//{11}
                                                            RequestType, //{12}
                                                            string.Empty, //{13}
                                                            RepresentanteLegal //{14}
                                                           );

                                StringResultFinalKCO.AppendLine(StringResultKCO);
                            }

                            var XMLByteArray = GenerateXMLVIFToThunderhead(corpId,
                                                                           regionId,
                                                                           countryId,
                                                                           domesticRegId,
                                                                           stateProvId,
                                                                           cityId,
                                                                           officeId,
                                                                           caseSeqNo,
                                                                           histSeqNo,
                                                                           item.VehicleUniqueId,
                                                                           ServerMaptPathXML
                                                                          );

                            string msg = ASCIIEncoding.ASCII.GetString(XMLByteArray);
                            var msgArray = new[] { Resources.VehicleDontHasInspection, Resources.QuotationDontHasVehicle };

                            //msg != Resources.VehicleDontHasInspection || msg != Resources.QuotationDontHasVehicle
                            if (!msgArray.Contains(msg))
                            {
                                var PDFByteArray = SendToThunderHead(XMLByteArray, ThunderheadWrap.Service.TemplateType.Inspeccion);

                                //Generar la inspección 
                                FileList.Add(new Tuple<byte[], string, string>(PDFByteArray, RutaDocInspeccion, (Financed && !ErrorCreateLoanKCO) ? RutaDocInspeccionKCO : string.Empty));
                            }


                            #region Generar las fotos de la inspeccion para el vehiculo en cuestion
                            var document_category = oVehicleManager.GetDocumentCategory("VIFPhotos");

                            var itemGetPhoto = new Vehicle.Review
                            {
                                CorpId = Corp_Id,
                                RegionId = Region_Id,
                                CountryId = Country_Id,
                                DomesticRegId = Domesticreg_Id,
                                StateProvId = State_Prov_Id,
                                CityId = City_Id,
                                OfficeId = Office_Id,
                                CaseSeqNo = Case_Seq_No,
                                HistSeqNo = Hist_Seq_No,
                                InsuredVehicleId = item.InsuredVehicleId,
                                ReviewId = vehicleReview.FirstOrDefault().ReviewId
                            };

                            var photos = oVehicleManager.GetVehicleReviewPic(itemGetPhoto).Where(f => f.PictureStatus.GetValueOrDefault() && f.DocTypeId == document_category.DocTypeId && f.DocCategoryId == document_category.DocCategoryId).ToList();

                            var DocumentTypeCatalog = new Dictionary<string, string>();
                            DocumentTypeCatalog.Add("frente", "SUS-Foto Frente del Vehiculo");
                            DocumentTypeCatalog.Add("frentederecho", "SUS-Foto lateral frontal derecho");
                            DocumentTypeCatalog.Add("frenteizquierdo", "SUS-Foto lateral frontal izquierdo");
                            DocumentTypeCatalog.Add("trasera", "SUS-Foto Trasera del Vehiculo (placa)");
                            DocumentTypeCatalog.Add("traseraderecha", "SUS-Foto lateral trasero derecho");
                            DocumentTypeCatalog.Add("traseraizquierda", "SUS-Foto lateral trasero izquierdo");
                            DocumentTypeCatalog.Add("baulexterior", "SUS-Foto Baul exterior");
                            DocumentTypeCatalog.Add("baulinterior", "SUS-Foto Baul Interior");
                            DocumentTypeCatalog.Add("interior1", "SUS-Foto Interior delantero Vehiculo");
                            DocumentTypeCatalog.Add("interior2", "SUS-Foto Interior-2");
                            DocumentTypeCatalog.Add("interior3", "SUS-Foto Interior-3");
                            DocumentTypeCatalog.Add("interior4", "SUS-Foto Interior-4");
                            DocumentTypeCatalog.Add("repuestos", "SUS-Foto Goma de Repuesta");
                            DocumentTypeCatalog.Add("motorexterior", "SUS-Foto Motor Exterior");
                            DocumentTypeCatalog.Add("motorinterior", "SUS-Foto Motor Interior");
                            DocumentTypeCatalog.Add("kilometraje", "SUS-Foto Tablero Milla / Kilometraje Vehiculo");
                            DocumentTypeCatalog.Add("chasis1", "SUS-Foto Chasis-1");
                            DocumentTypeCatalog.Add("chasis2", "SUS-Foto Chasis-2");
                            DocumentTypeCatalog.Add("techo", "SUS-Foto Techo Exterior Vehiculo");

                            foreach (var itemPhoto in photos)
                            {
                                //SUS-Foto Frente del Vehiculo  
                                var Phototype = itemPhoto.DocumentName.ToLower();
                                switch (Phototype)
                                {
                                    case "frente":
                                        var FileNameFrente = string.Concat(Utility.GetSerialId(), "frente");
                                        var RutaDocFotoFrente = string.Concat(PathFileDoc, PolicyNo, "-", FileNameFrente, ".pdf");
                                        var RutaDocFotoFrenteKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNameFrente, ".pdf");

                                        var FrenteResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                             Phototype,
                                                                             TextBuilder,
                                                                             RutaDocFotoFrente,
                                                                             RutaDocFotoFrenteKCO,
                                                                             FechaAutorizacion,
                                                                             isQuotation,
                                                                             PolicyNo,
                                                                             ContactData.FullName,
                                                                             FechaFinal,
                                                                             FechaInicio,
                                                                             UserName,
                                                                             LoanNumber,
                                                                             RequestType, //{12}
                                                                             RepresentanteLegal
                                                                             );

                                        StringResult = FrenteResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayfrente = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayfrente, RutaDocFotoFrente, string.Empty));

                                        break;
                                    case "frentederecho":
                                        var FileNamefrentederecho = string.Concat(Utility.GetSerialId(), "frentederecho");
                                        var RutaDocFotofrentederecho = string.Concat(PathFileDoc, PolicyNo, "-", FileNamefrentederecho, ".pdf");
                                        var RutaDocFotofrentederechoKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamefrentederecho, ".pdf");

                                        var FrenteDerechoResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                    Phototype,
                                                                                    TextBuilder,
                                                                                    RutaDocFotofrentederecho,
                                                                                    RutaDocFotofrentederechoKCO,
                                                                                    FechaAutorizacion,
                                                                                    isQuotation,
                                                                                    PolicyNo,
                                                                                    ContactData.FullName,
                                                                                    FechaFinal,
                                                                                    FechaInicio,
                                                                                    UserName,
                                                                                    LoanNumber,
                                                                                    RequestType, //{12}
                                                                                    RepresentanteLegal
                                                                                    );

                                        StringResult = FrenteDerechoResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayfrentederecho = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayfrentederecho, RutaDocFotofrentederecho, string.Empty));

                                        break;
                                    case "frenteizquierdo":
                                        var FileNamefrenteizquierdo = string.Concat(Utility.GetSerialId(), "frenteizquierdo");
                                        var RutaDocFotofrenteizquierdo = string.Concat(PathFileDoc, PolicyNo, "-", FileNamefrenteizquierdo, ".pdf");
                                        var RutaDocFotofrenteizquierdoKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamefrenteizquierdo, ".pdf");

                                        var FrenteIzquierdoResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                     Phototype,
                                                                                     TextBuilder,
                                                                                     RutaDocFotofrenteizquierdo,
                                                                                     RutaDocFotofrenteizquierdoKCO,
                                                                                     FechaAutorizacion,
                                                                                     isQuotation,
                                                                                     PolicyNo,
                                                                                     ContactData.FullName,
                                                                                     FechaFinal,
                                                                                     FechaInicio,
                                                                                     UserName,
                                                                                     LoanNumber,
                                                                                     RequestType, //{12}
                                                                                     RepresentanteLegal
                                                                                    );

                                        StringResult = FrenteIzquierdoResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayfrenteizquierdo = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayfrenteizquierdo, RutaDocFotofrenteizquierdo, string.Empty));

                                        break;
                                    case "trasera":
                                        var FileNametrasera = string.Concat(Utility.GetSerialId(), "trasera");
                                        var RutaDocFototrasera = string.Concat(PathFileDoc, PolicyNo, "-", FileNametrasera, ".pdf");
                                        var RutaDocFototraseraKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNametrasera, ".pdf");

                                        var TraseraResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                              Phototype,
                                                                              TextBuilder,
                                                                              RutaDocFototrasera,
                                                                              RutaDocFototraseraKCO,
                                                                              FechaAutorizacion,
                                                                              isQuotation,
                                                                              PolicyNo,
                                                                              ContactData.FullName,
                                                                              FechaFinal,
                                                                              FechaInicio,
                                                                              UserName,
                                                                              LoanNumber,
                                                                              RequestType, //{12}
                                                                              RepresentanteLegal
                                                                             );

                                        StringResult = TraseraResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraytrasera = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraytrasera, RutaDocFototrasera, string.Empty));

                                        break;
                                    case "traseraderecha":
                                        var FileNametraseraderecha = string.Concat(Utility.GetSerialId(), "traseraderecha");
                                        var RutaDocFototraseraderecha = string.Concat(PathFileDoc, PolicyNo, "-", FileNametraseraderecha, ".pdf");
                                        var RutaDocFototraseraderechaKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNametraseraderecha, ".pdf");

                                        var TraseraDerechaResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                     Phototype,
                                                                                     TextBuilder,
                                                                                     RutaDocFototraseraderecha,
                                                                                     RutaDocFototraseraderechaKCO,
                                                                                     FechaAutorizacion,
                                                                                     isQuotation,
                                                                                     PolicyNo,
                                                                                     ContactData.FullName,
                                                                                     FechaFinal,
                                                                                     FechaInicio,
                                                                                     UserName,
                                                                                     LoanNumber,
                                                                                     RequestType, //{12}
                                                                                     RepresentanteLegal
                                                                                     );

                                        StringResult = TraseraDerechaResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraytraseraderecha = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraytraseraderecha, RutaDocFototraseraderecha, string.Empty));

                                        break;
                                    case "traseraizquierda":
                                        var FileNametraseraizquierda = string.Concat(Utility.GetSerialId(), "traseraizquierda");
                                        var RutaDocFototraseraizquierda = string.Concat(PathFileDoc, PolicyNo, "-", FileNametraseraizquierda, ".pdf");
                                        var RutaDocFototraseraizquierdaKCO = string.Concat(PathFileDoc, PolicyNo, "-", FileNametraseraizquierda, ".pdf");

                                        var TraseraizquierdaResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                       Phototype,
                                                                                       TextBuilder,
                                                                                       RutaDocFototraseraizquierda,
                                                                                       RutaDocFototraseraizquierdaKCO,
                                                                                       FechaAutorizacion,
                                                                                       isQuotation,
                                                                                       PolicyNo,
                                                                                       ContactData.FullName,
                                                                                       FechaFinal,
                                                                                       FechaInicio,
                                                                                       UserName,
                                                                                       LoanNumber,
                                                                                       RequestType, //{12}
                                                                                       RepresentanteLegal
                                                                                       );

                                        StringResult = TraseraizquierdaResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraytraseraizquierda = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraytraseraizquierda, RutaDocFototraseraizquierda, string.Empty));

                                        break;
                                    case "baulexterior":
                                        var FileNamebaulexterior = string.Concat(Utility.GetSerialId(), "baulexterior");
                                        var RutaDocFotobaulexterior = string.Concat(PathFileDoc, PolicyNo, "-", FileNamebaulexterior, ".pdf");
                                        var RutaDocFotobaulexteriorKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamebaulexterior, ".pdf");

                                        var baulexteriorResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                   Phototype,
                                                                                   TextBuilder,
                                                                                   RutaDocFotobaulexterior,
                                                                                   RutaDocFotobaulexteriorKCO,
                                                                                   FechaAutorizacion,
                                                                                   isQuotation,
                                                                                   PolicyNo,
                                                                                   ContactData.FullName,
                                                                                   FechaFinal,
                                                                                   FechaInicio,
                                                                                   UserName,
                                                                                   LoanNumber,
                                                                                   RequestType, //{12}
                                                                                   RepresentanteLegal
                                                                                  );

                                        StringResult = baulexteriorResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraybaulexterior = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraybaulexterior, RutaDocFotobaulexterior, string.Empty));

                                        break;
                                    case "baulinterior":
                                        var FileNamebaulinterior = string.Concat(Utility.GetSerialId(), "baulinterior");
                                        var RutaDocFotobaulinterior = string.Concat(PathFileDoc, PolicyNo, "-", FileNamebaulinterior, ".pdf");
                                        var RutaDocFotobaulinteriorKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamebaulinterior, ".pdf");

                                        var baulinteriorResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                     Phototype,
                                                                                     TextBuilder,
                                                                                     RutaDocFotobaulinterior,
                                                                                     RutaDocFotobaulinteriorKCO,
                                                                                     FechaAutorizacion,
                                                                                     isQuotation,
                                                                                     PolicyNo,
                                                                                     ContactData.FullName,
                                                                                     FechaFinal,
                                                                                     FechaInicio,
                                                                                     UserName,
                                                                                     LoanNumber,
                                                                                     RequestType, //{12}
                                                                                     RepresentanteLegal
                                                                                     );

                                        StringResult = baulinteriorResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraybaulinterior = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraybaulinterior, RutaDocFotobaulinterior, string.Empty));

                                        break;
                                    case "interior1":
                                        var FileNameinterior1 = string.Concat(Utility.GetSerialId(), "interior1");
                                        var RutaDocFotointerior1 = string.Concat(PathFileDoc, PolicyNo, "-", FileNameinterior1, ".pdf");
                                        var RutaDocFotointerior1KCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNameinterior1, ".pdf");
                                        var interior1Result = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                Phototype,
                                                                                TextBuilder,
                                                                                RutaDocFotointerior1,
                                                                                RutaDocFotointerior1KCO,
                                                                                FechaAutorizacion,
                                                                                isQuotation,
                                                                                PolicyNo,
                                                                                ContactData.FullName,
                                                                                FechaFinal,
                                                                                FechaInicio,
                                                                                UserName,
                                                                                LoanNumber,
                                                                                RequestType, //{12}
                                                                                RepresentanteLegal
                                                                                );

                                        StringResult = interior1Result.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayinterior1 = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayinterior1, RutaDocFotointerior1, string.Empty));

                                        break;
                                    case "interior2":
                                        var FileNameinterior2 = string.Concat(Utility.GetSerialId(), "interior2");
                                        var RutaDocFotointerior2 = string.Concat(PathFileDoc, PolicyNo, "-", FileNameinterior2, ".pdf");
                                        var RutaDocFotointerior2KCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNameinterior2, ".pdf");
                                        var interior2Result = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                     Phototype,
                                                                                     TextBuilder,
                                                                                     RutaDocFotointerior2,
                                                                                     RutaDocFotointerior2KCO,
                                                                                     FechaAutorizacion,
                                                                                     isQuotation,
                                                                                     PolicyNo,
                                                                                     ContactData.FullName,
                                                                                     FechaFinal,
                                                                                     FechaInicio,
                                                                                     UserName,
                                                                                     LoanNumber,
                                                                                     RequestType, //{12}
                                                                                     RepresentanteLegal
                                                                                     );

                                        StringResult = interior2Result.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayinterior2 = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayinterior2, RutaDocFotointerior2, string.Empty));

                                        break;
                                    case "interior3":
                                        var FileNameinterior3 = string.Concat(Utility.GetSerialId(), "interior3");
                                        var RutaDocFotointerior3 = string.Concat(PathFileDoc, PolicyNo, "-", FileNameinterior3, ".pdf");
                                        var RutaDocFotointerior3KCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNameinterior3, ".pdf");
                                        var interior3Result = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                     Phototype,
                                                                                     TextBuilder,
                                                                                     RutaDocFotointerior3,
                                                                                     RutaDocFotointerior3KCO,
                                                                                     FechaAutorizacion,
                                                                                     isQuotation,
                                                                                     PolicyNo,
                                                                                     ContactData.FullName,
                                                                                     FechaFinal,
                                                                                     FechaInicio,
                                                                                     UserName,
                                                                                     LoanNumber,
                                                                                     RequestType, //{12}
                                                                                     RepresentanteLegal
                                                                                     );

                                        StringResult = interior3Result.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayinterior3 = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayinterior3, RutaDocFotointerior3, string.Empty));

                                        break;
                                    case "interior4":
                                        var FileNameinterior4 = string.Concat(Utility.GetSerialId(), "interior4");
                                        var RutaDocFotointerior4 = string.Concat(PathFileDoc, PolicyNo, "-", FileNameinterior4, ".pdf");
                                        var RutaDocFotointerior4KCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNameinterior4, ".pdf");
                                        var interior4Result = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                Phototype,
                                                                                TextBuilder,
                                                                                RutaDocFotointerior4,
                                                                                RutaDocFotointerior4KCO,
                                                                                FechaAutorizacion,
                                                                                isQuotation,
                                                                                PolicyNo,
                                                                                ContactData.FullName,
                                                                                FechaFinal,
                                                                                FechaInicio,
                                                                                UserName,
                                                                                LoanNumber,
                                                                                RequestType, //{12}
                                                                                RepresentanteLegal
                                                                                );

                                        StringResult = interior4Result.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayinterior4 = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayinterior4, RutaDocFotointerior4, string.Empty));

                                        break;
                                    case "repuestos":
                                        var FileNamerepuestos = string.Concat(Utility.GetSerialId(), "repuestos");
                                        var RutaDocFotorepuestos = string.Concat(PathFileDoc, PolicyNo, "-", FileNamerepuestos, ".pdf");
                                        var RutaDocFotorepuestosKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamerepuestos, ".pdf");
                                        var repuestosResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                Phototype,
                                                                                TextBuilder,
                                                                                RutaDocFotorepuestos,
                                                                                RutaDocFotorepuestosKCO,
                                                                                FechaAutorizacion,
                                                                                isQuotation,
                                                                                PolicyNo,
                                                                                ContactData.FullName,
                                                                                FechaFinal,
                                                                                FechaInicio,
                                                                                UserName,
                                                                                LoanNumber,
                                                                                RequestType, //{12}
                                                                                RepresentanteLegal
                                                                                );

                                        StringResult = repuestosResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArrayrepuestos = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArrayrepuestos, RutaDocFotorepuestos, string.Empty));

                                        break;
                                    case "motorexterior":
                                        var FileNamemotorexterior = string.Concat(Utility.GetSerialId(), "motorexterior");
                                        var RutaDocFotomotorexterior = string.Concat(PathFileDoc, PolicyNo, "-", FileNamemotorexterior, ".pdf");
                                        var RutaDocFotomotorexteriorKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamemotorexterior, ".pdf");
                                        var motorexteriorResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                Phototype,
                                                                                TextBuilder,
                                                                                RutaDocFotomotorexterior,
                                                                                RutaDocFotomotorexteriorKCO,
                                                                                FechaAutorizacion,
                                                                                isQuotation,
                                                                                PolicyNo,
                                                                                ContactData.FullName,
                                                                                FechaFinal,
                                                                                FechaInicio,
                                                                                UserName,
                                                                                LoanNumber,
                                                                                RequestType, //{12}
                                                                                RepresentanteLegal
                                                                                );

                                        StringResult = motorexteriorResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraymotorexterior = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraymotorexterior, RutaDocFotomotorexterior, string.Empty));

                                        break;
                                    case "motorinterior":
                                        var FileNamemotorinterior = string.Concat(Utility.GetSerialId(), "motorinterior");
                                        var RutaDocFotomotorinterior = string.Concat(PathFileDoc, PolicyNo, "-", FileNamemotorinterior, ".pdf");
                                        var RutaDocFotomotorinteriorKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamemotorinterior, ".pdf");
                                        var motorinteriorResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                Phototype,
                                                                                TextBuilder,
                                                                                RutaDocFotomotorinterior,
                                                                                RutaDocFotomotorinteriorKCO,
                                                                                FechaAutorizacion,
                                                                                isQuotation,
                                                                                PolicyNo,
                                                                                ContactData.FullName,
                                                                                FechaFinal,
                                                                                FechaInicio,
                                                                                UserName,
                                                                                LoanNumber,
                                                                                RequestType, //{12}
                                                                                RepresentanteLegal
                                                                                );

                                        StringResult = motorinteriorResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraymotorinterior = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraymotorinterior, RutaDocFotomotorinterior, string.Empty));

                                        break;
                                    case "kilometraje":
                                        var FileNamekilometraje = string.Concat(Utility.GetSerialId(), "kilometraje");
                                        var RutaDocFotokilometraje = string.Concat(PathFileDoc, PolicyNo, "-", FileNamekilometraje, ".pdf");
                                        var RutaDocFotokilometrajeKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamekilometraje, ".pdf");
                                        var kilometrajeResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                                 Phototype,
                                                                                 TextBuilder,
                                                                                 RutaDocFotokilometraje,
                                                                                 RutaDocFotokilometrajeKCO,
                                                                                 FechaAutorizacion,
                                                                                 isQuotation,
                                                                                 PolicyNo,
                                                                                 ContactData.FullName,
                                                                                 FechaFinal,
                                                                                 FechaInicio,
                                                                                 UserName,
                                                                                 LoanNumber,
                                                                                 RequestType, //{12}
                                                                                 RepresentanteLegal
                                                                                );

                                        StringResult = kilometrajeResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraykilometraje = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraykilometraje, RutaDocFotokilometraje, string.Empty));

                                        break;
                                    case "chasis1":
                                        var FileNamechasis1 = string.Concat(Utility.GetSerialId(), "chasis1");
                                        var RutaDocFotochasis1 = string.Concat(PathFileDoc, PolicyNo, "-", FileNamechasis1, ".pdf");
                                        var RutaDocFotochasis1KCO = string.Concat(PathFileDoc, PolicyNo, "-", FileNamechasis1, ".pdf");
                                        var chasis1Result = GetIndexFilePotos(DocumentTypeCatalog,
                                                                              Phototype,
                                                                              TextBuilder,
                                                                              RutaDocFotochasis1,
                                                                              RutaDocFotochasis1KCO,
                                                                              FechaAutorizacion,
                                                                              isQuotation,
                                                                              PolicyNo,
                                                                              ContactData.FullName,
                                                                              FechaFinal,
                                                                              FechaInicio,
                                                                              UserName,
                                                                              LoanNumber,
                                                                              RequestType, //{12}
                                                                              RepresentanteLegal
                                                                             );

                                        StringResult = chasis1Result.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraychasis1 = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraychasis1, RutaDocFotochasis1, string.Empty));

                                        break;
                                    case "chasis2":
                                        var FileNamechasis2 = string.Concat(Utility.GetSerialId(), "chasis2");
                                        var RutaDocFotochasis2 = string.Concat(PathFileDoc, PolicyNo, "-", FileNamechasis2, ".pdf");
                                        var RutaDocFotochasis2KCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNamechasis2, ".pdf");
                                        var chasis2Result = GetIndexFilePotos(DocumentTypeCatalog,
                                                                              Phototype,
                                                                              TextBuilder,
                                                                              RutaDocFotochasis2,
                                                                              RutaDocFotochasis2KCO,
                                                                              FechaAutorizacion,
                                                                              isQuotation,
                                                                              PolicyNo,
                                                                              ContactData.FullName,
                                                                              FechaFinal,
                                                                              FechaInicio,
                                                                              UserName,
                                                                              LoanNumber,
                                                                              RequestType, //{12}
                                                                              RepresentanteLegal
                                                                             );

                                        StringResult = chasis2Result.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraychasis2 = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraychasis2, RutaDocFotochasis2, string.Empty));

                                        break;
                                    case "techo":
                                        var FileNametecho = string.Concat(Utility.GetSerialId(), "techo");
                                        var RutaDocFototecho = string.Concat(PathFileDoc, PolicyNo, "-", FileNametecho, ".pdf");
                                        var RutaDocFototechoKCO = string.Concat(PathFileDocKCO, PolicyNo, "-", FileNametecho, ".pdf");
                                        var techoResult = GetIndexFilePotos(DocumentTypeCatalog,
                                                                            Phototype,
                                                                            TextBuilder,
                                                                            RutaDocFototecho,
                                                                            RutaDocFototechoKCO,
                                                                            FechaAutorizacion,
                                                                            isQuotation,
                                                                            PolicyNo,
                                                                            ContactData.FullName,
                                                                            FechaFinal,
                                                                            FechaInicio,
                                                                            UserName,
                                                                            LoanNumber,
                                                                            RequestType, //{12}
                                                                            RepresentanteLegal
                                                                            );

                                        StringResult = techoResult.Item1;
                                        StringResultFinal.AppendLine(StringResult);

                                        //Generar archivo pdf
                                        byte[] PDFByteArraytecho = ConvertImageToPdf(itemPhoto.DocumentBinary);
                                        FileList.Add(new Tuple<byte[], string, string>(PDFByteArraytecho, RutaDocFototecho, string.Empty));

                                        break;
                                }
                            }

                            #endregion
                        }
                    }
                }
                else if (ProductLine == Utility.ProductLine.AlliedLines)
                {
                    //TODO Crear el documento de inspeccion para propiedad
                }
                #endregion

                try
                {
                    if (CopyATLFile)
                    {
                        //Guardar todos los archivos en la carpeta de onbase
                        foreach (var item in FileList)
                            //Proceso para atlantica
                            File.WriteAllBytes(item.Item2, item.Item1);

                        //Guardar el txt que necesita Onbase para importar los archivos
                        File.WriteAllText(PathFiletxt, StringResultFinal.ToString(), Encoding.Default);
                    }
                }
                catch (Exception)
                {
                    ErrorInATL = true;
                    throw;
                }

                try
                {
                    if (CopyKCOFile)
                    {
                        //En caso de que sea una poliza financiada entonces se deberan copiar los archivos en KreditCo
                        if (Financed && !ErrorCreateLoanKCO)
                        {
                            foreach (var item in FileList)
                                //Proceso para KSI 
                                if (!string.IsNullOrEmpty(item.Item3))
                                    File.WriteAllBytes(item.Item3, item.Item1);

                            //Guardar el txt que necesita Onbase para importar los archivos en KCO
                            File.WriteAllText(PathFiletxtKCO, StringResultFinalKCO.ToString(), Encoding.Default);
                        }
                    }
                }
                catch (Exception)
                {
                    ErrorInKCO = true;
                    throw;
                }
            }
            catch (Exception ex)
            {
                var msgError = string.Format("{0} InnerException {1} TraceStack {2}", ex.Message, ex.InnerException, ex.StackTrace);

                //Guardar log
                ErrorsGenerateFiles = new StringBuilder();
                ErrorsGenerateFiles.AppendLine("Error en cotización/poliza:" + PolicyNo);
                ErrorsGenerateFiles.AppendLine("Descripción del error:" + msgError);
                ErrorsGenerateFiles.AppendLine("Fecha del error:" + DateTime.Now.ToString());
                ErrorsGenerateFiles.AppendLine("Usuario:" + this.UserName);

                IEnumerable<string> FilesToCopy = new List<string>(0);

                if (ErrorInATL)
                    FilesToCopy = FileList.Select(x => x.Item2);

                if (ErrorInKCO)
                    FilesToCopy = FileList.Select(x => x.Item3);

                ErrorsGenerateFiles.AppendLine("Archivos:" + Utility.serializeToJSON(FilesToCopy));

                var FinalPath = string.Empty;

                if (ErrorInATL)
                    FinalPath = OnBasePath;

                if (ErrorInKCO)
                    FinalPath = OnBasePathKCO;

                File.WriteAllText(FinalPath + @"\" + PolicyNo + "_ErrorLog.txt", ErrorsGenerateFiles.ToString());

                var message = string.Empty;

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                if (PolicyData.StatusNameKey == Utility.IllustrationStatus.Effective.Code())
                    message = string.Format(Resources.PolicySysflexMessage, PolicyNo);

                throw new Exception(string.Format("{0}|{1}", message, "OnBaseErr"));
            }
        }

        private Tuple<string, string> GetIndexFilePotos(Dictionary<string, string> data,
                                                        string DocType,
                                                        StringBuilder TextBuilder,
                                                        string rutaATL,
                                                        string rutaKCO,
                                                        string FechaAutorizacion,
                                                        bool isQuotation,
                                                        string PolicyNo,
                                                        string FullName,
                                                        string FechaFinal,
                                                        string FechaInicio,
                                                        string UserName,
                                                        string LoanNumber,
                                                        Utility.RequestType RequestType, //{12}
                                                        string RepresentanteLegal
                                                        )
        {
            Tuple<string, string> result;

            var DocTypeName = data[DocType];
            //ATL            
            var StringResult = string.Format(TextBuilder.ToString(),
                                             DocTypeName, //{0}
                                             FechaAutorizacion,//{1}
                                             isQuotation ? "" : PolicyNo,//{2}
                                             FullName,//{3}
                                             FechaAutorizacion,//{4}
                                             FechaFinal,//{5}
                                             FechaInicio,//{6}
                                             UserName,//{7}
                                             isQuotation ? PolicyNo : "",//{8}
                                             string.Empty,//{9}     
                                             string.Empty, //{10}                      
                                             rutaATL,//{11}
                                             RequestType, //{12}
                                             string.Empty, //{13}
                                             RepresentanteLegal //{14}
                                            );

            //KCO  
            var StringResultKCO = string.Format(TextBuilder.ToString(),
                                                DocTypeName, //{0}
                                                FechaAutorizacion,//{1}
                                                isQuotation ? "" : PolicyNo,//{2}
                                                FullName,//{3}
                                                FechaAutorizacion,//{4}
                                                FechaFinal,//{5}
                                                FechaInicio,//{6}
                                                UserName,//{7}
                                                isQuotation ? PolicyNo : "",//{8}
                                                string.Empty,//{9}     
                                                LoanNumber, //{10}                      
                                                rutaKCO,//{11}
                                                RequestType, //{12}
                                                string.Empty, //{13}
                                                RepresentanteLegal //{14}
                                               );

            result = new Tuple<string, string>(StringResult, StringResultKCO);

            return
                  result;
        }



        private byte[] ConvertImageToPdf(byte[] file)
        {
            try
            {
                //Convertir imagen a pdf                        
                var pdf = ITextSharpService.ConvertImageToPdf(file);

                byte[] compress = WEB.NewBusiness.Common.Utility.CompressPDF(pdf);

                return
                    compress;
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private StringBuilder getIndexFileText(Utility.BusinessLine Bl = Utility.BusinessLine.Vehicle)
        {
            var TextBuilder = new StringBuilder();

            TextBuilder.AppendLine("BEGIN");
            TextBuilder.AppendLine(">>DocTypeName: {0}");
            TextBuilder.AppendLine(">>DocDate: {1}");
            TextBuilder.AppendLine(">>FileFormat: 16");

            switch (Bl)
            {
                case Utility.BusinessLine.Vehicle:
                    TextBuilder.AppendLine("Numero de Poliza: {2}");
                    TextBuilder.AppendLine("Asegurado: {3}");
                    TextBuilder.AppendLine("FechaAutorizacion: {4}");
                    TextBuilder.AppendLine("FechaFinal: {5}");
                    TextBuilder.AppendLine("FechaInicio:  {6}");
                    TextBuilder.AppendLine("Origen: Virtual Office");
                    TextBuilder.AppendLine("Nombre Autor: {7} ");
                    TextBuilder.AppendLine("Numero Cotizacion: {8}");
                    TextBuilder.AppendLine("Identificacion: {9}");
                    TextBuilder.AppendLine("NumeroDeprestamo:{10}");
                    TextBuilder.AppendLine(@">>Full Path: {11}");
                    TextBuilder.AppendLine("TipodeMovimiento:{12}");
                    TextBuilder.AppendLine("Chasis: {13}");
                    TextBuilder.AppendLine("RepLegal: {14}");
                    break;
                case Utility.BusinessLine.IncendioLineasAliadas:
                    TextBuilder.AppendLine("Numero de Poliza: {2}");
                    TextBuilder.AppendLine("Nombre Asegurado: {3}");
                    TextBuilder.AppendLine("Fecha de Expiracion: {4}");
                    TextBuilder.AppendLine("Fecha Efectiva:  {5}");
                    TextBuilder.AppendLine("Origen: Virtual Office");
                    TextBuilder.AppendLine("Autor: {6}");
                    TextBuilder.AppendLine("Numero Cotizacion: {7}");
                    TextBuilder.AppendLine("Identificacion: {8}");
                    TextBuilder.AppendLine("Oficina: {9}");
                    TextBuilder.AppendLine("Plan: {10}");
                    TextBuilder.AppendLine("Producto: {11}");
                    TextBuilder.AppendLine("Numero de Reclamo: {12}");
                    TextBuilder.AppendLine("NumeroDeprestamo:{13}");
                    TextBuilder.AppendLine(@">>Full Path: {14}");
                    TextBuilder.AppendLine("TipodeMovimiento:{15}");
                    TextBuilder.AppendLine("RepLegal: {16}");
                    break;
            }

            TextBuilder.AppendLine("END:");

            return TextBuilder;
        }

        /// <summary>
        /// Genera el archivo PDF solicitado al servicio de thunderhead 
        /// </summary>
        /// <param name="Xml"></param>
        /// <returns></returns>
        public byte[] SendToThunderHead(byte[] Xml, ThunderheadWrap.Service.TemplateType templateType,
                                                    ThunderheadWrap.Service.BusinessLine BusinessLine = ThunderheadWrap.Service.BusinessLine.Vehicle,
                                                    ThunderheadWrap.Service.ContactCountry CountryCode = ThunderheadWrap.Service.ContactCountry.RepublicaDominicana)
        {
            var api = new ThunderheadWrap.Service(templateType, BusinessLine, CountryCode);
            return api.sendRequest(Xml);
        }

        /// <summary>
        /// Genera el marbete, las condiciones particulares o condicionado en linea de negocios de auto
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="ServerMapPath"></param>
        /// <param name="DocumentType"></param>
        /// <param name="vehicleUniqueID"></param>
        /// <returns></returns>
        public byte[] GenerateXMLMarbeteCondicionadoToThunderhead(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, String ServerMapPath, string DocumentType, long? vehicleUniqueID = null)
        {

            const string XMLTemplate = "SysflexDataTempate.xml";
            const string FormatoFecha = "{0:dd-MMM-yyyy}";

            var vDocumentIDMarbete = string.Empty;
            var vDocumentIDCondicionado = string.Empty;
            var vDocumentIDCondicionesParticulares = string.Empty;

            string Email = string.Empty;
            string XmlFilePath = string.Empty;
            byte[] Binary;

            try
            {

                vDocumentIDMarbete = ConfigurationManager.AppSettings["DocumentIDMarbete"];
                vDocumentIDCondicionado = ConfigurationManager.AppSettings["DocumentIDConcionado"];
                vDocumentIDCondicionesParticulares = ConfigurationManager.AppSettings["DocumentIDCondicionesParticulares"];

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                var dataVehicle = getVehicles(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, vehicleUniqueID);


                //Objeto de la data del Contacto
                var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

                if (ContactData == null)
                    throw new Exception(Resources.QuotationDontHasContact);

                //Correo del contacto
                var DataEmail = oContactManager
                            .GetCommunicatonEmail(Corp_Id, ContactData.ContactId, Language.ToInt());

                var EmailResult = DataEmail
                                 .FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                if (EmailResult != null)
                    Email = EmailResult.EmailAdress;

                //Direccion del Contacto
                var oAddress = oContactManager
                              .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                              .FirstOrDefault(x => x.DirectoryTypeId == 5);

                var Direccion = (oAddress != null) ? oAddress.StreetAddress : "-";

                //Telefonos del contacto
                var oPhones = oContactManager
                              .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

                //Id Doc
                var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
                var RecordId = dataId.FirstOrDefault();
                var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

                var PhoneNumber = dataPhonePrimary != null ?
                                  string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                                  : default(string);

                var BinaryTemplate = File.ReadAllBytes(ServerMapPath + XMLTemplate);

                Stream stream = new MemoryStream(BinaryTemplate);

                //Cargamos el documento XML
                var doc = new XmlDocument();
                doc.Load(stream);

                //Obtenemos el nodo raiz del documento.
                XmlElement AUTO_SYSFLEX = doc.DocumentElement;
                XmlNodeList Transaction = AUTO_SYSFLEX.GetElementsByTagName("Transaction");
                XmlNodeList Paquete = AUTO_SYSFLEX.GetElementsByTagName("Paquete");
                var NodeTransacction = Transaction[0];
                var NodePaquete = Paquete[0];

                var DocumentId = string.Empty;

                switch (DocumentType)
                {
                    case "Condicionado":
                        DocumentId = vDocumentIDCondicionado;
                        break;
                    case "Marbete":
                        DocumentId = vDocumentIDMarbete;
                        break;
                    case "CondicionesParticulares":
                        DocumentId = vDocumentIDCondicionesParticulares;
                        break;
                }


                var isEfective = (StatusNameKey == "EFECT");

                DateTime? BeginDate = null;
                DateTime? EndDate = null;

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue || isEfective ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue || isEfective ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                NodeTransacction["DocumentId"].InnerText = DocumentId;
                NodeTransacction["Fullname"].InnerText = ContactData.FullName;
                NodeTransacction["NoPoliza"].InnerText = PolicyData.PolicyNo;
                NodeTransacction["Username"].InnerText = UserName;

                NodeTransacction["FechaInicio"].InnerText = String.Format(FormatoFecha, BeginDate.ToString());
                NodeTransacction["FechaVencimiento"].InnerText = String.Format(FormatoFecha, EndDate.ToString());

                NodeTransacction["FechaAutorizacion"].InnerText = String.Format(FormatoFecha, PolicyData.CreateDate);
                NodeTransacction["Intermediario"].InnerText = PolicyData.Agent_Name;

                NodeTransacction["AgenteComercial"].InnerText = string.Empty;
                NodeTransacction["OficinaComercial"].InnerText = string.Empty;
                NodeTransacction["NumeroAgenteComercial"].InnerText = string.Empty;

                Policy.VehiclesCoverage DataVehicleSelect = null;

                if (vehicleUniqueID.HasValue)
                {
                    DataVehicleSelect = oPolicyManager.GetVehiclesCoverage(new Policy.Parameter
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticregId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No,
                    }).FirstOrDefault(x => x.VehicleUniqueId == vehicleUniqueID.Value);
                }

                NodeTransacction["Fianza"].InnerText = DataVehicleSelect != null ?
                                                       DataVehicleSelect.JuditialSecurity.HasValue ? DataVehicleSelect.JuditialSecurity.Value.ToString(CultureInfo.InvariantCulture)
                                                       : "0" : "0";
                NodeTransacction["BCCopy"].InnerText = string.Empty;
                NodeTransacction["CCopy"].InnerText = string.Empty;
                NodeTransacction["NumeroCelular"].InnerText = PhoneNumber;

                NodePaquete["PrincipalName"].InnerText = ContactData.FullName;
                NodePaquete["QuotationNumber"].InnerText = PolicyData.PolicyNo;
                NodePaquete["QuotationDate"].InnerText = PolicyData.CreateDate.ToString();
                NodePaquete["LineOfBusiness"].InnerText = "AUTO";
                NodePaquete["Product"].InnerText = string.Empty;
                NodePaquete["Plan"].InnerText = "AUTO";
                NodePaquete["StartDate"].InnerText = String.Format(CultureInfo.InvariantCulture, FormatoFecha, BeginDate.ToString());
                NodePaquete["EndDate"].InnerText = String.Format(CultureInfo.InvariantCulture, FormatoFecha, EndDate.ToString());

                NodePaquete["ProposalDate"].InnerText = String.Format(CultureInfo.InvariantCulture, FormatoFecha, BeginDate);
                NodePaquete["IdType"].InnerText = RecordId != null ? RecordId.ContactIdTypeDescription : string.Empty;
                NodePaquete["IdNumber"].InnerText = RecordId != null ? RecordId.Id : string.Empty;
                NodePaquete["Email"].InnerText = !string.IsNullOrEmpty(Email) ? Email : string.Empty;
                NodePaquete["TelephoneNumber"].InnerText = PhoneNumber;
                NodePaquete["NumberOfPayments"].InnerText = string.Empty;
                NodePaquete["NumberOfVehicles"].InnerText = dataVehicle.Count().ToString(CultureInfo.InvariantCulture);



                //Drivers 
                var NodeDrivers = NodePaquete["Drivers"];
                NodeDrivers["Name"].InnerText = ContactData.FullName;
                NodeDrivers["IdType"].InnerText = RecordId != null ? RecordId.ContactIdTypeDescription : string.Empty;
                NodeDrivers["IdNumber"].InnerText = RecordId != null ? RecordId.Id : string.Empty;
                NodeDrivers["BirthDate"].InnerText = String.Format(CultureInfo.InvariantCulture, FormatoFecha, ContactData.Dob);
                NodeDrivers["Email"].InnerText = !string.IsNullOrEmpty(Email) ? Email : string.Empty;
                NodeDrivers["TelephoneNumber"].InnerText = PhoneNumber;

                #region Vehicles
                foreach (var item in dataVehicle)
                {
                    var Vehicles = doc.CreateElement("Vehicles");
                    var Brand = doc.CreateElement("Brand");
                    var Model = doc.CreateElement("Model");
                    var Year = doc.CreateElement("Year");
                    var VehicleType = doc.CreateElement("VehicleType");
                    var Plan = doc.CreateElement("Plan");
                    var EnsuredAmount = doc.CreateElement("EnsuredAmount");
                    var NoRegistro = doc.CreateElement("NoRegistro");
                    var Chasis = doc.CreateElement("Chasis");
                    var Color = doc.CreateElement("Color");
                    var CondicionVehiculo = doc.CreateElement("CondicionVehiculo");
                    var CilindrosTonelaje = doc.CreateElement("CilindrosTonelaje");
                    var cntPasajeros = doc.CreateElement("cntPasajeros");
                    var ValorVehiculo = doc.CreateElement("ValorVehiculo");


                    Brand.InnerText = item.MakeDesc;
                    Vehicles.AppendChild(Brand);

                    Model.InnerText = item.ModelDesc;
                    Vehicles.AppendChild(Model);

                    Year.InnerText = item.Year.ToString();
                    Vehicles.AppendChild(Year);

                    VehicleType.InnerText = item.VehicleTypeDesc;
                    Vehicles.AppendChild(VehicleType);

                    Plan.InnerText = item.ProductTypeDesc;
                    Vehicles.AppendChild(Plan);

                    NoRegistro.InnerText = item.Registry;
                    Vehicles.AppendChild(NoRegistro);

                    Chasis.InnerText = item.Chassis;
                    Vehicles.AppendChild(Chasis);

                    Color.InnerText = item.ColorDesc;
                    Vehicles.AppendChild(Color);

                    CondicionVehiculo.InnerText = item.New.HasValue ?
                                                                    item.New.Value ? "0 Kilometros" : "Usado"
                                                                    : string.Empty;
                    Vehicles.AppendChild(CondicionVehiculo);

                    CilindrosTonelaje.InnerText = item.CylindersTons;
                    Vehicles.AppendChild(CilindrosTonelaje);

                    cntPasajeros.InnerText = item.PassengerNumber.ToString();
                    Vehicles.AppendChild(cntPasajeros);

                    ValorVehiculo.InnerText = item.VehicleValue.GetValueOrDefault().ToString();
                    Vehicles.AppendChild(ValorVehiculo);

                    Vehicles.AppendChild(Plan);

                    EnsuredAmount.InnerText = item.VehicleValue.HasValue ? item.VehicleValue.Value.ToString() : "0.00";
                    Vehicles.AppendChild(EnsuredAmount);

                    //Drivers
                    NodePaquete.AppendChild(Vehicles);

                    //Coverages
                    var DataCoverage = oPolicyManager.GetVehicleCoverage(new Policy.VehicleCoverageGet
                    {
                        CorpId = corpId,
                        VehicleUniqueId = item.VehicleUniqueId
                    });

                    var ThirdDamage = DataCoverage.Where(x => x.CoverageTypeId == 1); //Daños a terceros
                    var SelfDamage = DataCoverage.Where(x => x.CoverageTypeId == 2);  //Daños Propios
                    var Additional = DataCoverage.Where(x => x.CoverageTypeId == 3);  //Servicios adicionales

                    XmlElement ThirdDamagesCoverages;
                    XmlElement DescriptionThirdDamages;
                    XmlElement LimitThirdDamages;
                    XmlElement MinimumDeductibleThirdDamages;

                    #region Daños a terceros
                    if (ThirdDamage.Any())
                    {
                        foreach (var itemThirdDamage in ThirdDamage)
                        {
                            ThirdDamagesCoverages = doc.CreateElement("ThirdDamagesCoverages");
                            DescriptionThirdDamages = doc.CreateElement("Description");
                            LimitThirdDamages = doc.CreateElement("Limit");
                            MinimumDeductibleThirdDamages = doc.CreateElement("DeducibleMinimo");

                            DescriptionThirdDamages.InnerText = itemThirdDamage.CoverageDesc.Capitalize(' ');
                            ThirdDamagesCoverages.AppendChild(DescriptionThirdDamages);
                            Vehicles.AppendChild(ThirdDamagesCoverages);

                            LimitThirdDamages.InnerText = itemThirdDamage.CoverageLimit.Value.ToString(CultureInfo.InvariantCulture);
                            ThirdDamagesCoverages.AppendChild(LimitThirdDamages);
                            Vehicles.AppendChild(ThirdDamagesCoverages);

                            MinimumDeductibleThirdDamages.InnerText = "0";
                            ThirdDamagesCoverages.AppendChild(MinimumDeductibleThirdDamages);
                            Vehicles.AppendChild(ThirdDamagesCoverages);
                        }
                    }
                    else
                    {
                        ThirdDamagesCoverages = doc.CreateElement("ThirdDamagesCoverages");
                        DescriptionThirdDamages = doc.CreateElement("Description");
                        LimitThirdDamages = doc.CreateElement("Limit");
                        MinimumDeductibleThirdDamages = doc.CreateElement("DeducibleMinimo");

                        DescriptionThirdDamages.InnerText = string.Empty;
                        ThirdDamagesCoverages.AppendChild(DescriptionThirdDamages);
                        Vehicles.AppendChild(ThirdDamagesCoverages);

                        LimitThirdDamages.InnerText = "0";
                        ThirdDamagesCoverages.AppendChild(LimitThirdDamages);
                        Vehicles.AppendChild(ThirdDamagesCoverages);

                        MinimumDeductibleThirdDamages.InnerText = "0";
                        ThirdDamagesCoverages.AppendChild(MinimumDeductibleThirdDamages);
                        Vehicles.AppendChild(ThirdDamagesCoverages);
                    }

                    #endregion Daños a terceros

                    #region Daños Propios

                    XmlElement SelfDamagesCoverages;
                    XmlElement DescriptionSelfDamages;
                    XmlElement LimitSelfDamages;
                    XmlElement MinimumDeductibleSelfDamages;
                    XmlElement DeducibleSelfDamages;

                    if (SelfDamage.Any())
                    {
                        foreach (var itemSelfDamage in SelfDamage)
                        {
                            SelfDamagesCoverages = doc.CreateElement("SelfDamagesCoverages");
                            DescriptionSelfDamages = doc.CreateElement("Description");
                            LimitSelfDamages = doc.CreateElement("Limit");
                            MinimumDeductibleSelfDamages = doc.CreateElement("DeducibleMinimo");
                            DeducibleSelfDamages = doc.CreateElement("Deducible");

                            DescriptionSelfDamages.InnerText = itemSelfDamage.CoverageDesc.Capitalize(' ');
                            SelfDamagesCoverages.AppendChild(DescriptionSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);

                            LimitSelfDamages.InnerText = itemSelfDamage.CoverageLimit.Value.ToString(CultureInfo.InvariantCulture);
                            SelfDamagesCoverages.AppendChild(LimitSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);

                            DeducibleSelfDamages.InnerText = itemSelfDamage.DeductiblePercentage.HasValue ? itemSelfDamage.DeductiblePercentage.Value.Truncate().ToString(CultureInfo.InvariantCulture) + "%"
                                                                                               : "";
                            SelfDamagesCoverages.AppendChild(DeducibleSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);

                            var subRamo = itemSelfDamage.SubRamo.GetValueOrDefault();

                            var oCoverageSysflexValues = getSysFlexDataCoverage(106, subRamo, item.VehicleValue.GetValueOrDefault(), 0);

                            var Desc = itemSelfDamage.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                            var dataCoverageSysflex = oCoverageSysflexValues.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                            var MinimoDeducible = itemSelfDamage.DeductibleAmount.Value.ToString(CultureInfo.InvariantCulture);

                            //if (dataCoverageSysflex.Any())
                            //    MinimoDeducible = dataCoverageSysflex.FirstOrDefault().MinimoDeducible.Value.ToString(CultureInfo.InvariantCulture);

                            MinimumDeductibleSelfDamages.InnerText = MinimoDeducible;
                            SelfDamagesCoverages.AppendChild(MinimumDeductibleSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);
                        }
                    }
                    else
                    {
                        SelfDamagesCoverages = doc.CreateElement("SelfDamagesCoverages");
                        DescriptionSelfDamages = doc.CreateElement("Description");
                        LimitSelfDamages = doc.CreateElement("Limit");
                        MinimumDeductibleSelfDamages = doc.CreateElement("DeducibleMinimo");
                        DeducibleSelfDamages = doc.CreateElement("Deducible");

                        DescriptionSelfDamages.InnerText = string.Empty;
                        SelfDamagesCoverages.AppendChild(DescriptionSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);

                        LimitSelfDamages.InnerText = "0";
                        SelfDamagesCoverages.AppendChild(LimitSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);

                        DeducibleSelfDamages.InnerText = "0";

                        SelfDamagesCoverages.AppendChild(DeducibleSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);

                        MinimumDeductibleSelfDamages.InnerText = "0";
                        SelfDamagesCoverages.AppendChild(MinimumDeductibleSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);
                    }

                    #endregion Daños a terceros

                    #region Suplementos
                    var TotalSuplementos = 0m;

                    XmlElement Additionals;
                    XmlElement DescriptionAdditionals;
                    XmlElement LimitAdditionals;
                    XmlElement MinimumDeductibleAdditionals;

                    if (Additional.Any())
                    {
                        foreach (var itemAdditional in Additional)
                        {
                            Additionals = doc.CreateElement("Additionals");
                            DescriptionAdditionals = doc.CreateElement("Description");
                            LimitAdditionals = doc.CreateElement("Limit");
                            MinimumDeductibleAdditionals = doc.CreateElement("DeducibleMinimo");

                            DescriptionAdditionals.InnerText = itemAdditional.CoverageDesc.Capitalize(' ');
                            Additionals.AppendChild(DescriptionAdditionals);
                            Vehicles.AppendChild(Additionals);

                            var subRamo = itemAdditional.SubRamo.GetValueOrDefault();

                            var oCoverageSysflexValues = getSysFlexDataCoverage(106, subRamo, item.VehicleValue.GetValueOrDefault(), 1);

                            var Desc = itemAdditional.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                            var dataCoverageSysflex = oCoverageSysflexValues.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);
                            if (dataCoverageSysflex.Any())
                            {
                                var dPrima = dataCoverageSysflex.FirstOrDefault().Prima.Value;
                                var Prima = dPrima.ToString(CultureInfo.InvariantCulture);
                                TotalSuplementos += dPrima;
                                LimitAdditionals.InnerText = Prima;
                            }
                            else
                                LimitAdditionals.InnerText = "0";

                            Additionals.AppendChild(LimitAdditionals);
                            Vehicles.AppendChild(Additionals);

                            MinimumDeductibleAdditionals.InnerText = "0";
                            Additionals.AppendChild(MinimumDeductibleAdditionals);
                            Vehicles.AppendChild(Additionals);
                        }
                    }
                    else
                    {
                        Additionals = doc.CreateElement("Additionals");
                        DescriptionAdditionals = doc.CreateElement("Description");
                        LimitAdditionals = doc.CreateElement("Limit");
                        MinimumDeductibleAdditionals = doc.CreateElement("DeducibleMinimo");

                        DescriptionAdditionals.InnerText = string.Empty;
                        Additionals.AppendChild(DescriptionAdditionals);
                        Vehicles.AppendChild(Additionals);

                        LimitAdditionals.InnerText = "0";
                        Additionals.AppendChild(LimitAdditionals);
                        Vehicles.AppendChild(Additionals);

                        MinimumDeductibleAdditionals.InnerText = "0";
                        Additionals.AppendChild(MinimumDeductibleAdditionals);
                        Vehicles.AppendChild(Additionals);
                    }

                    #endregion Suplementos

                    //Agregar Totales por cada tipo de cobertura
                    var ThirdDamagesPrime = doc.CreateElement("ThirdDamagesPrime");
                    var SelfDamagesPrime = doc.CreateElement("SelfDamagesPrime");
                    var AdditionalsPrime = doc.CreateElement("AdditionalsPrime");
                    var TotalVehiclePrime = doc.CreateElement("TotalVehiclePrime");

                    var dPrimaCoverage = oPolicyManager.GetVehicleInsuredCoverageTypePremiun(new Policy.VehicleInsured.CoverageTypePremiun.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        InsuredVehicleId = item.InsuredVehicleId.GetValueOrDefault()
                    });

                    var T = dPrimaCoverage.Any() ? dPrimaCoverage.FirstOrDefault(t => t.CoverageTypeId == 1).PremiumAmount : 0;
                    var S = dPrimaCoverage.Any() ? dPrimaCoverage.FirstOrDefault(t => t.CoverageTypeId == 2).PremiumAmount : 0;
                    var A = TotalSuplementos;

                    ThirdDamagesPrime.InnerText = T.ToString(CultureInfo.InvariantCulture);
                    SelfDamagesPrime.InnerText = S.ToString(CultureInfo.InvariantCulture);
                    AdditionalsPrime.InnerText = A.ToString(CultureInfo.InvariantCulture);
                    TotalVehiclePrime.InnerText = (T + S + A).ToString(CultureInfo.InvariantCulture);
                    Vehicles.AppendChild(ThirdDamagesPrime);
                    Vehicles.AppendChild(SelfDamagesPrime);
                    Vehicles.AppendChild(AdditionalsPrime);
                    Vehicles.AppendChild(TotalVehiclePrime);
                }

                #endregion

                var PrimeResume = doc.CreateElement("PrimeResume");
                var PrimeResumeInMovement = doc.CreateElement("PrimeResumeInMovement");

                var TotalAnualPrime = doc.CreateElement("TotalAnualPrime");
                var TotalAnualPrimeMov = doc.CreateElement("TotalAnualPrimeMov");

                var Taxes = doc.CreateElement("Taxes");
                var TaxesMov = doc.CreateElement("TaxesMov");

                var Discount = doc.CreateElement("Discount");
                var DiscountMov = doc.CreateElement("DiscountMov");

                var TotalPayment = doc.CreateElement("TotalPayment");
                var TotalPaymentMov = doc.CreateElement("TotalPaymentMov");

                var Totalprime = PolicyData.AnnualPremium.HasValue ? PolicyData.AnnualPremium.Value : 0;
                var TotalTaxes = PolicyData.TaxPremium.HasValue ? PolicyData.TaxPremium.Value : 0;

                TotalAnualPrime.InnerText = Totalprime.ToString(CultureInfo.InvariantCulture);
                TotalAnualPrimeMov.InnerText = Totalprime.ToString(CultureInfo.InvariantCulture);

                Taxes.InnerText = TotalTaxes.ToString(CultureInfo.InvariantCulture);
                TaxesMov.InnerText = TotalTaxes.ToString(CultureInfo.InvariantCulture);

                Discount.InnerText = "0.00";
                DiscountMov.InnerText = "0.00";

                var totalPay = Totalprime + TotalTaxes;
                TotalPayment.InnerText = totalPay.ToString(CultureInfo.InvariantCulture);
                TotalPaymentMov.InnerText = totalPay.ToString(CultureInfo.InvariantCulture);

                PrimeResume.AppendChild(TotalAnualPrime);
                PrimeResume.AppendChild(Taxes);
                PrimeResume.AppendChild(Discount);
                PrimeResume.AppendChild(TotalPayment);

                PrimeResumeInMovement.AppendChild(TotalAnualPrimeMov);
                PrimeResumeInMovement.AppendChild(TaxesMov);
                PrimeResumeInMovement.AppendChild(DiscountMov);
                PrimeResumeInMovement.AppendChild(TotalPaymentMov);

                NodePaquete.AppendChild(PrimeResume);
                NodePaquete.AppendChild(PrimeResumeInMovement);
                var stringFile = Utility.CleanXMLToParse(doc.InnerXml);
                Binary = ASCIIEncoding.UTF8.GetBytes(stringFile);

            }
            catch (Exception ex)
            {
                throw ex;
            }

            return
                Binary;
        }


        public byte[] GenerateXMLCondicionadoAutoToThunderhead(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                     , int officeId, int caseSeqNo, int histSeqNo, String ServerMapPath, string DocumentType, long? vehicleUniqueID = null)
        {

            //const string XMLTemplate = "SysflexDataTempate.xml";
            const string XMLTemplate = "DATATemplate.xml";
            const string FormatoFecha = "{0:dd-MMM-yyyy}";

            var vDocumentIDMarbete = string.Empty;
            var vDocumentIDCondicionado = string.Empty;
            var vDocumentIDCondicionesParticulares = string.Empty;

            string Email = string.Empty;
            string XmlFilePath = string.Empty;
            byte[] Binary;

            try
            {

                vDocumentIDCondicionado = ConfigurationManager.AppSettings["DocumentIDConcionado"];

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                var dataVehicle = getVehicles(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, vehicleUniqueID).ToList();


                //Objeto de la data del Contacto
                var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

                if (ContactData == null)
                    throw new Exception(Resources.QuotationDontHasContact);

                //Correo del contacto
                var DataEmail = oContactManager
                            .GetCommunicatonEmail(Corp_Id, ContactData.ContactId, Language.ToInt());

                var EmailResult = DataEmail
                                 .FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                if (EmailResult != null)
                    Email = EmailResult.EmailAdress;

                //Direccion del Contacto
                var oAddress = oContactManager
                              .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                              .FirstOrDefault(x => x.DirectoryTypeId == 5);

                var Direccion = (oAddress != null) ? oAddress.StreetAddress : "-";

                //Telefonos del contacto
                var oPhones = oContactManager
                              .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

                //Id Doc
                var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
                var RecordId = dataId.FirstOrDefault();
                var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

                var PhoneNumber = dataPhonePrimary != null ?
                                  string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                                  : default(string);

                var BinaryTemplate = File.ReadAllBytes(ServerMapPath + XMLTemplate);

                Stream stream = new MemoryStream(BinaryTemplate);

                //Cargamos el documento XML
                var doc = new XmlDocument();
                doc.Load(stream);

                //Obtenemos el nodo raiz del documento.
                XmlElement AUTO_SYSFLEX = doc.DocumentElement;
                XmlNodeList Transaction = AUTO_SYSFLEX.GetElementsByTagName("Transaction");
                XmlNodeList oQuotation = AUTO_SYSFLEX.GetElementsByTagName("Quotation");
                var NodeQuotation = oQuotation[0];

                var NodeTransacction = Transaction[0];

                var DocumentId = string.Empty;

                //switch (DocumentType)
                //{
                //    case "Condicionado":
                DocumentId = vDocumentIDCondicionado;
                //        break;
                //}


                var isEfective = (StatusNameKey == "EFECT");

                DateTime? BeginDate = null;
                DateTime? EndDate = null;

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue || isEfective ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue || isEfective ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                NodeTransacction["DocumentId"].InnerText = DocumentId;


                if (dataVehicle.Any())
                {
                    var FirstProductTypeDesc = !string.IsNullOrEmpty(dataVehicle[0].ProductTypeDesc) ? dataVehicle[0].ProductTypeDesc.ToLower() : "";
                    if (FirstProductTypeDesc.Contains("serie m"))
                    {
                        NodeQuotation["Product"].InnerText = "SERIE M";
                    }
                    else
                    {
                        NodeQuotation["Product"].InnerText = FirstProductTypeDesc.ToUpper();
                    }
                }
                //NodeQuotation["Plan"].InnerText = "AUTO";
                NodeQuotation["StartDate"].InnerText = BeginDate.GetValueOrDefault().ToString("yyyy-MM-dd");
                NodeQuotation["EndDate"].InnerText = EndDate.GetValueOrDefault().ToString("yyyy-MM-dd");

                var stringFile = Utility.CleanXMLToParse(doc.InnerXml);
                Binary = ASCIIEncoding.UTF8.GetBytes(stringFile);

            }
            catch (Exception ex)
            {
                throw ex;
            }

            return
                Binary;
        }


        /// <summary>
        /// Generar el contrato y la tabla de amortización para propiedad
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="ServerMapPath"></param>
        /// <returns></returns>
        public byte[] GenerateXMLContratoKCOPropiedad(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                    , int officeId, int caseSeqNo, int histSeqNo, String ServerMapPath)
        {
            const string FormatoFecha = "{0:dd/MM/yyyy}";
            var result = new byte[] { };
            var Email = string.Empty;
            #region Data

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId,
                                                      regionId,
                                                      countryId,
                                                      domesticRegId,
                                                      stateProvId,
                                                      cityId,
                                                      officeId,
                                                      caseSeqNo,
                                                      histSeqNo
                                                     );

            if (!PolicyData.CurrencyId.HasValue)
                throw new Exception(Resources.QuotationDontHasCurrency);

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(PolicyData.CorpId, PolicyData.ContactId, Language.ToInt());

            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager.GetCommunicatonEmail(PolicyData.CorpId, ContactData.ContactId, Language.ToInt());

            var EmailResult = DataEmail.FirstOrDefault(x => x.IsPrimary);

            if (EmailResult == null)
                EmailResult = DataEmail.FirstOrDefault();

            if (EmailResult != null)
                Email = EmailResult.EmailAdress;

            //Direccion del Contacto
            var oAddress = oContactManager.GetCommunicatonAdress(PolicyData.CorpId, ContactData.ContactId, Language.ToInt())
                                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? string.Concat(oAddress.StreetAddress, ", ", oAddress.CityDesc, ", ", oAddress.MunicipioDesc) : "-";

            //Telefonos del contacto
            var oPhones = oContactManager.GetCommunicatonPhone(PolicyData.CorpId, ContactData.ContactId, Language.ToInt());

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var RecordId = dataId.FirstOrDefault();
            var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

            var PhoneNumber = dataPhonePrimary != null ? string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                                                       : default(string);

            #endregion
            #region Thunderhead
            var DocumentIDContratoKSIPropiedad = ConfigurationManager.AppSettings["DocumentIDContratoKSIPropiedad"];
            var data = new WEB.NewBusiness.Common.Thunderhead.KSI.Propiedad.Dataset();

            var oContract = new WEB.NewBusiness.Common.Thunderhead.KSI.Propiedad.Contract();
            var oTransaction = new WEB.NewBusiness.Common.Thunderhead.KSI.Propiedad.Transaction();
            var oLoan = new WEB.NewBusiness.Common.Thunderhead.KSI.Propiedad.Loan();
            var oFee = new WEB.NewBusiness.Common.Thunderhead.KSI.Propiedad.Fee();
            #region Transacction
            oTransaction.DocumentId = DocumentIDContratoKSIPropiedad;

            #region Loan
            oLoan.Account = "";
            oLoan.Id = "";
            oLoan.Status = "";
            oLoan.AccountName = ContactData.FullName;
            oLoan.Client = ContactData.FullName;
            oLoan.FoundsSource = "Fondos Propios";
            oLoan.FundsDestination = "-";
            oLoan.CredtitFacility = "PRESTAMOS PERSONALES PARA GASTOS";
            oLoan.Comite = "";
            oLoan.PaymentMethod = "";
            oLoan.RequestedAmount = "";
            oLoan.ApprovedAmount = "";
            oLoan.ReleasedAmount = "";
            oLoan.CapitalReturn = "";
            oLoan.LastCut = "";
            oLoan.Interest = "";
            oLoan.Comission = "";
            oLoan.DelayFee = "";
            oLoan.FeeAmount = "";
            oLoan.PaymentPeriod = "";
            oLoan.Frequency = "";
            oLoan.RequestDate = "";
            oLoan.ApprovementDate = "";
            oLoan.ReleasedDate = "";
            oLoan.ExpirationDate = "";
            oLoan.NextPaymentDate = "";

            #region Fee
            oLoan.Fee = new List<Thunderhead.KSI.Propiedad.Fee>(0);

            double Principal = GetPorcKCO();
            //Obtener la tabla de amortizacion del prestamo

            var annualPremium = (double)this.annualPremium.GetValueOrDefault();

            var FinancedAmount = annualPremium - ((Principal / 100) * annualPremium);

            var DataResult = GetAmortizationTable(FinancedAmount,
                                                  GlobalServices.LoanType.HouseInsurance,
                                                  (Period.GetValueOrDefault()),
                                                  Principal,
                                                  (double)this.annualPremium.GetValueOrDefault()
                                                 );

            double GastosCierre = DataResult.productCalculatorResult.ExpendituresAmount;

            FinancedAmount = DataResult.productCalculatorResult.FinancedAmount;

            var DataAT = DataResult.productCalculatorResult.AmotizationTable;

            var AmortizationTable = DataAT.Select(ta => new WEB.NewBusiness.Common.Thunderhead.KSI.Propiedad.Fee
            {
                Number = ta.PeriodNumber.ToString().Replace(",", ""),
                Date = string.Format(FormatoFecha, ta.Date),
                Amount = ta.Payment.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", ""),
                Capital = ta.Principal.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", ""),
                Interests = ta.Interest.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", ""),
                Comission = "0",
                Spends = "0",
                Total = ta.Balance.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "")
            });

            oLoan.TotalCapital = DataAT.Sum(p => p.Principal).ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            oLoan.TotalInterests = DataAT.Sum(p => p.Interest).ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            oLoan.TotalComissions = "0";
            oLoan.TotalSpends = "0";
            oLoan.TotalAmount = "";

            var NumeroCuotas = (DataAT.Count().ToString("#,0", CultureInfo.InvariantCulture).Replace(",", ""));
            var NumeroCuotasDisplay = Period.GetValueOrDefault();

            oLoan.FeeNumber = NumeroCuotas;
            oLoan.Fee.AddRange(AmortizationTable);
            data.Loan = oLoan;
            #endregion

            #endregion

            #endregion
            #region Contract
            var ValueToConvertAnnualPrime = FinancedAmount.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            var ValueToConvertMonthlyPayment = this.MonthlyPayment.GetValueOrDefault().ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            var LoanAmountString = Numalet.ToCardinal(ValueToConvertAnnualPrime, CultureInfo.InvariantCulture).ToUpper();
            var PaymentAmountString = Numalet.ToCardinal(ValueToConvertMonthlyPayment, CultureInfo.InvariantCulture).ToUpper();

            oContract.LoanNumber = PolicyData.PolicyNo;
            oContract.CustomerName = ContactData.FullName;
            oContract.Citizenship = this.Nationality;
            var dataMaritalStatus = GettingDropData(Utility.DropDownType.MaritalStatus).Select(m => new { m.MaritalStatusDesc, m.MaritalStatId });
            var MaritalStatusDesc = "N/A";

            if (dataMaritalStatus.Any() && ContactData.MaritalStatId.HasValue)
                MaritalStatusDesc = dataMaritalStatus.FirstOrDefault(c => c.MaritalStatId == ContactData.MaritalStatId).MaritalStatusDesc.Replace("/a", "");

            oContract.CivilStatus = MaritalStatusDesc;
            oContract.Id = ContactData.Id;
            oContract.Address1 = Direccion;
            oContract.Address2 = Direccion;
            oContract.CompanyRepresentative = "";
            oContract.CompanyRepCiticenship = "";
            oContract.CompanyRepId = "";
            oContract.QuotationNumber = PolicyData.PolicyNo;
            oContract.InsuranceCompany = "ATLANTICA SEGUROS";
            oContract.LoanAmountString = string.Format("{0} {1}", LoanAmountString, FinancedAmount.ToString("RD$#,0.00", CultureInfo.InvariantCulture));
            oContract.NumberOfPaymentString = string.Format("{0} ({1}) Cuotas", Numalet.ToCardinal(NumeroCuotasDisplay), NumeroCuotasDisplay).Replace("con 00/100.- ", "");
            oContract.PaymentAmountString = string.Format("{0} {1}", PaymentAmountString, this.MonthlyPayment.GetValueOrDefault().ToString("RD$#,0.00", CultureInfo.InvariantCulture));
            oContract.LoanRateString = "";

            if (!string.IsNullOrEmpty(ContactData.CreditCardNumber) && ContactData.CreditCardTypeId.HasValue)
            {
                oContract.CreditCardNumber = Utility.Decrypt_Query(ContactData.CreditCardNumber);
                oContract.CreditCardType = Enum.GetName(typeof(Utility.CreditCardType), ContactData.CreditCardTypeId).Replace("_", " ");
            }

            var Month = ContactData.ExpirationDateMonth.GetValueOrDefault();
            var Year = ContactData.ExpirationDateYear.GetValueOrDefault();

            var ExpirationDate = string.Concat(Month, "/", Year);
            oContract.CreditCardExpirationDate = ExpirationDate;

            string mes = DateTime.Now.ToString("MMMM").Capitalize();

            var ContractDateString = string.Format("{0}({1}) di­as del mes de {2} del año {3} ({4})",
                                                    Numalet.ToCardinal(DateTime.Now.Day).Replace("con 00/100.- ", ""),
                                                    DateTime.Now.Day,
                                                    mes,
                                                    Numalet.ToCardinal(DateTime.Now.Year).Replace("con 00/100.- ", ""),
                                                    DateTime.Now.Year);

            oContract.ContractDateString = ContractDateString;
            #endregion

            data.Transaction = oTransaction;
            data.Contract = oContract;
            #endregion

            var DocXML = SerializeToXMLString(data);

            result = Encoding.UTF8.GetBytes(DocXML);

            return
                 result;
        }


        /// <summary>
        /// Generar el contrato y la tabla de amortización para auto
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="ServerMapPath"></param>
        /// <returns></returns>
        public byte[] GenerateXMLContratoKCO(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                           , int officeId, int caseSeqNo, int histSeqNo, String ServerMapPath)
        {
            const string FormatoFecha = "{0:dd/MM/yyyy}";
            var result = new byte[] { };
            var Email = string.Empty;
            #region Data

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId,
                                                      regionId,
                                                      countryId,
                                                      domesticRegId,
                                                      stateProvId,
                                                      cityId,
                                                      officeId,
                                                      caseSeqNo,
                                                      histSeqNo
                                                     );

            if (!PolicyData.CurrencyId.HasValue)
                throw new Exception(Resources.QuotationDontHasCurrency);

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(PolicyData.CorpId, PolicyData.ContactId, Language.ToInt());

            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager.GetCommunicatonEmail(PolicyData.CorpId, ContactData.ContactId, Language.ToInt());

            var EmailResult = DataEmail.FirstOrDefault(x => x.IsPrimary);

            if (EmailResult == null)
                EmailResult = DataEmail.FirstOrDefault();

            if (EmailResult != null)
                Email = EmailResult.EmailAdress;

            //Direccion del Contacto
            var oAddress = oContactManager.GetCommunicatonAdress(PolicyData.CorpId, ContactData.ContactId, Language.ToInt())
                                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? string.Concat(oAddress.StreetAddress, ", ", oAddress.CityDesc, ", ", oAddress.MunicipioDesc) : "-";

            //Telefonos del contacto
            var oPhones = oContactManager.GetCommunicatonPhone(PolicyData.CorpId, ContactData.ContactId, Language.ToInt());

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var RecordId = dataId.FirstOrDefault();
            var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

            var PhoneNumber = dataPhonePrimary != null ? string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                                                       : default(string);

            #endregion
            #region Thunderhead
            var DocumentIDContratoKSI = ConfigurationManager.AppSettings["DocumentIDContratoKSI"];

            var data = new WEB.NewBusiness.Common.Thunderhead.KSI.POS_AUTO();

            var oContract = new WEB.NewBusiness.Common.Thunderhead.KSI.Contract();
            var oTransaction = new WEB.NewBusiness.Common.Thunderhead.KSI.Transaction();
            var oLoan = new WEB.NewBusiness.Common.Thunderhead.KSI.Loan();
            var oFee = new WEB.NewBusiness.Common.Thunderhead.KSI.Fee();
            #region Transacction
            oTransaction.DocumentId = DocumentIDContratoKSI;

            #region Loan
            oLoan.Account = "";
            oLoan.Id = "";
            oLoan.Status = "";
            oLoan.AccountName = ContactData.FullName;
            oLoan.Client = ContactData.FullName;
            oLoan.FoundsSource = "Fondos Propios";
            oLoan.FundsDestination = "-";
            oLoan.CredtitFacility = "PRESTAMOS PERSONALES PARA GASTOS";
            oLoan.Comite = "";
            oLoan.PaymentMethod = "";
            oLoan.RequestedAmount = "";
            oLoan.ApprovedAmount = "";
            oLoan.ReleasedAmount = "";
            oLoan.CapitalReturn = "";
            oLoan.LastCut = "";
            oLoan.Interest = "";
            oLoan.Comission = "";
            oLoan.DelayFee = "";
            oLoan.FeeAmount = "";
            oLoan.PaymentPeriod = "";
            oLoan.Frequency = "";
            oLoan.RequestDate = "";
            oLoan.ApprovementDate = "";
            oLoan.ReleasedDate = "";
            oLoan.ExpirationDate = "";
            oLoan.NextPaymentDate = "";

            #region Fee
            oLoan.Fee = new List<Thunderhead.KSI.Fee>(0);
            double Principal = GetPorcKCO();

            //Obtener la tabla de amortizacion del prestamo
            var annualPremium = (double)this.annualPremium.GetValueOrDefault();
            var FinancedAmount = (annualPremium - ((Principal / 100) * annualPremium));

            var DataResult = GetAmortizationTable(FinancedAmount,
                                                  GlobalServices.LoanType.VehicleInsurance,
                                                  Period.GetValueOrDefault(),
                                                  Principal,
                                                  (double)this.annualPremium.GetValueOrDefault()
                                                 );

            double GastosCierre = DataResult.productCalculatorResult.ExpendituresAmount;

            FinancedAmount = DataResult.productCalculatorResult.FinancedAmount;

            var DataAT = DataResult.productCalculatorResult.AmotizationTable;

            var AmortizationTable = DataAT.Select(ta => new WEB.NewBusiness.Common.Thunderhead.KSI.Fee
            {
                Number = ta.PeriodNumber.ToString().Replace(",", ""),
                Date = string.Format(FormatoFecha, ta.Date),
                Amount = ta.Payment.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", ""),
                Capital = ta.Principal.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", ""),
                Interests = ta.Interest.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", ""),
                Comission = "0",
                Spends = "0",
                Total = ta.Balance.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "")
            });

            oLoan.TotalCapital = DataAT.Sum(p => p.Principal).ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            oLoan.TotalInterests = DataAT.Sum(p => p.Interest).ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            oLoan.TotalComissions = "0";
            oLoan.TotalSpends = "0";
            oLoan.TotalAmount = "";

            var NumeroCuotas = (DataAT.Count()).ToString("#,0", CultureInfo.InvariantCulture).Replace(",", "");
            var NumeroCuotasDisplay = Period.GetValueOrDefault();

            oLoan.FeeNumber = NumeroCuotas;
            oLoan.Fee.AddRange(AmortizationTable);
            oTransaction.Loan = oLoan;
            #endregion

            #endregion

            #endregion
            #region Contract
            var ValueToConvertAnnualPrime = FinancedAmount.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            var ValueToConvertMonthlyPayment = this.MonthlyPayment.GetValueOrDefault().ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            var LoanAmountString = Numalet.ToCardinal(ValueToConvertAnnualPrime, CultureInfo.InvariantCulture).ToUpper();
            var PaymentAmountString = Numalet.ToCardinal(ValueToConvertMonthlyPayment, CultureInfo.InvariantCulture).ToUpper();

            oContract.LoanNumber = PolicyData.PolicyNo;
            oContract.CustomerName = ContactData.FullName;
            oContract.Citizenship = this.Nationality;

            var dataMaritalStatus = GettingDropData(Utility.DropDownType.MaritalStatus).Select(m => new { m.MaritalStatusDesc, m.MaritalStatId });
            var MaritalStatusDesc = "N/A";

            if (dataMaritalStatus.Any() && ContactData.MaritalStatId.HasValue)
                MaritalStatusDesc = dataMaritalStatus.FirstOrDefault(c => c.MaritalStatId == ContactData.MaritalStatId).MaritalStatusDesc.Replace("/a", "");

            oContract.CivilStatus = MaritalStatusDesc;
            oContract.Id = ContactData.Id;
            oContract.Address1 = Direccion;
            oContract.Address2 = Direccion;
            oContract.CompanyRepresentative = "";
            oContract.CompanyRepCiticenship = "";
            oContract.CompanyRepId = "";
            oContract.QuotationNumber = PolicyData.PolicyNo;
            oContract.InsuranceCompany = "ATLANTICA SEGUROS";
            oContract.LoanAmountString = string.Format("{0} {1}", LoanAmountString, FinancedAmount.ToString("RD$#,0.00", CultureInfo.InvariantCulture));
            oContract.NumberOfPaymentString = string.Format("{0} ({1}) Cuotas", Numalet.ToCardinal(NumeroCuotasDisplay.ToString(), CultureInfo.InvariantCulture), NumeroCuotasDisplay.ToString()).Replace("con 00/100.- ", "");
            oContract.PaymentAmountString = string.Format("{0} {1}", PaymentAmountString, this.MonthlyPayment.GetValueOrDefault().ToString("RD$#,0.00", CultureInfo.InvariantCulture));
            oContract.LoanRateString = "";

            if (!string.IsNullOrEmpty(ContactData.CreditCardNumber) && ContactData.CreditCardTypeId.HasValue)
            {
                oContract.CreditCardNumber = Utility.Decrypt_Query(ContactData.CreditCardNumber);
                oContract.CreditCardType = Enum.GetName(typeof(Utility.CreditCardType), ContactData.CreditCardTypeId).Replace("_", " ");
            }

            var Month = ContactData.ExpirationDateMonth.GetValueOrDefault();
            var Year = ContactData.ExpirationDateYear.GetValueOrDefault();

            var ExpirationDate = string.Concat(Month, "/", Year);
            oContract.CreditCardExpirationDate = ExpirationDate;

            string mes = DateTime.Now.ToString("MMMM").Capitalize();

            var ContractDateString = string.Format("{0}({1}) di­as del mes de {2} del año {3} ({4})",
                                                    Numalet.ToCardinal(DateTime.Now.Day).Replace("con 00/100.- ", ""),
                                                    DateTime.Now.Day,
                                                    mes,
                                                    Numalet.ToCardinal(DateTime.Now.Year).Replace("con 00/100.- ", ""),
                                                    DateTime.Now.Year);

            oContract.ContractDateString = ContractDateString;
            #endregion

            data.Transaction = oTransaction;
            data.Contract = oContract;
            #endregion

            var DocXML = SerializeToXMLString(data);

            result = Encoding.UTF8.GetBytes(DocXML);

            return
                 result;
        }

        /// <summary>
        /// Generar la tabla de amortizacion en KreditCo
        /// </summary>
        /// <returns></returns>
        public GlobalServices.CalculateLoansResult GetAmortizationTable(double vannualPremium,
                                                                        GlobalServices.LoanType vloanType,
                                                                        int? vPeriod,
                                                                        double DownPaymentPercentage,
                                                                        double TotalPremium
                                                                        )
        {

            //Obtener la tabla de amortizacion del prestamo
            var DataResult = oPolicyGlobalService.ksiCalculator(new GlobalServices.PolicyksiCalculatorparameter
            {
                DesiredAmount = vannualPremium,
                LoanType = vloanType,
                Periods = vPeriod.GetValueOrDefault(),
                DownPaymentPercentage = DownPaymentPercentage,
                TotalPremium = TotalPremium
            });

            var hasError = ErrorCode.Contains(DataResult.Code);

            if (hasError)
                throw new Exception(string.Format("No se pudo generar la tabla de amortización  Error : {0}", DataResult.Message));

            return
                DataResult;
        }

        private CondicionesPago GetPaymentAgreementQuots(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                       , int officeId, int caseSeqNo, int histSeqNo, decimal AnnualPremium, decimal TaxPremium)
        {
            var setCondicionesPago = new CondicionesPago();
            setCondicionesPago.AnnualPrime = (AnnualPremium + TaxPremium);
            setCondicionesPago.ISC = TaxPremium;
            setCondicionesPago.NetPrime = AnnualPremium;
            setCondicionesPago.TotalPrime = 0m;

            var paymentAgreement = oPaymentManager.GetPaymentAgreementQuots(new Payment.Agreement
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo
            });

            if (paymentAgreement.Any())
            {
                var qty = paymentAgreement.Count(); //paymentAgreement.Count;
                var Inicial = qty == 1 ? new Entity.UnderWriting.Entities.Payment.Agreement.Quot { ValueQty = (AnnualPremium + TaxPremium) }
                                        : paymentAgreement.FirstOrDefault(p => p.NumberOfQTy == 0);



                var Cuota1 = qty == 1 ? null : paymentAgreement.FirstOrDefault(p => p.NumberOfQTy == 1);
                var Cuota2 = paymentAgreement.FirstOrDefault(p => p.NumberOfQTy == 2);
                var Cuota3 = paymentAgreement.FirstOrDefault(p => p.NumberOfQTy == 3);
                var Cuota4 = paymentAgreement.FirstOrDefault(p => p.NumberOfQTy == 4);

                setCondicionesPago.Inicial = Inicial != null && Inicial.ValueQty.HasValue ? Inicial.ValueQty.GetValueOrDefault() : 0m;
                setCondicionesPago.Cuota1 = Cuota1 != null && Cuota1.ValueQty.HasValue ? Cuota1.ValueQty.GetValueOrDefault() : 0m;
                setCondicionesPago.Cuota2 = Cuota2 != null && Cuota2.ValueQty.HasValue ? Cuota2.ValueQty.GetValueOrDefault() : 0m;
                setCondicionesPago.Cuota3 = Cuota3 != null && Cuota3.ValueQty.HasValue ? Cuota3.ValueQty.GetValueOrDefault() : 0m;
                setCondicionesPago.Cuota4 = Cuota4 != null && Cuota4.ValueQty.HasValue ? Cuota4.ValueQty.GetValueOrDefault() : 0m;
            }

            return
                setCondicionesPago;
        }
        private WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CondicionesPago GetPaymentAgreementQuotsAlliedLines(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                       , int officeId, int caseSeqNo, int histSeqNo, decimal AnnualPremium, decimal TaxPremium)
        {
            var setCondicionesPago = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CondicionesPago();
            setCondicionesPago.ISC = TaxPremium;
            setCondicionesPago.NetPrime = AnnualPremium;
            setCondicionesPago.TotalPrime = (AnnualPremium + TaxPremium);

            //var paymentAgreement = oPaymentManager.GetPaymentAgreementQuots(new Payment.Agreement
            //{
            //    CorpId = corpId,
            //    RegionId = regionId,
            //    CountryId = countryId,
            //    DomesticregId = domesticRegId,
            //    StateProvId = stateProvId,
            //    CityId = cityId,
            //    OfficeId = officeId,
            //    CaseSeqNo = caseSeqNo,
            //    HistSeqNo = histSeqNo
            //});

            //if (paymentAgreement != null)
            //{
            //    var qty = paymentAgreement.Count(); //paymentAgreement.Count;
            //    var Inicial = qty == 1 ? new Entity.UnderWriting.Entities.Payment.Agreement.Quot { ValueQty = (AnnualPremium + TaxPremium) }
            //                            : paymentAgreement.FirstOrDefault(p => p.NumberOfQTy == 0);

            //}

            return
                setCondicionesPago;
        }

        /// <summary>
        /// Generar la Cotizacion de Property
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="ServerMapPath"></param>
        /// <param name="UniqueID"></param>
        /// <param name="templateType"></param>
        /// <returns></returns>
        public byte[] GenerateXMLQuotationThuderheadProperty(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                           , int officeId, int caseSeqNo, int histSeqNo, String ServerMapPath, long? UniqueID = null
                                                           , ThunderheadWrap.Service.TemplateType templateType = ThunderheadWrap.Service.TemplateType.CotizacionPropiedad)
        {
            byte[] result = null;

            #region Consultas Varias

            var Email = string.Empty;
            var vRamo = "107"; // Incendio y Lineas aliadas

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
             , officeId, caseSeqNo, histSeqNo);

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager
                        .GetCommunicatonEmail(Corp_Id, ContactData.ContactId, Language.ToInt());

            var EmailResult = DataEmail
                             .FirstOrDefault(x => x.IsPrimary);

            if (EmailResult == null)
                EmailResult = DataEmail.FirstOrDefault();

            if (EmailResult != null)
                Email = EmailResult.EmailAdress;

            //Direccion del Contacto
            var oAddress = oContactManager
                          .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? oAddress.StreetAddress : "-";

            //Telefonos del contacto
            var oPhones = oContactManager
                          .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var RecordId = dataId.FirstOrDefault();
            var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

            var PhoneNumber = dataPhonePrimary != null ?
                              string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                              : default(string);
            #endregion

            var oDataSet = new Dataset();
            var oTransaction = new WEB.NewBusiness.Common.Thunderhead.Transaction();

            #region switch templateType and DocumentIDQuotProperty
            switch (templateType)
            {
                case ThunderheadWrap.Service.TemplateType.Condicionado:
                    oTransaction.DocumentId = ConfigurationManager.AppSettings["DocumentIDConditionedProperty"];//"1335506526"
                    break;

                case ThunderheadWrap.Service.TemplateType.CotizacionPropiedad:

                    switch (AlliedLinesProductBehavior)
                    {
                        case Utility.AlliedLinesType.Airplane:
                            oTransaction.DocumentId = (Country == Utility.Country.RepublicaDominicana) ? ConfigurationManager.AppSettings["DocumentIDQuotPropertyRD"]
                                                                                                       : ConfigurationManager.AppSettings["DocumentIDQuotAirplaneSV"];
                            break;
                        case Utility.AlliedLinesType.Bail:
                            oTransaction.DocumentId = (Country == Utility.Country.RepublicaDominicana) ? ConfigurationManager.AppSettings["DocumentIDQuotPropertyRD"]
                                                                                                       : ConfigurationManager.AppSettings["DocumentIDQuotBailSV"];

                            break;
                        case Utility.AlliedLinesType.Navy:
                            oTransaction.DocumentId = (Country == Utility.Country.RepublicaDominicana) ? ConfigurationManager.AppSettings["DocumentIDQuotPropertyRD"]
                                                                                                       : ConfigurationManager.AppSettings["DocumentIDQuotNavySV"];
                            break;
                        case Utility.AlliedLinesType.Property:
                            oTransaction.DocumentId = (Country == Utility.Country.RepublicaDominicana) ? ConfigurationManager.AppSettings["DocumentIDQuotPropertyRD"]
                                                                                                      : ConfigurationManager.AppSettings["DocumentIDQuotPropertySV"];
                            break;
                        case Utility.AlliedLinesType.Transport:
                            oTransaction.DocumentId = (Country == Utility.Country.RepublicaDominicana) ? ConfigurationManager.AppSettings["DocumentIDQuotPropertyRD"]
                                                                                                      : ConfigurationManager.AppSettings["DocumentIDQuotTranportSV"];
                            break;
                    }
                    break;
            }
            #endregion

            var oPolicyInfo = new PolicyInfo();

            oPolicyInfo.FullName = ContactData.FullName;
            oPolicyInfo.NoPoliza = PolicyData.PolicyNo;
            oPolicyInfo.Ramo = vRamo;
            oPolicyInfo.AgenteComercial = PolicyData.Agent_Name + " (" + PolicyData.AgentCode + ")";
            var agentSupervisor = oPolicyManager.GetAgentSupervisor(corpId, PolicyData.Agent_Id);
            oPolicyInfo.Supervisor = agentSupervisor.Count() > 0 ? agentSupervisor.FirstOrDefault().SupervisporFullName
                                                                 : "N/A";


            var oCotizacionFire = new List<CotizacionFire>(0);
            Cliente oCliente;
            List<Coverages> oCoverages;
            var oAdditionals = new List<Additionals>(0);
            var oPrimeResume = new PrimeResume();
            var oSeaShips = new List<SeaShips>(0);
            var oPaymentDetail = new PaymentDetail();
            var oReclamo = new Reclamo();
            var oPropiedad = new List<Propiedad>(0);

            oTransaction.Username = this.UserFullName;

            //Datos del Cliente
            oCliente = new Cliente
            {
                FullName = ContactData.FullName,
                IdNumber = RecordId.Id,
                TelephoneNumber = PhoneNumber,
                Email = Email,
                Direccion = Direccion,
                ShippingAddress = Direccion,
            };

            string currencyDesc = "";

            switch (PolicyData.CurrencyId.Value)
            {
                case 1:
                    currencyDesc = RESOURCE.UnderWriting.NewBussiness.Resources.CurrencyLabelDolar;// "Dolar";
                    break;
                case 2:
                    currencyDesc = RESOURCE.UnderWriting.NewBussiness.Resources.CurrencyLabelEur; //"Euros";
                    break;
                case 3:
                    currencyDesc = RESOURCE.UnderWriting.NewBussiness.Resources.CurrencyLabelDop; //"Pesos";
                    break;
            }

            DateTime? BeginDate = null;
            DateTime? EndDate = null;

            var isEfective = (StatusNameKey == "EFECT");

            BeginDate = PolicyData.PolicyEffectiveDate.HasValue || isEfective ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
            EndDate = PolicyData.ExpirationDate.HasValue || isEfective ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);
            oPolicyInfo.PolicyPeriodStart = BeginDate.Value.ToString("dd/MM/yyyy"); //Esta parte es obligatorio enviarla para que funcione el Condicionado de Todo Riesgo De Propiedades

            switch (AlliedLinesProductBehavior)
            {
                #region Propiedad
                case Utility.AlliedLinesType.Property:
                    var dataProperty = oPropertyManager.GetProperty(new Entity.UnderWriting.Entities.Property.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticregId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataProperty != null && dataProperty.Count() > 0)
                    {
                        oPolicyInfo.Product = dataProperty.Count() == 1 ? dataProperty.FirstOrDefault().ProductDesc : "Varios";
                        oTransaction.FullName = ContactData.FullName;
                        oTransaction.Plan = dataProperty.FirstOrDefault().ProductDesc;

                        foreach (var dp in dataProperty)
                        {
                            oCoverages = new List<Coverages>();
                            string Producto = dp.ProductDesc;

                            if (Producto.ToLower().Contains("todo riesgo propiedades"))
                            {
                                oTransaction.DocumentId = ConfigurationManager.AppSettings["DocumentIDConditionedAllRiskProperty"];//"1335506528"
                            }

                            /*Coberturas*/
                            var dataCoverageProperty = oPropertyManager.GetPropertyInsuredDetailCoverage(new Property.Insured.Detail.Coverage.GetDetailCoverageResult.Key
                            {
                                corpId = Corp_Id,
                                uniquePropertyId = dp.UniquePropertyId
                            }).Select(c => new
                            {
                                CurrencyId = c.CurrencyId,
                                UnitaryPrice = c.UnitaryPrice,
                                PackagePrice = c.PackagePrice,
                                DeductibleAmount = c.DeductibleAmount,
                                DeductiblePercentage = c.DeductiblePercentage.Value,
                                ManualDeductibleAmount = c.ManualDeductibleAmount,
                                ManualDeductiblePercentage = c.ManualDeductiblePercentage,
                                CoverageLimit = c.CoverageLimit.HasValue && c.CoverageLimit.Value > 0 ? c.CoverageLimit.Value.ToFormatNumeric() : "0",
                                CoverageStatus = c.CoverageStatus,
                                CorpId = c.CorpId,
                                UniquePropertyId = c.UniquePropertyId,
                                RegionId = c.RegionId,
                                CountryId = c.CountryId,
                                BlTypeId = c.BlTypeId,
                                BlId = c.BlId,
                                ProductId = c.ProductId,
                                VehicleTypeId = c.VehicleTypeId,
                                GroupId = c.GroupId,
                                CoverageTypeId = c.CoverageTypeId,
                                CoverageId = c.CoverageId,
                                CoverageTypeDesc = c.CoverageTypeDesc,
                                GroupDesc = c.GroupDesc,
                                CoverageDesc = c.CoverageDesc,
                                CoinsurancePercentage = c.CoinsurancePercentage.HasValue && c.CoinsurancePercentage.Value > 0 ? c.CoinsurancePercentage.Value.Truncate() + "%" : "-",
                                DeductibleInDay = c.DeductibleInDay,
                                BaseDeducible = c.BaseDeducible
                            });

                            if (dataCoverageProperty.Any())
                            {
                                foreach (var cp in dataCoverageProperty)
                                {
                                    var setCoverages = new Coverages();

                                    setCoverages.Description = cp.CoverageDesc.Capitalize(' ');
                                    setCoverages.Percentage = cp.DeductiblePercentage.Truncate() + "%";
                                    setCoverages.Maximo = cp.CoverageLimit.ToDecimal();
                                    setCoverages.Minimo = cp.DeductibleAmount.HasValue ? cp.DeductibleAmount.Value : 0;

                                    setCoverages.Limit = cp.CoverageLimit;//.Replace(",", "") 
                                    setCoverages.Coaseguro = cp.CoinsurancePercentage;
                                    setCoverages.Deducible = !cp.DeductibleInDay.Value ? cp.DeductiblePercentage.Truncate() + "%"
                                                                 : cp.DeductiblePercentage.Truncate() + " en dias";

                                    setCoverages.Base = string.IsNullOrEmpty(cp.BaseDeducible) ? "-" : cp.BaseDeducible;
                                    setCoverages.Type = cp.CoverageTypeDesc;
                                    oCoverages.Add(setCoverages);
                                }
                            }


                            var setCotizacionFire = new CotizacionFire();
                            setCotizacionFire.Coverages = oCoverages;
                            setCotizacionFire.ElementoAsegurado = new List<ElementoAsegurado>();
                            setCotizacionFire.Construccion = new List<Construccion>();
                            setCotizacionFire.CrystalsandSigns = new List<CrystalsandSigns>();
                            setCotizacionFire.Equitment = new List<Equitment>();
                            setCotizacionFire.ValoresAsegurados = new List<ValorAsegurado>(0);


                            if (Producto.ToLower().Contains("todo riesgo propiedades"))
                                Producto = "Todo Riesgo De Propiedades";

                            if (Producto.ToLower().Contains("todo riesgos objetos valiosos"))
                                Producto = "Todo Riesgo Objetos Valiosos";

                            setCotizacionFire.Producto = Producto;
                            oPolicyInfo.Product = Producto;

                            /*Campos*/
                            setCotizacionFire.ProposalDate = PolicyData.CreateDate.ToString("dd/MM/yyyy");
                            setCotizacionFire.Name = ContactData.FirstName + " " + ContactData.MiddleName;
                            setCotizacionFire.LastName = ContactData.FirstLastName + " " + ContactData.SecondLastName;
                            setCotizacionFire.QuotationNumber = PolicyData.PolicyNo;
                            setCotizacionFire.QuotationDate = PolicyData.CreateDate.ToString("dd/MM/yyyy");
                            setCotizacionFire.TipoNegocioOActividad = dp.ActivfityTypeDesc;
                            setCotizacionFire.Jurisdiction = dp.CountryDescLoc;
                            setCotizacionFire.Location = string.Format("{0} {1}, {2}, {3}, {4}", dp.AddressStreet, dp.AddressNumber, dp.CityDescLoc, dp.StateProvDescLoc, dp.CountryDescLoc);
                            setCotizacionFire.TipoMoneda = currencyDesc;
                            setCotizacionFire.InsuredName = ContactData.FullName;
                            setCotizacionFire.QtyDoctors = 0;

                            setCotizacionFire.Artwork = "";
                            setCotizacionFire.Jewelry = "";
                            setCotizacionFire.ValuableObjects = "";

                            /**/

                            /*Colindancias*/
                            setCotizacionFire.ColindanciaNorte = dp.NorthBorderDesc != null ? dp.NorthBorderDesc : "";
                            setCotizacionFire.ColindanciaSur = dp.SouthBorderDesc != null ? dp.SouthBorderDesc : "";
                            setCotizacionFire.ColindanciaEste = dp.EastBorderDesc != null ? dp.EastBorderDesc : "";
                            setCotizacionFire.ColindanciaOeste = dp.WestBorderDesc != null ? dp.WestBorderDesc : "";
                            /**/

                            /*Distancia a(en km)*/
                            setCotizacionFire.DistanciaRios = dp.DistanceKilometersRiver != null ? dp.DistanceKilometersRiver : "";
                            setCotizacionFire.DistanciaMares = dp.DistanceKilometersSea != null ? dp.DistanceKilometersSea : "";
                            setCotizacionFire.DistanciaCanadas = dp.DistanceKilometersStream != null ? dp.DistanceKilometersSea : "";
                            /**/

                            /*Interés Asegurado*/
                            var setElementoAsegurado = new ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Edificio";
                            setElementoAsegurado.Valor = dp.EdificationValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Maquinarias";
                            setElementoAsegurado.Valor = dp.MachineryValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Mobiliarios";
                            setElementoAsegurado.Valor = dp.FurnitureAndEquipmentValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Mejoras";
                            setElementoAsegurado.Valor = dp.RemodelingAndFittingValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Existencias";
                            setElementoAsegurado.Valor = dp.StockValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new ElementoAsegurado();
                            setElementoAsegurado.Descripcion = "Otros";
                            setElementoAsegurado.Valor = dp.ValueObjectAndArtValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new ElementoAsegurado();
                            setElementoAsegurado.Descripcion = "Total";
                            setElementoAsegurado.Valor = (dp.EdificationValue + dp.MachineryValue + dp.FurnitureAndEquipmentValue + dp.RemodelingAndFittingValue + dp.StockValue + dp.ValueObjectAndArtValue).ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);
                            /**/

                            /*Tipo de construcción*/
                            var setConstruccion = new Construccion();
                            setConstruccion.Tipo = dp.PropertyBuildTypeDesc;
                            setConstruccion.Descripcion = "-";
                            setConstruccion.DuracionDeLaObra = "-";
                            setConstruccion.Exclusions = "";
                            setConstruccion.Location = setCotizacionFire.Location;
                            setConstruccion.Proyecto = "";
                            setConstruccion.ValorProyecto = 0;
                            /**/

                            var valAsegurado = new ValorAsegurado { Descripcion = "Valor Asegurado", Valor = dp.InsuredAmount };
                            setCotizacionFire.ValoresAsegurados.Add(valAsegurado);

                            var valAseguradoLimiteAgregado = new ValorAsegurado { Descripcion = "Limite en el Agregado Anual", Valor = dp.InsuredAmount };
                            setCotizacionFire.ValoresAsegurados.Add(valAseguradoLimiteAgregado);

                            var valTotalAsegurado = new ValorAsegurado { Descripcion = "Total Asegurado", Valor = dp.InsuredAmount };
                            setCotizacionFire.ValoresAsegurados.Add(valTotalAsegurado);

                            var valSumaAsegurada = new ValorAsegurado { Descripcion = "Suma Asegurada", Valor = dp.InsuredAmount };
                            setCotizacionFire.ValoresAsegurados.Add(valSumaAsegurada);


                            //Acuerdo de pago
                            var setCondicionesPago = GetPaymentAgreementQuots(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());

                            /*Detail Features*/
                            var parameter = new Property.Insured.Detail.Feature.GetPropertyInsuredDetailFeatureResult.Key
                            {
                                corpId = dp.CorpId,
                                uniquePropertyId = dp.UniquePropertyId,
                                seqId = null
                            };

                            var DetailFeatures = oPropertyManager.GetPropertyInsuredDetailFeature(parameter).ToList();

                            bool isCristalProduct = dp.ProductDesc.ToLower().Contains("cristales");

                            if (DetailFeatures.Any())
                            {
                                foreach (var df in DetailFeatures)
                                {
                                    if (isCristalProduct)
                                    {
                                        var setCrystalsandSigns = new CrystalsandSigns();

                                        setCrystalsandSigns.CrystalLocation = !string.IsNullOrEmpty(df.PositionDesc) ? df.PositionDesc : "-";

                                        setCrystalsandSigns.TipoMedida = !string.IsNullOrEmpty(df.MeasureTypeDesc) ? df.MeasureTypeDesc : "";

                                        setCrystalsandSigns.Alto = df.Height;
                                        setCrystalsandSigns.Ancho = df.Width;

                                        setCrystalsandSigns.ValorAsegurado = df.Value.GetValueOrDefault();

                                        setCrystalsandSigns.Deducible = df.Deductible.HasValue ? df.Deductible.Value.ToFormatNumeric().Replace(",", "") : "-";

                                        setCrystalsandSigns.Minimo = df.MinimumDeductible.HasValue ? df.MinimumDeductible.Value.ToFormatNumeric() : "-";

                                        setCotizacionFire.CrystalsandSigns.Add(setCrystalsandSigns);
                                    }

                                    if (!string.IsNullOrEmpty(df.Brand))
                                    {
                                        var setEquipments = new Equitment
                                        {
                                            EquitmentType = "N/A",
                                            Model = df.Model,
                                            Make = df.Brand,
                                            Serial = string.IsNullOrEmpty(df.SerialKey) ? "-" : df.SerialKey,
                                            Value = df.Value.HasValue ? df.Value.Value : 0,
                                            InsuredAmount = df.Value.HasValue ? df.Value.Value : 0,
                                            REF = "-",
                                            Chasis = "-",
                                            Registro = "-",
                                            Year = "-",
                                            Category = "-",
                                            Period = "-",
                                            InsuredName = "-",
                                            LastOverHaul = "-",
                                            Type = "-",
                                            Use = "-",
                                            Enrollment = "-",
                                            BaseAirport = "",
                                            Sinister = "-",
                                            Exclusions = "-",
                                            Clauses = "-",
                                            Manufacturer = "-",
                                            Capacity = string.IsNullOrEmpty(df.Capacity) ? 0 : df.Capacity.ToDecimal(),
                                            Crew = 0,
                                            Limit = "0",
                                            Minimo = df.MinimumDeductible.HasValue ? df.MinimumDeductible.Value.ToString() : "0",
                                            Deducible = df.Deductible.HasValue ? df.Deductible.Value.ToString() : "0"
                                        };

                                        setCotizacionFire.Equitment.Add(setEquipments);
                                    }
                                }
                            }

                            oAdditionals.Add(new WEB.NewBusiness.Common.Thunderhead.Additionals()
                            {
                                Description = "",
                                Limit = 0,
                                Percentage = "0"
                            });

                            setCotizacionFire.Construccion.Add(setConstruccion);
                            setCotizacionFire.CondicionesPago = setCondicionesPago;

                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }
                    break;
                #endregion
                #region Cascos Maritimos
                case Utility.AlliedLinesType.Navy:
                    var dataNavy = oNavyManager.GetNavyInsured(new Entity.UnderWriting.Entities.Navy.Insured.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticRegId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataNavy != null && dataNavy.Count() > 0)
                    {
                        oPolicyInfo.Product = dataNavy.Count() == 1 ? dataNavy.FirstOrDefault().ProductDesc : "Varios";

                        foreach (var dp in dataNavy)
                        {
                            oCoverages = new List<Coverages>();

                            var dataCoverages = oNavyManager.GetNavyInsuredCoverage(new Navy.Insured.Coverage.Key
                            {
                                CorpId = Corp_Id,
                                UniqueNavyId = (int)dp.UniqueNavyId
                            });

                            foreach (var itemCoverages in dataCoverages)
                            {
                                var setCoverages = new Coverages
                                {
                                    Description = itemCoverages.CoverageDesc.Capitalize(' '),

                                    Deducible = itemCoverages.DeductiblePercentage.HasValue && itemCoverages.DeductiblePercentage.Value > 0 ? itemCoverages.DeductiblePercentage.Value.Truncate() + "%" : "-",

                                    Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                    Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,

                                    Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                    Coaseguro = itemCoverages.CoinsurancePercentage.HasValue && itemCoverages.CoinsurancePercentage.Value > 0 ? itemCoverages.CoinsurancePercentage.Value.Truncate() + "%" : "-",
                                    Base = !string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? "-" : itemCoverages.BaseDeducible,
                                    Type = itemCoverages.CoverageTypeDesc
                                };

                                oCoverages.Add(setCoverages);
                            }

                            //Acuerdo de pago
                            var setCondicionesPago = GetPaymentAgreementQuots(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());

                            var setCotizacionFire = new CotizacionFire
                            {
                                Coverages = oCoverages,
                                SeaShips = new List<SeaShips>(),
                                Producto = dp.ProductDesc,
                                ProposalDate = PolicyData.CreateDate.ToString("dd/MM/yyyy"),
                                Name = ContactData.FirstName + " " + ContactData.MiddleName,
                                LastName = ContactData.FirstLastName + " " + ContactData.SecondLastName,
                                QuotationNumber = PolicyData.PolicyNo,
                                QuotationDate = PolicyData.CreateDate.ToString("dd/MM/yyyy"),
                                CondicionesPago = setCondicionesPago,
                                Equitment = new List<Equitment>()
                            };

                            int YearOfManufacture = 0;
                            //int.TryParse(dp.year, out YearOfManufacture);

                            int Eslora = 0;
                            int.TryParse(dp.Eslora, out Eslora);

                            var setSeaShips = new SeaShips
                            {
                                NameOfShip = dp.Name,
                                Model = dp.BrandModel == null ? "-" : dp.BrandModel,
                                Fuel = "",
                                Use = dp.Usage == null ? "-" : dp.Usage,
                                SerialNumber = dp.SerialKey,
                                Hasta = "-",
                                BasePort = dp.BasePort,
                                ConstructionMaterials = string.IsNullOrEmpty(dp.Casco) ? "-" : dp.Casco,
                                NavigationLimits = dp.NavigationLimit,
                                CrewNo = "-",
                                Type = "",
                                Sleeve = dp.Manga == null ? "-" : dp.Manga,
                                Length = dp.Eslora == null ? "" : Eslora.ToString(),
                                Puntual = dp.Purtal,
                                Eslora = string.IsNullOrEmpty(dp.Eslora) ? "-" : dp.Eslora,
                                YearOfManufacture = (YearOfManufacture > 0 ? YearOfManufacture : 0).ToString(),
                                PassengersNo = "0",
                                Make = dp.BrandModel,
                                InsuredAmount = dp.InsuredAmount.HasValue ? dp.InsuredAmount.ToFormatNumeric().Replace(",", "") : "0",
                                Limits = string.IsNullOrEmpty(dp.NavigationLimit) ? "0" : dp.NavigationLimit
                            };

                            var setEquipments = new Equitment
                            {
                                EquitmentType = "N/A",
                                Model = dp.BrandModel,
                                Make = dp.BrandModel,
                                Serial = string.IsNullOrEmpty(dp.SerialKey) ? "-" : dp.SerialKey,
                                Value = 0m,
                                InsuredAmount = dp.InsuredAmount.GetValueOrDefault(),
                                REF = "-",
                                Chasis = "-",
                                Registro = "-",
                                Year = dp.Year,
                                Category = "-",
                                Period = "-",
                                InsuredName = "-",
                                LastOverHaul = "-",
                                Type = "-",
                                Use = "-",
                                Enrollment = "-",
                                BaseAirport = "",
                                Sinister = "-",
                                Exclusions = "-",
                                Clauses = "-",
                                Manufacturer = "-",
                                Capacity = 0,
                                Crew = 0,
                                Limit = "0"
                            };


                            var dataNavyEngine = oNavyManager.GetNavyInsuredEngine(new Entity.UnderWriting.Entities.Navy.Insured.Engine.parameter
                            {
                                corpId = Corp_Id,
                                uniqueNavyId = dp.UniqueNavyId.ToInt()
                            });

                            if (dataNavyEngine.Count() > 0)
                            {
                                foreach (var dpe in dataNavyEngine)
                                {
                                    //setSeaShips.NumberOfEngines = dp.engineQty;
                                    setSeaShips.EnginesBrand = dpe.Brand;
                                    setSeaShips.EnginesModel = dpe.Model;
                                    setSeaShips.EnginesSerial = dpe.Serial;
                                    setSeaShips.EnginesPower = dpe.CapacityHP;
                                    //setSeaShips.EnginesNavigationLimits = dp.NavigationLimit;
                                    setSeaShips.Fuel = dpe.FuelType;
                                    //setSeaShips.FuelCapacity = dp.fuelCapacity;
                                    setSeaShips.EnginesBasePort = dp.BasePort;
                                }
                            }

                            setCotizacionFire.SeaShips.Add(setSeaShips);
                            setCotizacionFire.Equitment.Add(setEquipments);
                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }
                    break;
                #endregion
                #region Cascos Aereos
                case Utility.AlliedLinesType.Airplane:
                    var dataAirplane = oAirPlaneManager.GetAirplaneInsured(new Entity.UnderWriting.Entities.Airplane.Insured.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticRegId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataAirplane != null && dataAirplane.Count() > 0)
                    {
                        oPolicyInfo.Product = dataAirplane.Count() == 1 ? dataAirplane.FirstOrDefault().ProductDesc : "Varios";

                        foreach (var dp in dataAirplane)
                        {
                            oCoverages = new List<Coverages>();
                            var oEquitment = new List<Equitment>();

                            var dataCoverages = oAirPlaneManager.GetAirPlaneInsuredCoverage(new Airplane.Insured.Coverage.Key
                            {
                                CorpId = Corp_Id,
                                UniqueAirplaneId = (int)dp.UniqueAirplaneId
                            });

                            foreach (var itemCoverages in dataCoverages)
                            {
                                var setCoverages = new Coverages
                                {
                                    Description = itemCoverages.CoverageDesc.Capitalize(' '),

                                    Deducible = itemCoverages.DeductiblePercentage.HasValue && itemCoverages.DeductiblePercentage.Value > 0 ? itemCoverages.DeductiblePercentage.Value.Truncate() + "%" : "-",

                                    Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                    Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,

                                    Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                    Coaseguro = itemCoverages.CoinsurancePercentage.HasValue && itemCoverages.CoinsurancePercentage.Value > 0 ? itemCoverages.CoinsurancePercentage.Value.Truncate() + "%" : "-",
                                    Base = !string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? "-" : itemCoverages.BaseDeducible,
                                    Type = itemCoverages.CoverageTypeDesc
                                };

                                oCoverages.Add(setCoverages);
                            }

                            var Equipments = new Equitment
                            {
                                EquitmentType = "N/A",
                                Model = dp.BrandModel,
                                Make = dp.BrandModel,
                                Serial = string.IsNullOrEmpty(dp.SerialKey) ? "-" : dp.SerialKey,
                                Value = 0m,
                                InsuredAmount = dp.InsuredAmount.GetValueOrDefault(),
                                REF = "-",
                                Chasis = "-",
                                Registro = dp.Name,
                                Year = dp.YearProduction,
                                Category = "-",
                                Period = "-",
                                InsuredName = "-",
                                LastOverHaul = dp.EngineOverhaul,
                                Type = "-",
                                Use = dp.Usage,
                                Enrollment = "-",
                                BaseAirport = dp.AirplaneBase,
                                Sinister = "-",
                                Exclusions = "-",
                                Clauses = "-",
                                Manufacturer = "-",
                                Capacity = 0,
                                Crew = 0,
                                Limit = "0"
                            };

                            oEquitment.Add(Equipments);

                            /*Condiciones Pago*/
                            var setCondicionesPago = GetPaymentAgreementQuots(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());

                            var setCotizacionFire = new CotizacionFire
                            {
                                Coverages = oCoverages,
                                Producto = dp.ProductDesc,
                                ProposalDate = PolicyData.CreateDate.ToString("dd/MM/yyyy"),
                                Name = ContactData.FirstName + " " + ContactData.MiddleName,
                                LastName = ContactData.FirstLastName + " " + ContactData.SecondLastName,
                                QuotationNumber = PolicyData.PolicyNo,
                                QuotationDate = PolicyData.CreateDate.ToString("dd/MM/yyyy"),
                                CondicionesPago = setCondicionesPago,
                                Equitment = oEquitment
                            };

                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }

                    break;
                #endregion
                #region Transporte
                case Utility.AlliedLinesType.Transport:
                    var dataTransport = oTransportManager.GetTransportInsured(new Entity.UnderWriting.Entities.Transport.Insured.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticregId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataTransport != null && dataTransport.Count() > 0)
                    {
                        oPolicyInfo.Product = dataTransport.Count() == 1 ? dataTransport.FirstOrDefault().ProductDesc : "Varios";
                        oPolicyInfo.RelatedPolicyNo = PolicyData.PolicyNo;
                        oPolicyInfo.CompanyName = ""; //BUSCAR
                        oPolicyInfo.InsuredAmount = oPolicyInfo.InsuredAmount == null ? "0" : oPolicyInfo.InsuredAmount.ToString();

                        foreach (var dp in dataTransport)
                        {
                            oCoverages = new List<Coverages>();

                            var dataCoverages = oTransportManager.GetTransportInsuredCoverage(new Transport.Insured.Coverage.Key
                            {
                                CorpId = Corp_Id,
                                UniqueTransportId = (int)dp.UniqueTransportId
                            });

                            foreach (var itemCoverages in dataCoverages)
                            {
                                var setCoverages = new Coverages
                                {
                                    Description = itemCoverages.CoverageDesc.Capitalize(' '),
                                    Deducible = itemCoverages.DeductiblePercentage.HasValue && itemCoverages.DeductiblePercentage.Value > 0 ? itemCoverages.DeductiblePercentage.Value.Truncate() + "%" : "-",
                                    Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                    Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,

                                    Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                    Coaseguro = itemCoverages.CoinsurancePercentage.HasValue && itemCoverages.CoinsurancePercentage.Value > 0 ? itemCoverages.CoinsurancePercentage.Value.Truncate() + "%" : "-",
                                    Base = !string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? "-" : itemCoverages.BaseDeducible,
                                    Type = itemCoverages.CoverageTypeDesc
                                };

                                oCoverages.Add(setCoverages);
                            }

                            var setCotizacionFire = new CotizacionFire();
                            setCotizacionFire.Coverages = oCoverages;
                            setCotizacionFire.FreightTransportation = new List<FreightTransportation>();
                            setCotizacionFire.Equitment = new List<Equitment>();

                            var dataExtraInfo = oTransportManager.GetTransportInsuredExtraInfo(new Transport.Insured.ExtraInfo.Key
                            {
                                CorpId = Corp_Id,
                                UniqueTransportId = (int)dp.UniqueTransportId
                            });

                            foreach (var itemExtraInfo in dataExtraInfo)
                            {
                                var setEquipments = new Equitment
                                {
                                    EquitmentType = "N/A",
                                    Model = itemExtraInfo.Model,
                                    Make = itemExtraInfo.Brand,
                                    Serial = string.IsNullOrEmpty(itemExtraInfo.SerialKey) ? "-" : itemExtraInfo.SerialKey,
                                    Chasis = itemExtraInfo.Vin,
                                    Registro = itemExtraInfo.Plate,
                                    Year = itemExtraInfo.Year.HasValue ? itemExtraInfo.Year.Value.ToString() : "0",
                                    Value = 0,
                                    REF = "-",
                                    InsuredAmount = 0,
                                    Category = "-",
                                    Period = "-",
                                    InsuredName = "-",
                                    LastOverHaul = "-",
                                    Type = "-",
                                    Use = "-",
                                    Enrollment = "-",
                                    BaseAirport = "",
                                    Sinister = "-",
                                    Exclusions = "-",
                                    Clauses = "-",
                                    Manufacturer = "-",
                                    Capacity = 0,//df.Capacity,
                                    Crew = 0,
                                    Limit = "0"
                                };

                                setCotizacionFire.Equitment.Add(setEquipments);
                            }

                            setCotizacionFire.Producto = dp.ProductDesc;

                            /*Campos*/
                            setCotizacionFire.ProposalDate = PolicyData.CreateDate.ToString("dd/MM/yyyy");
                            setCotizacionFire.Name = ContactData.FirstName + " " + ContactData.MiddleName;
                            setCotizacionFire.LastName = ContactData.FirstLastName + " " + ContactData.SecondLastName;
                            setCotizacionFire.QuotationNumber = PolicyData.PolicyNo;
                            setCotizacionFire.QuotationDate = PolicyData.CreateDate.ToString("dd/MM/yyyy");

                            setCotizacionFire.TipoNegocioOActividad = dp.BuninessType != null ? dp.BuninessType : "";
                            setCotizacionFire.TipoMoneda = currencyDesc;

                            /*Tipo Mercancias*/
                            var setFreightTransportation = new FreightTransportation();
                            setFreightTransportation.TypeOfMerchandise = dp.MerchandasingType;
                            setFreightTransportation.TypeOfShipment = dp.Conveyance;
                            setFreightTransportation.Departure = "";
                            setFreightTransportation.Arrival = "";
                            /**/

                            /*Trayectoria*/
                            setFreightTransportation.From = "";
                            setFreightTransportation.To = "";
                            setFreightTransportation.Daily = "";
                            setFreightTransportation.Weekly = "";
                            setFreightTransportation.Monthly = "";
                            setFreightTransportation.OneTripOnly = "";
                            /**/

                            /*Condiciones Pago*/
                            var setCondicionesPago = GetPaymentAgreementQuots(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());
                            setCotizacionFire.FreightTransportation.Add(setFreightTransportation);
                            setCotizacionFire.CondicionesPago = setCondicionesPago;
                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }
                    break;
                #endregion
                #region Fianzas
                case Utility.AlliedLinesType.Bail:
                    var dataBail = oBailManager.GetBailInsured(new Entity.UnderWriting.Entities.Bail.Insured.Key
                    {
                        CorpId = this.Corp_Id,
                        RegionId = this.Region_Id,
                        CountryId = this.Country_Id,
                        DomesticRegId = this.Domesticreg_Id,
                        StateProvId = this.State_Prov_Id,
                        CityId = this.City_Id,
                        OfficeId = this.Office_Id,
                        CaseSeqNo = this.Case_Seq_No,
                        HistSeqNo = this.Hist_Seq_No,
                        BailId = null,
                        BlTypeId = PolicyData.BussinessLineType.GetValueOrDefault(),
                        BlId = PolicyData.BussinessLineId.GetValueOrDefault(),
                        ProductId = PolicyData.ProductId.GetValueOrDefault()
                    });

                    if (!dataBail.Any())
                        throw new Exception("Esta cotización no tiene ningun item");

                    oPolicyInfo.Product = dataBail.Count() == 1 ? dataBail.FirstOrDefault().ProductDesc : "Varios";


                    var Start = BeginDate.GetValueOrDefault().Date.ToString("dd/MM/yyyy hh:mm tt");
                    var End = EndDate.GetValueOrDefault().Date.ToString("dd/MM/yyyy hh:mm tt");

                    foreach (var item in dataBail)
                    {
                        oCoverages = new List<Coverages>();

                        var BailCoverages = oBailManager.GetBailInsuredCoverage(new Entity.UnderWriting.Entities.Bail.Insured.Coverage.Key
                        {
                            CorpId = this.Corp_Id,
                            UniqueBailId = item.UniqueBailId
                        });

                        if (!BailCoverages.Any())
                            throw new Exception("Esta cotización no tiene coberturas");

                        foreach (var itemCoverages in BailCoverages)
                        {
                            var setCoverages = new Coverages
                            {
                                Description = itemCoverages.CoverageDesc.Capitalize(' '),
                                Deducible = itemCoverages.DeductiblePercentage.HasValue && itemCoverages.DeductiblePercentage.Value > 0 ? itemCoverages.DeductiblePercentage.Value.Truncate() + "%" : "-",
                                Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,

                                Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                Coaseguro = itemCoverages.CoinsurancePercentage.HasValue && itemCoverages.CoinsurancePercentage.Value > 0 ? itemCoverages.CoinsurancePercentage.Value.Truncate() + "%" : "-",
                                Base = !string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? "-" : itemCoverages.BaseDeducible,
                                Type = itemCoverages.CoverageTypeDesc
                            };

                            oCoverages.Add(setCoverages);
                        }

                        var setCondicionesPago = GetPaymentAgreementQuots(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());

                        var BailSponsor = oBailManager.GetBailInsuredGuarantors(new Entity.UnderWriting.Entities.Bail.Insured.Guarantors.Key
                        {
                            CorpId = this.Corp_Id,
                            UniqueBailId = item.UniqueBailId
                        });

                        if (!BailSponsor.Any())
                            throw new Exception("Esta cotización no tiene Fiadores");

                        var Sponsor = new List<Sponsor>(0);

                        foreach (var itemSponsors in BailSponsor)
                        {
                            Sponsor.Add(new Sponsor
                            {
                                Names = itemSponsors.Name,
                                LastName = !string.IsNullOrEmpty(itemSponsors.LastName) ? itemSponsors.LastName : "-",
                                IdRnc = itemSponsors.Identification,
                                Ocupation = "-",
                                Phone = itemSponsors.Phone,
                                Email = itemSponsors.Email,
                                Address = itemSponsors.Address,
                                neighborhood = itemSponsors.Sector == null ? "" : itemSponsors.Sector,
                                City = itemSponsors.CityDesc == null ? "" : itemSponsors.CityDesc
                            });
                        }


                        #region BailType

                        string istravelAgency = "false";
                        string isPaymentSites = "false";
                        string isAgent = "false";
                        string isEnviroment = "false";
                        string isExecution = "false";
                        string isBidding = "false";
                        string isHiddenVice = "false";
                        string isMissingDoc = "false";
                        string isLifting = "false";
                        string isTempAdmission = "false";
                        string isFeesAdnRights = "false";
                        string isCashAdvance = "false";
                        string isComercial = "false";
                        string isExoneracionImpuestos = "false";
                        string isFianzaLaboralRestringida = "false";
                        string isGattTax = "false";

                        var bailType = item.BailType.Trim().ToLower();
                        istravelAgency = bailType.Contains("Agencias De Viajes".Trim().ToLower()).ToString().ToLower();
                        isPaymentSites = bailType.Contains("Estafeta De Págo (boleterías,turismo,luz,telefono, Etc.)".Trim().ToLower()).ToString().ToLower();
                        isAgent = bailType.Contains("Agente Aduanal".Trim().ToLower()).ToString().ToLower();
                        isEnviroment = bailType.Contains("Medio Ambiente".Trim().ToLower()).ToString().ToLower();
                        isExecution = bailType.Contains("Fiel Cumplimiento O Ejecución".Trim().ToLower()).ToString().ToLower();
                        isBidding = bailType.Contains("Licitación O Mantenimiento De Oferta".Trim().ToLower()).ToString().ToLower();
                        isHiddenVice = bailType.Contains("Vicios Ocultos".Trim().ToLower()).ToString().ToLower();
                        isMissingDoc = bailType.Contains("Falta De Documentos Retiro De Mercancías".Trim().ToLower()).ToString().ToLower();
                        isLifting = bailType.Contains("Levantamiento De Embargo / Restringida".Trim().ToLower()).ToString().ToLower();
                        isTempAdmission = bailType.Contains("Admisión Temporal".Trim().ToLower()).ToString().ToLower();
                        isFeesAdnRights = bailType.Contains("Pago De Impuestos".Trim().ToLower()).ToString().ToLower();
                        isCashAdvance = bailType.Contains("Avance".Trim().ToLower()).ToString().ToLower();
                        isComercial = bailType.Contains("Comercial".Trim().ToLower()).ToString().ToLower();
                        isExoneracionImpuestos = bailType.Contains("Exoneración De Impuestos".Trim().ToLower()).ToString().ToLower();
                        isFianzaLaboralRestringida = bailType.Contains("Fianza Laboral / Restringida".Trim().ToLower()).ToString().ToLower();
                        isGattTax = bailType.Contains("Diferencia Impuestos Del Gatt".Trim().ToLower()).ToString().ToLower();

                        #endregion

                        string Producto = item.ProductDesc;
                        if (Producto.ToLower().Contains("fianzas"))
                        { Producto = "Fianzas"; }

                        var vCotizationFire = new CotizacionFire
                        {
                            Name = string.Concat(ContactData.FirstName, " ", ContactData.MiddleName),
                            LastName = string.Concat(ContactData.FirstLastName, " ", ContactData.SecondLastName),
                            Producto = Producto, //item.ProductDesc,
                            QuotationNumber = PolicyData.PolicyNo,
                            ProposalDate = PolicyData.CreateDate.ToString("dd/MM/yyyy"),
                            QuotationDate = PolicyData.CreateDate.ToString("dd/MM/yyyy"),
                            TipoNegocioOActividad = item.Activity,
                            //Location = string.Format("{0} {1} {2} , {3} , {4}", item.AddressStreet, item.AddressNumber, item.CityDescLoc, dp.StateProvDescLoc, dp.CountryDescLoc), //dp.Address + " " + dp.addressNumber;,
                            Location = item.AddressStreet + " " + item.AddressNumber,
                            Jurisdiction = "",
                            TipoMoneda = currencyDesc,
                            //BusinessType = item.businessType,
                            Format = string.Empty,
                            Deducible = 0m,
                            Bail = new Thunderhead.Bail
                            {
                                PaymentSites = isPaymentSites,
                                TravelAgency = istravelAgency,
                                Agent = isAgent,
                                Enviroment = isEnviroment,
                                Bidding = isBidding,
                                Execution = isExecution,
                                HiddenVice = isHiddenVice,
                                MissingDoc = isMissingDoc,
                                TempAdmission = isTempAdmission,
                                FeesAdnRights = isFeesAdnRights,
                                Lifting = isLifting,
                                GattTax = isGattTax,
                                RestrictedLaborBond = isFianzaLaboralRestringida,
                                TaxExemption = isExoneracionImpuestos,
                                Commercial = isComercial,
                                Guarantor = "",
                                CashAdvance = 0m,
                                //No identifico a cual tipo pertenecen
                                Events = "false",
                                Others = "false",
                                FinancialReports = "false",
                                //
                                Recipient = item.Beneficiary,
                                Amount = item.InsuredAmount.GetValueOrDefault(),
                                Prime = PolicyData.AnnualPremium.GetValueOrDefault(),
                                Start = Start,
                                End = End,
                                Obligations = item.Obligations,
                                Sponsor = Sponsor,
                                Liquid = "",
                                Financier = 0
                            },
                            Coverages = oCoverages,
                            CondicionesPago = setCondicionesPago
                        };

                        oCotizacionFire.Add(vCotizationFire);
                    }

                    oDataSet.CotizacionFire = oCotizacionFire;

                    break;
                    #endregion
            }

            /*Resumen de Prima*/
            oPrimeResume.TotalAnualPrime = PolicyData.AnnualPremium.GetValueOrDefault().ToFormatNumeric().Replace(",", "");
            oPrimeResume.Taxes = PolicyData.TaxPremium.GetValueOrDefault().ToFormatNumeric().Replace(",", "");
            oPrimeResume.TotalPayment = (PolicyData.AnnualPremium.GetValueOrDefault() + PolicyData.TaxPremium.GetValueOrDefault()).ToFormatNumeric().Replace(",", "");

            //Seteo del objeto DataSet
            oDataSet.Transaction = oTransaction;
            oDataSet.Cliente = oCliente;
            oDataSet.CotizacionFire = oCotizacionFire;
            oDataSet.PolicyInfo = oPolicyInfo;
            oDataSet.PrimeResume = oPrimeResume;
            oDataSet.Additionals = oAdditionals;

            var DocXML = SerializeToXMLString(oDataSet);

            result = Encoding.UTF8.GetBytes(DocXML);

            return
                result;
        }


        /// <summary>
        ///  Generar endoso para incendio y lineas aliadas 
        /// </summary>
        /// <param name="policy"></param>
        /// <param name="templateType"></param>
        /// <param name="UniqueID"></param>
        /// <returns></returns>
        public byte[] GenerateEndosoPropertyXMLByThunderhead(Entity.UnderWriting.Entities.Property.Key policy, ThunderheadWrap.Service.TemplateType templateType, long? UniqueID = null)
        {
            byte[] result = null;

            var Email = string.Empty;

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(policy.CorpId,
                                                      policy.RegionId,
                                                      policy.CountryId,
                                                      policy.DomesticregId,
                                                      policy.StateProvId,
                                                      policy.CityId,
                                                      policy.OfficeId,
                                                      policy.CaseSeqNo,
                                                      policy.HistSeqNo);

            if (!PolicyData.CurrencyId.HasValue)
                throw new Exception(Resources.QuotationDontHasCurrency);

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(policy.CorpId, PolicyData.ContactId, Language.ToInt());

            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager.GetCommunicatonEmail(policy.CorpId, ContactData.ContactId, Language.ToInt());

            var EmailResult = DataEmail.FirstOrDefault(x => x.IsPrimary);

            if (EmailResult == null)
                EmailResult = DataEmail.FirstOrDefault();

            if (EmailResult != null)
                Email = EmailResult.EmailAdress;

            //Direccion del Contacto
            var oAddress = oContactManager.GetCommunicatonAdress(policy.CorpId, ContactData.ContactId, Language.ToInt())
                                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? oAddress.StreetAddress : "-";

            //Telefonos del contacto
            var oPhones = oContactManager.GetCommunicatonPhone(policy.CorpId, ContactData.ContactId, Language.ToInt());

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var RecordId = dataId.FirstOrDefault();
            var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

            var PhoneNumber = dataPhonePrimary != null ? string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                                                       : default(string);


            var oTransaction = new Transaction();
            oTransaction.DocumentId = "1472500507";

            var dateFormat = "{0:dd/MM/yyyy}";

            var oDataSet = new Dataset();

            var isEfective = (StatusNameKey == "EFECT");

            DateTime? BeginDate = null;
            DateTime? EndDate = null;

            BeginDate = PolicyData.PolicyEffectiveDate.HasValue || isEfective ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
            EndDate = PolicyData.ExpirationDate.HasValue || isEfective ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

            var oPolicyInfo = new PolicyInfo();
            oPolicyInfo.NoPoliza = PolicyData.PolicyNo;
            oPolicyInfo.FullName = ContactData.FullName;
            oPolicyInfo.IssueDate = string.Format(dateFormat, PolicyData.CreateDate);

            var oCotizacionFire = new List<CotizacionFire>(0);
            var oCliente = new Cliente();
            var oCoverages = new List<Coverages>(0);
            var oAdditionals = new List<Additionals>(0);
            var oPrimeResume = new PrimeResume();
            var oPaymentDetail = new PaymentDetail();
            var oReclamo = new Reclamo();

            if (templateType == ThunderheadWrap.Service.TemplateType.EndosoCesionDerecho)
            {
                oPolicyInfo.DUI = ContactData.Identification;

                //Fecha del documento	(Fecha del sistema)

                oPolicyInfo.PolicyPeriodStart = string.Format(CultureInfo.InvariantCulture, dateFormat, PolicyData.CreateDate);
                oPolicyInfo.PolicyPeriodEnd = string.Format(CultureInfo.InvariantCulture, dateFormat, PolicyData.ExpirationDate.HasValue ? PolicyData.ExpirationDate : PolicyData.CreateDate);
                oPolicyInfo.EffectiveDate = string.Format(CultureInfo.InvariantCulture, dateFormat, PolicyData.PolicyEffectiveDate.GetValueOrDefault());
                oPolicyInfo.TextoConvenio = "";

                #region CotizacionFire
                var dataProperty = oPropertyManager.GetProperty(new Entity.UnderWriting.Entities.Property.Key
                {
                    CorpId = policy.CorpId,
                    RegionId = policy.RegionId,
                    CountryId = policy.CountryId,
                    DomesticregId = policy.DomesticregId,
                    StateProvId = policy.StateProvId,
                    CityId = policy.CityId,
                    OfficeId = policy.OfficeId,
                    CaseSeqNo = policy.CaseSeqNo,
                    HistSeqNo = policy.HistSeqNo
                });

                if (dataProperty != null)
                {
                    foreach (var dp in dataProperty)
                    {
                        #region Cliente
                        oCliente.FullName = dp.EndorsementBeneficiary;
                        oCliente.NIT = dp.EndorsementBeneficiaryRnc;
                        #endregion

                        var setCotizacionFire = new CotizacionFire();
                        setCotizacionFire.ElementoAsegurado = new List<ElementoAsegurado>();
                        setCotizacionFire.Construccion = new List<Construccion>();

                        #region /*Tipo Moneda*/
                        string currencyDesc = "";

                        switch (PolicyData.CurrencyId.Value)
                        {
                            case 1:
                                currencyDesc = Resources.CurrencyLabelDolar;// "Dolar";
                                break;
                            case 2:
                                currencyDesc = Resources.CurrencyLabelEur; //"Euros";
                                break;
                            case 3:
                                currencyDesc = Resources.CurrencyLabelDop; //"Pesos";
                                break;
                        }

                        setCotizacionFire.TipoMoneda = currencyDesc;
                        setCotizacionFire.QuotationNumber = PolicyData.PolicyNo;
                        #endregion

                        setCotizacionFire.Total = "";//Buscar                       

                        #region /*Interés Asegurado*/
                        var setElementoAsegurado = new ElementoAsegurado();
                        setElementoAsegurado.Descripcion = dp.ProductDesc; //ver si ese es el correcto
                        setElementoAsegurado.Valor = dp.InsuredAmount.ToFormatNumeric().Replace(",", "");
                        setElementoAsegurado.ValorCedido = dp.EndorsementAmount.ToFormatNumeric().Replace(",", "");
                        #endregion

                        setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);
                        oCotizacionFire.Add(setCotizacionFire);
                    }
                }
                #endregion
            }
            else if (templateType == ThunderheadWrap.Service.TemplateType.EndosoAclaratorio)
            {

            }

            #region /*Resumen de Prima*/
            //oPrimeResume.TotalAnualPrime = PolicyData.AnnualPremium.GetValueOrDefault().ToString().ToFormatCurrency();
            //oPrimeResume.Taxes = PolicyData.TaxPremium.GetValueOrDefault().ToString().ToFormatCurrency();
            //oPrimeResume.TotalPayment = (PolicyData.AnnualPremium.GetValueOrDefault() + PolicyData.TaxPremium.GetValueOrDefault()).ToString().ToFormatCurrency();
            #endregion

            oDataSet.Transaction = oTransaction;
            oDataSet.Cliente = oCliente;
            oDataSet.CotizacionFire = oCotizacionFire;
            oDataSet.PolicyInfo = oPolicyInfo;
            oDataSet.PrimeResume = oPrimeResume;
            oDataSet.Coverages = oCoverages;

            var DocXML = SerializeToXMLString(oDataSet);

            result = UTF8Encoding.UTF8.GetBytes(DocXML);

            return
                result;
        }


        /// <summary>
        /// Serializar un objeto y convertirlo en un XML
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public string SerializeToXMLString(object obj)
        {
            string xmlString = string.Empty;
            XmlSerializer s = new XmlSerializer(obj.GetType());
            MemoryStream ms = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(ms, new UTF8Encoding());
            writer.Formatting = Formatting.Indented;
            writer.IndentChar = ' ';
            writer.Indentation = 5;

            try
            {
                s.Serialize(writer, obj);
                //xmlString = ASCIIEncoding.UTF8.GetString(ms.ToArray());
                xmlString = UTF8Encoding.UTF8.GetString(ms.ToArray());

            }
            finally
            {
                writer.Close();
                ms.Close();
            }

            return
                xmlString;
        }

        /// <summary>
        /// Serializar XML
        /// </summary>
        /// <param name="o"></param>
        /// <returns></returns>
        public XmlDocument SerializeToXML(object o)
        {
            XmlSerializer s = new XmlSerializer(o.GetType());
            XmlDocument xml = null;
            MemoryStream ms = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(ms, new UTF8Encoding());
            writer.Formatting = Formatting.Indented;
            writer.IndentChar = ' ';
            writer.Indentation = 5;

            try
            {
                s.Serialize(writer, o);
                xml = new XmlDocument();
                string xmlString = ASCIIEncoding.UTF8.GetString(ms.ToArray());
                xml.LoadXml(xmlString);
            }
            finally
            {
                writer.Close();
                ms.Close();
            }

            return xml;
        }

        /// <summary>
        /// Con este metodo se genera tanto la cotizacion como la Hoja de emision de seguro de vehiculos de motor
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="PathXmlFile"></param>
        public byte[] GenerateXMLQuotationToThunderhead(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                      , int officeId, int caseSeqNo, int histSeqNo, String ServerMapPath, long? vehicleUniqueID = null
                                                      , ThunderheadWrap.Service.TemplateType templateType = ThunderheadWrap.Service.TemplateType.Cotizacion)
        {
            var vDocumentIDQuot = string.Empty;
            var vDocumentIDQuotExt = string.Empty;
            var vDocumentIDEndoso = string.Empty;
            var vDocumentIDEndosoAclaratorio = string.Empty;
            var vDocumentIDEndosoDerecho = string.Empty;
            var vDocumentIDNotificacionEstatusExtranjero = string.Empty;

            const string XMLTemplate = "DATATemplate.xml";

            string Email = string.Empty;
            string XmlFilePath = string.Empty;
            byte[] Binary;

            var dataVehicle = getVehicles(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, vehicleUniqueID);

            try
            {
                vDocumentIDQuot = ConfigurationManager.AppSettings["DocumentIDQuot"];
                vDocumentIDQuotExt = ConfigurationManager.AppSettings["DocumentIDQuotExt"];
                vDocumentIDEndoso = ConfigurationManager.AppSettings["DocumentIDEndoso"];
                vDocumentIDEndosoAclaratorio = ConfigurationManager.AppSettings["DocumentIDEndosoAclaratorio"];
                vDocumentIDEndosoDerecho = ConfigurationManager.AppSettings["DocumentIDEndosoDerecho"];
                vDocumentIDNotificacionEstatusExtranjero = ConfigurationManager.AppSettings["DocumentIDNotificacionEstatusExtranjero"];

                //Objeto de la Data de la Poliza
                var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
                 , officeId, caseSeqNo, histSeqNo);

                //Objeto de la data del Contacto
                var ContactData = oContactManager.GetContact(Corp_Id, PolicyData.ContactId, Language.ToInt());

                if (ContactData == null)
                    throw new Exception(Resources.QuotationDontHasContact);

                //Correo del contacto
                var DataEmail = oContactManager
                               .GetCommunicatonEmail(Corp_Id, ContactData.ContactId, Language.ToInt());

                var EmailResult = DataEmail
                                 .FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                if (EmailResult != null)
                    Email = EmailResult.EmailAdress;

                //Direccion del Contacto
                var oAddress = oContactManager
                              .GetCommunicatonAdress(Corp_Id, ContactData.ContactId, Language.ToInt())
                              .FirstOrDefault(x => x.DirectoryTypeId == 5);

                var Direccion = (oAddress != null) ? oAddress.StreetAddress
                                                   : "-";

                var Pais = (oAddress != null) ? oAddress.CountryDesc
                                              : "-";

                var Ciudad = (oAddress != null) ? oAddress.CityDesc
                                                : "-";

                //Telefonos del contacto
                var oPhones = oContactManager
                              .GetCommunicatonPhone(Corp_Id, ContactData.ContactId, Language.ToInt());

                //Id Doc
                var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
                var RecordId = dataId.FirstOrDefault();
                var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

                var PhoneNumber = dataPhonePrimary != null ?
                                  string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                                  : default(string);

                var isEfective = (StatusNameKey == "EFECT");

                var BinaryTemplate = File.ReadAllBytes(ServerMapPath + XMLTemplate);
                Stream stream = new MemoryStream(BinaryTemplate);
                //Cargamos el documento XML
                var doc = new XmlDocument();
                doc.Load(stream);

                //Obtenemos el nodo raiz del documento.
                XmlElement POS_AUTO = doc.DocumentElement;
                XmlNodeList Quotation = POS_AUTO.GetElementsByTagName("Quotation");
                XmlNodeList Transaction = POS_AUTO.GetElementsByTagName("Transaction");

                var NodeTransacction = Transaction[0];
                var DocumentId = string.Empty;

                switch (templateType)
                {
                    case ThunderheadWrap.Service.TemplateType.Cotizacion:
                        DocumentId = dataVehicle.Count() >= 5 ? vDocumentIDQuotExt : vDocumentIDQuot;
                        break;
                    case ThunderheadWrap.Service.TemplateType.Endoso:
                        DocumentId = vDocumentIDEndoso;
                        break;
                    case ThunderheadWrap.Service.TemplateType.EndosoAclaratorio:
                        DocumentId = vDocumentIDEndosoAclaratorio;
                        break;
                    case ThunderheadWrap.Service.TemplateType.EndosoCesionDerecho:
                        DocumentId = vDocumentIDEndosoDerecho;
                        break;
                    case ThunderheadWrap.Service.TemplateType.NotificacionEstatusExtranjero:
                        DocumentId = vDocumentIDNotificacionEstatusExtranjero;
                        break;
                    default:
                        break;
                }

                NodeTransacction["DocumentId"].InnerText = (isExclusion || isVehicleChange) ? "1335506511" : DocumentId;
                NodeTransacction["Intermediario"].InnerText = PolicyData.Agent_Name;
                NodeTransacction["PolicyNumber"].InnerText = PolicyData.PolicyNo;

                #region Notificacion de endoso de cesion
                if (templateType == ThunderheadWrap.Service.TemplateType.Endoso)
                {
                    var Vehicle = dataVehicle.FirstOrDefault();
                    NodeTransacction["Direccion"].InnerText = Direccion;
                    NodeTransacction["Ciudad"].InnerText = Ciudad;
                    NodeTransacction["Pais"].InnerText = Pais;
                    NodeTransacction["MontoEndosado"].InnerText = Vehicle.EndorsementAmount.HasValue ? Vehicle.EndorsementAmount.Value.ToString(CultureInfo.InvariantCulture) : "0.00";
                    NodeTransacction["Rnc"].InnerText = Vehicle.EndorsementBbeneficiaryRnc;
                    NodeTransacction["Beneficiary"].InnerText = Vehicle.EndorsementBeneficiary;
                }
                else if (templateType == ThunderheadWrap.Service.TemplateType.EndosoCesionDerecho)
                {
                    var Vehicle = dataVehicle.FirstOrDefault();
                    NodeTransacction["Rnc"].InnerText = Vehicle.EndorsementBbeneficiaryRnc;
                }
                #endregion

                DateTime? BeginDate = null;
                DateTime? EndDate = null;

                BeginDate = PolicyData.PolicyEffectiveDate.HasValue || isEfective ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
                EndDate = PolicyData.ExpirationDate.HasValue || isEfective ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);

                var NodeQuotation = Quotation[0];

                NodeQuotation["PrincipalName"].InnerText = ContactData.FullName;
                NodeQuotation["PrincipalCountry"].InnerText = ContactData.CountryOfBirthDesc;
                NodeQuotation["QuotationNumber"].InnerText = PolicyData.PolicyNo;
                NodeQuotation["QuotationDate"].InnerText = String.Format(CultureInfo.InvariantCulture, "{0:yyyy-MM-dd}", PolicyData.CreateDate);
                NodeQuotation["Plan"].InnerText = "AUTO";
                NodeQuotation["StartDate"].InnerText = String.Format(CultureInfo.InvariantCulture, "{0:yyyy-MM-dd}", BeginDate);
                NodeQuotation["EndDate"].InnerText = String.Format(CultureInfo.InvariantCulture, "{0:yyyy-MM-dd}", EndDate);
                NodeQuotation["ProposalDate"].InnerText = String.Format("{0:yyyy-MM-dd}", PolicyData.CreateDate);
                NodeQuotation["IdType"].InnerText = RecordId != null ? RecordId.ContactIdTypeDescription : string.Empty;
                NodeQuotation["IdNumber"].InnerText = RecordId != null ? RecordId.Id : string.Empty;
                NodeQuotation["TelephoneNumber"].InnerText = PhoneNumber;
                NodeQuotation["Email"].InnerText = !string.IsNullOrEmpty(Email) ? Email : string.Empty;
                NodeQuotation["NumberOfVehicles"].InnerText = dataVehicle.Count().ToString(CultureInfo.InvariantCulture);

                if (isExclusion || isVehicleChange)
                {
                    NodeQuotation["Product"].InnerText = "AUTO";
                    NodeQuotation["NCFType"].InnerText = ContactData.InvoiceTypeDesc;
                }

                //IsSaleChannelNormal
                var IsSaleChannelNormal = doc.CreateElement("IsSaleChannelNormal");
                IsSaleChannelNormal.InnerText = PolicyData.AgentIsFinancial.GetValueOrDefault() ? "false" : "true";
                NodeQuotation.AppendChild(IsSaleChannelNormal);


                if (templateType == ThunderheadWrap.Service.TemplateType.EndosoCesionDerecho)
                {
                    var Vehicle = dataVehicle.FirstOrDefault();

                    NodeQuotation["ValorCedido"].InnerText = Vehicle.EndorsementAmount.HasValue ? Vehicle.EndorsementAmount.Value.ToString(CultureInfo.InvariantCulture) : "0.00";
                    NodeTransacction["Banco"].InnerText = Vehicle.EndorsementBeneficiary;

                    var dataVehicleOrden = getVehicles(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo).ToList();

                    int Orden = 0;

                    for (int i = 0; i < dataVehicleOrden.Count(); i++)
                    {
                        if (dataVehicleOrden[i].VehicleUniqueId == vehicleUniqueID)
                        {
                            Orden = i + 1;
                            break;
                        }
                    }

                    NodeQuotation["Certificado"].InnerText = Orden.ToString(CultureInfo.InvariantCulture);
                }

                //Drivers 
                var NodeDrivers = NodeQuotation["Drivers"];
                NodeDrivers["Name"].InnerText = ContactData.FullName;
                NodeDrivers["IdType"].InnerText = RecordId != null ? RecordId.ContactIdTypeDescription : string.Empty;
                NodeDrivers["IdNumber"].InnerText = RecordId != null ? RecordId.Id : string.Empty;
                NodeDrivers["BirthDate"].InnerText = ContactData.Dob.HasValue ? String.Format(CultureInfo.InvariantCulture, "{0:yyyy-MM-dd}", ContactData.Dob) :
                                                                                String.Format(CultureInfo.InvariantCulture, "{0:yyyy-MM-dd}", new DateTime(1753, 1, 1));
                NodeDrivers["Email"].InnerText = !string.IsNullOrEmpty(Email) ? Email : string.Empty;
                NodeDrivers["TelephoneNumber"].InnerText = PhoneNumber;

                #region Vehicles
                string[] Secciones = new string[]
                            {
                                "Combustibles",
                                "Complementos",
                                "Seguridad"
                            };

                foreach (var item in dataVehicle)
                {
                    if (isExclusion)
                    {
                        var PolicyChange = doc.CreateElement("PolicyChange");
                        var ChangeType = doc.CreateElement("ChangeType");
                        var ChangeDescription = doc.CreateElement("ChangeDescription");
                        var ChangeDetail = doc.CreateElement("ChangeDetail");

                        ChangeType.InnerText = "Exclusión";
                        PolicyChange.AppendChild(ChangeType);

                        string desc = string.Format("Marca: {0} - Modelo: {1} - Año: {2} - Placa: {3} - Chasis: {4} - Color: {5}",
                                               item.MakeDesc,
                                               item.ModelDesc,
                                               item.Year,
                                               item.Registry,
                                               item.Chassis,
                                               item.ColorDesc
                                               );

                        ChangeDescription.InnerText = desc;
                        PolicyChange.AppendChild(ChangeDescription);

                        ChangeDetail.InnerText = "Proceso de Exclusión";
                        PolicyChange.AppendChild(ChangeDetail);
                        POS_AUTO.AppendChild(PolicyChange);
                    }
                    else if (isVehicleChange)
                    {
                        var PolicyChange = doc.CreateElement("PolicyChange");
                        var ChangeType = doc.CreateElement("ChangeType");
                        var ChangeDescription = doc.CreateElement("ChangeDescription");
                        var ChangeDetail = doc.CreateElement("ChangeDetail");

                        ChangeType.InnerText = "Solicitud de Cambios Vehículos";
                        PolicyChange.AppendChild(ChangeType);
                        int i = 0;

                        string oldPlate = "";
                        string oldChassis = "";
                        string oldColor = "";

                        var DataChange = oVehicleManager.GetVehicleRequestChange(PolicyNoMain, null).ToList();
                        if (DataChange.Count() > 0)
                        {
                            for (i = 0; i <= DataChange.Count() - 1; i++)
                            {
                                int condition = DataChange[i].Condition_Id.ToInt();

                                if (condition == Utility.ChangeConditionCatalog.NoRegistro.ToInt())
                                {
                                    oldPlate = DataChange[i].Old_Value;
                                }
                                else if (condition == Utility.ChangeConditionCatalog.Chasis.ToInt())
                                {
                                    oldChassis = DataChange[i].Old_Value;
                                }
                                else if (condition == Utility.ChangeConditionCatalog.Color.ToInt())
                                {
                                    oldColor = DataChange[i].Old_Value;
                                }
                            }
                        }


                        var DescList = new StringBuilder();
                        string DescBase = string.Format("Marca: {0} - Modelo: {1} - Año: {2} - ", item.MakeDesc, item.ModelDesc, item.Year);
                        DescList.AppendLine(DescBase);

                        var PlateChangeDesc = string.Empty;
                        var ChassisChangeDesc = string.Empty;
                        var ColorChangeDesc = string.Empty;

                        if (oldPlate != item.Registry)
                        {
                            PlateChangeDesc = string.Format("Placa Nueva: {0} - Placa Anterior: {1} ", oldPlate, item.Registry);
                            DescList.AppendLine(PlateChangeDesc);
                        }

                        if (oldChassis != item.Chassis)
                        {
                            ChassisChangeDesc = string.Format("Chasis Anterior: {0} - Chasis Nuevo: {1} ", oldChassis, item.Chassis);
                            DescList.AppendLine(ChassisChangeDesc);
                        }

                        if (oldColor != item.ColorDesc)
                        {
                            ColorChangeDesc = string.Format("Color Anterior: {0} - Color Nuevo: {1} ", oldColor, item.ColorDesc);
                            DescList.AppendLine(ColorChangeDesc);
                        }

                        string desc = DescList.ToString();

                        ChangeDescription.InnerText = desc;
                        PolicyChange.AppendChild(ChangeDescription);

                        ChangeDetail.InnerText = "Proceso de Cambio";
                        PolicyChange.AppendChild(ChangeDetail);
                        POS_AUTO.AppendChild(PolicyChange);
                    }

                    var Vehicles = doc.CreateElement("Vehicles");
                    var Brand = doc.CreateElement("Brand");
                    var Model = doc.CreateElement("Model");
                    var Year = doc.CreateElement("Year");
                    var VehicleType = doc.CreateElement("VehicleType");
                    var Plan = doc.CreateElement("Plan");
                    var EnsuredAmount = doc.CreateElement("EnsuredAmount");
                    var Chasis = doc.CreateElement("Chasis");
                    var Placa = doc.CreateElement("Placa");
                    var Color = doc.CreateElement("Color");
                    var ValorVehiculo = doc.CreateElement("ValorVehiculo");

                    #region Endoso Aclaratorio

                    if (templateType == ThunderheadWrap.Service.TemplateType.EndosoAclaratorio && item.EndorsementClarifying)
                    {
                        var parameter = new Vehicle.Review()
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            DomesticRegId = domesticRegId,
                            StateProvId = stateProvId,
                            CityId = cityId,
                            OfficeId = officeId,
                            CaseSeqNo = caseSeqNo,
                            HistSeqNo = histSeqNo,
                            InsuredVehicleId = item.InsuredVehicleId,
                            ReviewId = null,
                            ReviewGroupId = null,
                            ReviewGroupEndorsementClarifying = true,
                            ReviewOptionEndorsementClarifying = true,
                            LanguageId = Language.ToInt()
                        };

                        var reviews = oVehicleManager.GetVehicleReviewDetail(parameter);
                        if (reviews != null)
                        {
                            foreach (var review in reviews)
                            {
                                if (!Secciones.Contains(review.ReviewClassDesc))
                                {
                                    var Descripcion = doc.CreateElement("Descripcion");
                                    Descripcion.InnerText = review.ReviewItemDesc;

                                    var Estado = doc.CreateElement("Estado");
                                    string EstadoInnerText = default(string);

                                    switch (review.ReviewOptionDesc)
                                    {
                                        case "B":
                                            EstadoInnerText = Language == Utility.Language.en ? "GOOD" : "BUENO";
                                            break;
                                        case "M":
                                            EstadoInnerText = Language == Utility.Language.en ? "BAD" : "MALO";
                                            break;
                                        case "R":
                                            EstadoInnerText = "REGULAR";
                                            break;
                                        default:
                                            EstadoInnerText = review.ReviewOptionDesc.ToUpper();
                                            break;
                                    }

                                    Estado.InnerText = EstadoInnerText;

                                    var Piezas = doc.CreateElement("Piezas");
                                    Piezas.AppendChild(Descripcion);
                                    Piezas.AppendChild(Estado);
                                    Vehicles.AppendChild(Piezas);
                                }
                            }
                        }

                    }
                    #endregion

                    Brand.InnerText = item.MakeDesc;
                    Vehicles.AppendChild(Brand);

                    Model.InnerText = item.ModelDesc;
                    Vehicles.AppendChild(Model);

                    Year.InnerText = item.Year.ToString();
                    Vehicles.AppendChild(Year);

                    VehicleType.InnerText = item.VehicleTypeDesc;
                    Vehicles.AppendChild(VehicleType);

                    Plan.InnerText = item.ProductTypeDesc;
                    Vehicles.AppendChild(Plan);

                    EnsuredAmount.InnerText = item.VehicleValue.HasValue ? item.VehicleValue.Value.ToString(CultureInfo.InvariantCulture) : "0.00";
                    Vehicles.AppendChild(EnsuredAmount);

                    Chasis.InnerText = item.Chassis;
                    Vehicles.AppendChild(Chasis);

                    Placa.InnerText = item.Registry;
                    Vehicles.AppendChild(Placa);

                    Color.InnerText = item.ColorDesc;
                    Vehicles.AppendChild(Color);

                    ValorVehiculo.InnerText = item.VehicleValue.HasValue ? item.VehicleValue.Value.ToString(CultureInfo.InvariantCulture) : "0.00";
                    Vehicles.AppendChild(ValorVehiculo);

                    //Drivers
                    NodeQuotation.AppendChild(Vehicles);

                    //Coverages
                    var DataCoverage = oPolicyManager.GetVehicleCoverage(new Policy.VehicleCoverageGet
                    {
                        CorpId = corpId,
                        VehicleUniqueId = item.VehicleUniqueId
                    });

                    var ThirdDamage = DataCoverage.Where(x => x.CoverageTypeId == 1); //Daños a terceros
                    var SelfDamage = DataCoverage.Where(x => x.CoverageTypeId == 2);  //Daños Propios
                    var Additional = DataCoverage.Where(x => x.CoverageTypeId == 3);  //Servicios adicionales

                    #region Daños a terceros

                    XmlElement ThirdDamagesCoverages;
                    XmlElement DescriptionThirdDamages;
                    XmlElement LimitThirdDamages;
                    XmlElement MinimumDeductibleThirdDamages;

                    if (ThirdDamage.Any())
                    {
                        foreach (var itemThirdDamage in ThirdDamage)
                        {
                            ThirdDamagesCoverages = doc.CreateElement("ThirdDamagesCoverages");
                            DescriptionThirdDamages = doc.CreateElement("Description");
                            LimitThirdDamages = doc.CreateElement("Limit");
                            MinimumDeductibleThirdDamages = doc.CreateElement("MinimumDeductible");

                            DescriptionThirdDamages.InnerText = itemThirdDamage.CoverageDesc.Capitalize(' ');
                            ThirdDamagesCoverages.AppendChild(DescriptionThirdDamages);
                            Vehicles.AppendChild(ThirdDamagesCoverages);

                            LimitThirdDamages.InnerText = itemThirdDamage.CoverageLimit.Value.ToString(CultureInfo.InvariantCulture);
                            ThirdDamagesCoverages.AppendChild(LimitThirdDamages);
                            Vehicles.AppendChild(ThirdDamagesCoverages);

                            MinimumDeductibleThirdDamages.InnerText = itemThirdDamage.DeductibleAmount.HasValue ? itemThirdDamage.DeductibleAmount.Value.ToString(CultureInfo.InvariantCulture) : "0.00";
                            ThirdDamagesCoverages.AppendChild(MinimumDeductibleThirdDamages);
                            Vehicles.AppendChild(ThirdDamagesCoverages);
                        }
                    }
                    else
                    {
                        ThirdDamagesCoverages = doc.CreateElement("ThirdDamagesCoverages");
                        DescriptionThirdDamages = doc.CreateElement("Description");
                        LimitThirdDamages = doc.CreateElement("Limit");
                        MinimumDeductibleThirdDamages = doc.CreateElement("MinimumDeductible");

                        DescriptionThirdDamages.InnerText = string.Empty;
                        ThirdDamagesCoverages.AppendChild(DescriptionThirdDamages);
                        Vehicles.AppendChild(ThirdDamagesCoverages);

                        LimitThirdDamages.InnerText = "0";
                        ThirdDamagesCoverages.AppendChild(LimitThirdDamages);
                        Vehicles.AppendChild(ThirdDamagesCoverages);

                        MinimumDeductibleThirdDamages.InnerText = "0";
                        ThirdDamagesCoverages.AppendChild(MinimumDeductibleThirdDamages);
                        Vehicles.AppendChild(ThirdDamagesCoverages);
                    }

                    #endregion Daños a terceros

                    #region Daños propios

                    XmlElement SelfDamagesCoverages;
                    XmlElement DescriptionSelfDamages;
                    XmlElement LimitSelfDamages;
                    XmlElement DeducibleSelfDamages;
                    XmlElement MinimumDeductibleSelfDamages;

                    if (SelfDamage.Any())
                    {
                        foreach (var itemSelfDamage in SelfDamage)
                        {
                            SelfDamagesCoverages = doc.CreateElement("SelfDamagesCoverages");
                            DescriptionSelfDamages = doc.CreateElement("Description");
                            LimitSelfDamages = doc.CreateElement("Limit");
                            DeducibleSelfDamages = doc.CreateElement("Deducible");
                            MinimumDeductibleSelfDamages = doc.CreateElement("MinimumDeductible");

                            DescriptionSelfDamages.InnerText = itemSelfDamage.CoverageDesc.Capitalize(' ');
                            SelfDamagesCoverages.AppendChild(DescriptionSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);

                            LimitSelfDamages.InnerText = itemSelfDamage.CoverageLimit.Value.ToString(CultureInfo.InvariantCulture);
                            SelfDamagesCoverages.AppendChild(LimitSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);

                            DeducibleSelfDamages.InnerText = itemSelfDamage.DeductiblePercentage.HasValue ? itemSelfDamage.DeductiblePercentage.Value.Truncate().ToString(CultureInfo.InvariantCulture) + "%" : "";
                            SelfDamagesCoverages.AppendChild(DeducibleSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);

                            var subRamo = itemSelfDamage.SubRamo.GetValueOrDefault();

                            var oCoverageSysflexValues = getSysFlexDataCoverage(106, subRamo, item.VehicleValue.GetValueOrDefault(), 0);

                            var Desc = itemSelfDamage.CoverageDesc.ToLower().RemoveAccentsWithRegEx();

                            var dataCoverageSysflex = oCoverageSysflexValues.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                            var MinimoDeducible = itemSelfDamage.DeductibleAmount.Value.ToString(CultureInfo.InvariantCulture);

                            MinimumDeductibleSelfDamages.InnerText = MinimoDeducible;
                            SelfDamagesCoverages.AppendChild(MinimumDeductibleSelfDamages);
                            Vehicles.AppendChild(SelfDamagesCoverages);
                        }
                    }
                    else
                    {
                        SelfDamagesCoverages = doc.CreateElement("SelfDamagesCoverages");
                        DescriptionSelfDamages = doc.CreateElement("Description");
                        LimitSelfDamages = doc.CreateElement("Limit");
                        DeducibleSelfDamages = doc.CreateElement("Deducible");
                        MinimumDeductibleSelfDamages = doc.CreateElement("MinimumDeductible");

                        DescriptionSelfDamages.InnerText = string.Empty;
                        SelfDamagesCoverages.AppendChild(DescriptionSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);

                        LimitSelfDamages.InnerText = "0";
                        SelfDamagesCoverages.AppendChild(LimitSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);

                        DeducibleSelfDamages.InnerText = "0";
                        SelfDamagesCoverages.AppendChild(DeducibleSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);

                        MinimumDeductibleSelfDamages.InnerText = "0";
                        SelfDamagesCoverages.AppendChild(MinimumDeductibleSelfDamages);
                        Vehicles.AppendChild(SelfDamagesCoverages);
                    }

                    #endregion Daños Propios

                    #region Suplementos
                    var TotalSuplementos = 0m;

                    XmlElement Additionals;
                    XmlElement DescriptionAdditionals;
                    XmlElement LimitAdditionals;
                    XmlElement MinimumDeductibleAdditionals;

                    if (Additional.Any())
                    {
                        foreach (var itemAdditional in Additional)
                        {
                            Additionals = doc.CreateElement("Additionals");
                            DescriptionAdditionals = doc.CreateElement("Description");
                            LimitAdditionals = doc.CreateElement("Limit");
                            MinimumDeductibleAdditionals = doc.CreateElement("MinimumDeductible");

                            DescriptionAdditionals.InnerText = itemAdditional.CoverageDesc.Capitalize(' ');
                            Additionals.AppendChild(DescriptionAdditionals);
                            Vehicles.AppendChild(Additionals);

                            var subRamo = itemAdditional.SubRamo.GetValueOrDefault();
                            var oCoverageSysflexValues = getSysFlexDataCoverage(106, subRamo, item.VehicleValue.GetValueOrDefault(), 1);
                            var Desc = itemAdditional.CoverageDesc.ToLower().RemoveAccentsWithRegEx();
                            var dataCoverageSysflex = oCoverageSysflexValues.Where(t => t.Descripcion.ToLower().RemoveAccentsWithRegEx() == Desc);

                            if (dataCoverageSysflex.Any())
                            {
                                var dPrima = dataCoverageSysflex.FirstOrDefault().Prima.Value;
                                var Prima = dPrima.ToString(CultureInfo.InvariantCulture);
                                TotalSuplementos += dPrima;
                                LimitAdditionals.InnerText = Prima;
                            }
                            else
                                LimitAdditionals.InnerText = "0";

                            Additionals.AppendChild(LimitAdditionals);
                            Vehicles.AppendChild(Additionals);

                            MinimumDeductibleAdditionals.InnerText = "0";
                            Additionals.AppendChild(MinimumDeductibleAdditionals);
                            Vehicles.AppendChild(Additionals);
                        }
                    }
                    else
                    {
                        Additionals = doc.CreateElement("Additionals");
                        DescriptionAdditionals = doc.CreateElement("Description");
                        LimitAdditionals = doc.CreateElement("Limit");
                        MinimumDeductibleAdditionals = doc.CreateElement("MinimumDeductible");

                        DescriptionAdditionals.InnerText = string.Empty;
                        Additionals.AppendChild(DescriptionAdditionals);
                        Vehicles.AppendChild(Additionals);

                        LimitAdditionals.InnerText = "0";
                        Additionals.AppendChild(LimitAdditionals);
                        Vehicles.AppendChild(Additionals);

                        MinimumDeductibleAdditionals.InnerText = "0";
                        Additionals.AppendChild(MinimumDeductibleAdditionals);
                        Vehicles.AppendChild(Additionals);
                    }

                    #endregion Suplementos

                    //Agregar Totales por cada tipo de cobertura
                    var ThirdDamagesPrime = doc.CreateElement("ThirdDamagesPrime");
                    var SelfDamagesPrime = doc.CreateElement("SelfDamagesPrime");
                    var AdditionalsPrime = doc.CreateElement("AdditionalsPrime");
                    var TotalVehiclePrime = doc.CreateElement("TotalVehiclePrime");

                    var dPrimaCoverage = oPolicyManager.GetVehicleInsuredCoverageTypePremiun(new Policy.VehicleInsured.CoverageTypePremiun.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        InsuredVehicleId = item.InsuredVehicleId.GetValueOrDefault()
                    });

                    var T = dPrimaCoverage.Any() ? dPrimaCoverage.FirstOrDefault(t => t.CoverageTypeId == 1).PremiumAmount : 0;
                    var S = dPrimaCoverage.Any() ? dPrimaCoverage.FirstOrDefault(t => t.CoverageTypeId == 2).PremiumAmount : 0;
                    var A = TotalSuplementos;

                    ThirdDamagesPrime.InnerText = T.ToString(CultureInfo.InvariantCulture);
                    SelfDamagesPrime.InnerText = S.ToString(CultureInfo.InvariantCulture);
                    AdditionalsPrime.InnerText = A.ToString(CultureInfo.InvariantCulture);
                    TotalVehiclePrime.InnerText = (T + S + A).ToString(CultureInfo.InvariantCulture);
                    Vehicles.AppendChild(ThirdDamagesPrime);
                    Vehicles.AppendChild(SelfDamagesPrime);
                    Vehicles.AppendChild(AdditionalsPrime);
                    Vehicles.AppendChild(TotalVehiclePrime);
                }

                #endregion

                var PrimeResume = doc.CreateElement("PrimeResume");
                var PrimeDiscount = doc.CreateElement("PrimeDiscount");
                var TotalAnualPrime = doc.CreateElement("TotalAnualPrime");
                var Taxes = doc.CreateElement("Taxes");
                var Discount = doc.CreateElement("Discount");
                var TotalPayment = doc.CreateElement("TotalPayment");
                var Totalprime = PolicyData.AnnualPremium.HasValue ? PolicyData.AnnualPremium.Value : 0;

                var DiscountAmount = PolicyData.DiscountPremium;

                var coupon = getCouponInfo(PolicyData.PolicyNoTemp);
                if (coupon != null && !string.IsNullOrEmpty(coupon.CouponCode))
                {
                    DiscountAmount = DiscountAmount + (Totalprime * (coupon.CouponPercentageDiscount.GetValueOrDefault() / 100));
                }

                var DiscountPremium = Totalprime - DiscountAmount;
                var TotalTaxes = PolicyData.TaxPremium.HasValue ? PolicyData.TaxPremium.Value : 0;

                PrimeDiscount.InnerText = DiscountPremium.ToString(CultureInfo.InvariantCulture);
                TotalAnualPrime.InnerText = Totalprime.ToString(CultureInfo.InvariantCulture);
                Discount.InnerText = DiscountAmount.ToString(CultureInfo.InvariantCulture);

                if (DiscountAmount > 0)
                {
                    //Hay un descuento hay que recalcular los impuestos 
                    Totalprime = DiscountPremium;
                    TotalTaxes = Totalprime * (PolicyData.TaxPercentage.GetValueOrDefault() / 100);
                }

                if (ContactData.InvoiceTypeId == 5) //Regimenes especiales
                    TotalTaxes = 0;

                var totalPay = Totalprime + TotalTaxes;

                Taxes.InnerText = TotalTaxes.ToString(CultureInfo.InvariantCulture);
                TotalPayment.InnerText = totalPay.ToString(CultureInfo.InvariantCulture);
                PrimeResume.AppendChild(TotalAnualPrime);
                PrimeResume.AppendChild(Taxes);
                PrimeResume.AppendChild(Discount);
                PrimeResume.AppendChild(PrimeDiscount);
                PrimeResume.AppendChild(TotalPayment);
                NodeQuotation.AppendChild(PrimeResume);

                var dataProjection = getProjectionPayment(totalPay);
                XmlElement PaymentOptions;
                XmlElement PaymentType;
                XmlElement InitialPayment;
                XmlElement NextPay;

                //Pago Unico
                PaymentOptions = doc.CreateElement("PaymentOptions");
                PaymentType = doc.CreateElement("PaymentType");
                InitialPayment = doc.CreateElement("InitialPayment");
                NextPay = doc.CreateElement("NextPay");

                var DataPagoUnico = dataProjection.FirstOrDefault(x => x.Numero == 1);
                PaymentType.InnerText = "1";
                PaymentOptions.AppendChild(PaymentType);
                InitialPayment.InnerText = DataPagoUnico.Inicial.ToString(CultureInfo.InvariantCulture);
                PaymentOptions.AppendChild(InitialPayment);
                NextPay.InnerText = DataPagoUnico.Cuotas;
                PaymentOptions.AppendChild(NextPay);
                NodeQuotation.AppendChild(PaymentOptions);

                //1 inicial + 4 pagos mensuales
                var DataInicialMas4Pagos = dataProjection.FirstOrDefault(x => x.Numero == 2);
                PaymentOptions = doc.CreateElement("PaymentOptions");
                PaymentType = doc.CreateElement("PaymentType");
                InitialPayment = doc.CreateElement("InitialPayment");
                NextPay = doc.CreateElement("NextPay");

                PaymentType.InnerText = "2";
                PaymentOptions.AppendChild(PaymentType);
                InitialPayment.InnerText = DataInicialMas4Pagos.Inicial.ToString(CultureInfo.InvariantCulture);
                PaymentOptions.AppendChild(InitialPayment);
                NextPay.InnerText = DataInicialMas4Pagos.Cuotas;
                PaymentOptions.AppendChild(NextPay);
                NodeQuotation.AppendChild(PaymentOptions);

                //1 inicial + 4 pagos mensuales (pagos automaticos)
                PaymentOptions = doc.CreateElement("PaymentOptions");
                PaymentType = doc.CreateElement("PaymentType");
                InitialPayment = doc.CreateElement("InitialPayment");
                NextPay = doc.CreateElement("NextPay");

                var DataInicialMas4PagosAutomaticos = dataProjection.FirstOrDefault(x => x.Numero == 3);
                PaymentType.InnerText = "3";
                PaymentOptions.AppendChild(PaymentType);
                InitialPayment.InnerText = DataInicialMas4PagosAutomaticos.Inicial.ToString(CultureInfo.InvariantCulture);
                PaymentOptions.AppendChild(InitialPayment);
                NextPay.InnerText = DataInicialMas4PagosAutomaticos.Cuotas;
                PaymentOptions.AppendChild(NextPay);
                NodeQuotation.AppendChild(PaymentOptions);

                //1 inicial + 11 pagos mensuales(financiacion)
                PaymentOptions = doc.CreateElement("PaymentOptions");
                PaymentType = doc.CreateElement("PaymentType");
                InitialPayment = doc.CreateElement("InitialPayment");
                NextPay = doc.CreateElement("NextPay");

                var DataFinanced = dataProjection.FirstOrDefault(x => x.Numero == 4);
                PaymentType.InnerText = "4";
                PaymentOptions.AppendChild(PaymentType);
                InitialPayment.InnerText = DataFinanced.Inicial.ToString(CultureInfo.InvariantCulture);
                PaymentOptions.AppendChild(InitialPayment);
                NextPay.InnerText = DataFinanced.Cuotas;
                PaymentOptions.AppendChild(NextPay);

                NodeQuotation.AppendChild(PaymentOptions);



                var stringFile = Utility.CleanXMLToParse(doc.InnerXml);
                Binary = UTF8Encoding.UTF8.GetBytes(stringFile);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            //Devolverlo en la funcion
            return Binary;
        }


        public byte[] GenerateXMLInvoiceToThunderhead(Utility.InvoiceData data)
        {
            byte[] result;
            var oDataSet = new Thunderhead.SysFlex.AUTO_SYSFLEX();
            var oTransaction = new Thunderhead.SysFlex.Transaction();
            var oContabilidad = new Thunderhead.SysFlex.Contabilidad();
            var oPaquete = new Thunderhead.SysFlex.Paquete();
            var oSupervisor = new Thunderhead.SysFlex.Supervisor();
            var UserCodeName = string.Empty;
            var DocumentIdSysFlexInvoice = ConfigurationManager.AppSettings["DocumentIdSysFlexInvoice"];

            oTransaction.DocumentId = DocumentIdSysFlexInvoice;
            var ListAntiguedadSalgo = new List<Thunderhead.SysFlex.AntiguedadSaldo>(0);
            ListAntiguedadSalgo.Add(new Thunderhead.SysFlex.AntiguedadSaldo { NoFactura = data.FacturaNumero, NoPoliza = data.Poliza, FechaFactura = data.Fecha.ToString() });

            oContabilidad.AntiguedadSaldo = ListAntiguedadSalgo;
            oTransaction.NoComprobante = data.Ncf;
            oTransaction.DescripcionComprobante = data.TipoComprobante;
            oTransaction.Moneda = "RD";
            oTransaction.NoPoliza = data.Poliza;
            oTransaction.Fullname = data.NombreCliente;
            oTransaction.Address = string.IsNullOrEmpty(data.Direccion) ? "-" : data.Direccion;
            oPaquete.TipoDocumento = data.Concepto;
            oPaquete.Product = string.IsNullOrEmpty(data.Producto) ? "-" : data.Producto;
            oPaquete.IdNumber = data.cedulaCliente;
            oPaquete.Email = "N/A";
            var ListAgente = new List<Thunderhead.SysFlex.Agente>(0);
            var ListCliente = new List<Thunderhead.SysFlex.Cliente>(0);
            ListCliente.Add(new Thunderhead.SysFlex.Cliente { CodigoCliente = data.CodigoCliente, TelCasa = data.TelRes, TelTrabajo = data.TelOfic, TelMovil = data.TelCel });

            ListAgente.Add(new Thunderhead.SysFlex.Agente { CodigoAgente = data.CodigoAgente, NombreAgente = data.NombreVendedor, DireccionAgente = data.DireccionAgente, Cliente = ListCliente.ToArray() });
            oSupervisor.Agente = ListAgente.ToArray();
            oSupervisor.CodigoSupervisor = string.IsNullOrEmpty(data.CodigoSupervisor) ? "0" : data.CodigoSupervisor;
            oSupervisor.NombreSupervisor = data.NombreSupervisor;
            oPaquete.StartDate = data.VigenciaDesde.ToString();
            oPaquete.EndDate = data.VigenciaHasta.ToString();
            oTransaction.OficinaComercial = data.Oficina;
            oTransaction.Ramo = data.Ramo;
            var ListVehicles = new List<Thunderhead.SysFlex.Vehicles>(0);
            ListVehicles.Add(new Thunderhead.SysFlex.Vehicles
            {
                EnsuredAmount = data.SumaAsegurada.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", ""),
                TotalVehiclePrime = data.PrimaNeta.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "")
            });

            oPaquete.Vehicles = ListVehicles.ToArray();
            var oPrimeResume = new Thunderhead.SysFlex.PrimeResume();
            oPrimeResume.Taxes = data.ISC.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            oPrimeResume.TotalPayment = data.TotalAPagar.ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");
            oPaquete.PrimeResume = oPrimeResume;
            oTransaction.Username = data.UserName;
            oDataSet.Transaction = oTransaction;
            oDataSet.Contabilidad = oContabilidad;
            oDataSet.Paquete = oPaquete;
            oDataSet.Supervisor = oSupervisor;

            var DocXML = SerializeToXMLString(oDataSet);
            result = Encoding.UTF8.GetBytes(DocXML);
            return result;
        }


        private IEnumerable<Utility.itemProjectionPayment> getProjectionPayment(decimal realannualPremium = 0)
        {
            decimal Initial;
            decimal Cuotas;
            string NumberFormat = "#,0.00";
            var PorcPagoUnico = dataConfig.FirstOrDefault(k => k.Namekey == "PorcDescPagoUnico").ConfigurationValue.ToDecimal();
            var PorcPagoAutomatico = dataConfig.FirstOrDefault(k => k.Namekey == "PorcDescPagoAutomatico").ConfigurationValue.ToDecimal();
            var PorcPagoInicial = dataConfig.FirstOrDefault(k => k.Namekey == "PorcPagoInicial").ConfigurationValue.ToDecimal();

            var result = new List<Utility.itemProjectionPayment>(0);

            var TotalPremium = realannualPremium > 0 ? realannualPremium : this.annualPremium.GetValueOrDefault();

            //Pago Unico  
            Initial = TotalPremium - (TotalPremium * PorcPagoUnico);
            var pagoUnico = new Utility.itemProjectionPayment
            {
                Numero = 1,
                Inicial = Initial,
                Cuotas = string.Empty
            };

            result.Add(pagoUnico);

            //Inicial + 4 Cuotas
            Initial = TotalPremium * PorcPagoInicial;
            Cuotas = (TotalPremium - Initial) / 4;
            var Inititial4Quotes = new Utility.itemProjectionPayment
            {
                Numero = 2,
                Inicial = Initial,
                Cuotas = string.Format("4 cuotas de {0}", Cuotas.ToString(NumberFormat, CultureInfo.InvariantCulture))
            };

            result.Add(Inititial4Quotes);

            //Inicial + 4 Cuotas Automaticas
            Initial = TotalPremium * PorcPagoInicial;
            Cuotas = (TotalPremium - Initial) / 4;
            var CuotaFinal = Cuotas - (TotalPremium * PorcPagoAutomatico);
            var Inititial4QuotesAutomatic = new Utility.itemProjectionPayment
            {
                Numero = 3,
                Inicial = Initial,
                Cuotas = string.Format("3 cuotas de {0} y la ultima de {1}", Cuotas.ToString(NumberFormat, CultureInfo.InvariantCulture), CuotaFinal.ToString(NumberFormat, CultureInfo.InvariantCulture))
            };

            result.Add(Inititial4QuotesAutomatic);

            try
            {
                //Inicial + Financiamiento a 11 meses            
                //Obtener la tabla de amortizacion de KCO
                double Principal = GetPorcKCO();
                var loanType = (ProductLine == Utility.ProductLine.Auto) ? GlobalServices.LoanType.VehicleInsurance : GlobalServices.LoanType.HouseInsurance;
                var resultGetAmortizationTable = GetAmortizationTable((double)annualPremium,
                                                                      loanType,
                                                                      11,
                                                                      Principal,
                                                                      (double)annualPremium
                                                                      );


                var financedInitial = (decimal)resultGetAmortizationTable.productCalculatorResult.AmotizationTable.FirstOrDefault(k => k.PeriodNumber == 0).Payment;
                Cuotas = (decimal)resultGetAmortizationTable.productCalculatorResult.AmotizationTable.LastOrDefault().Payment;
                var Financed = new Utility.itemProjectionPayment
                {
                    Numero = 4,
                    Inicial = financedInitial,
                    Cuotas = string.Format("11 cuotas de {0}", Cuotas.ToString(NumberFormat, CultureInfo.InvariantCulture))
                };

                result.Add(Financed);
            }
            catch (Exception)
            {
                var Financed = new Utility.itemProjectionPayment
                {
                    Numero = 4,
                    Inicial = 0,
                    Cuotas = "Información no dispobible"
                };

                result.Add(Financed);
            }

            return
                 result;
        }

        /// <summary>
        /// Obtener los valores de los recargos y descuentos Ramo y SubRamo
        /// </summary>
        /// <param name="caseSeqNo"></param>
        /// <param name="cityId"></param>
        /// <param name="corpId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="officeId"></param>
        /// <param name="regionId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="insuredVehicleId"></param>
        /// <param name="vehicleTypeId"></param>
        /// <param name="vehicleUniqueId"></param>
        /// <param name="DataCoverage"></param>
        /// <returns></returns>
        private Utility.QuotationAmmount GetQuotationAmmountsIL(int caseSeqNo,
                                                                int cityId,
                                                                int corpId,
                                                                int countryId,
                                                                int domesticRegId,
                                                                int histSeqNo,
                                                                int officeId,
                                                                int regionId,
                                                                int stateProvId,
                                                                long? EntityId
                                                               )
        {
            decimal montoDescuento = default(decimal),
                    porcDescuento = default(decimal),
                    montoRecargo = default(decimal),
                    porcRecargo = default(decimal);

            int discountRuleDetailId = default(int),
                 discountRuleId = default(int);

            #region Discounts / Surcharges
            Airplane.Insured.Discount dataDiscountAirplane = null;
            Entity.UnderWriting.Entities.Bail.Insured.Discount dataDiscountBail = null;
            Navy.Insured.Discount dataDiscountNavy = null;
            Property.Insured.Discount dataDiscountProperty = null;
            Transport.Insured.Discount dataDiscountTransport = null;

            switch (AlliedLinesProductBehavior)
            {
                case Utility.AlliedLinesType.Airplane:
                    //Discount
                    dataDiscountAirplane = oAirPlaneManager.GetAirplaneInsuredDiscount(new Airplane.Insured.Discount.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        AirplaneId = (int)EntityId
                    }).FirstOrDefault();

                    porcDescuento = dataDiscountTransport != null ? (dataDiscountTransport.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(dataDiscountTransport.DetailRuleValue.NTrim())
                                                                                                                       : default(decimal))
                                                          : default(decimal);

                    montoDescuento = dataDiscountTransport != null ? (dataDiscountTransport.OldPremiumAmount * porcDescuento)
                                                           : default(decimal);

                    discountRuleDetailId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleDetailId
                                                                 : default(int);

                    discountRuleId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleId
                                                           : default(int);

                    //Surcharge   
                    var coveragesAirplane = oAirPlaneManager.GetAirPlaneInsuredCoverage(new Airplane.Insured.Coverage.Key
                    {
                        CorpId = corpId,
                        UniqueAirplaneId = (int)EntityId
                    }).FirstOrDefault();

                    if (coveragesAirplane != null)
                    {
                        var CoverageSAirplane = oAirPlaneManager.GetAirplaneCoverageSurcharge(new Airplane.Insured.Coverage.Surcharge.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            UniqueAirplaneId = coveragesAirplane.UniqueAirplaneId,
                            BlTypeId = coveragesAirplane.BlTypeId,
                            BlId = coveragesAirplane.BlId,
                            ProductId = coveragesAirplane.ProductId,
                            VehicleTypeId = coveragesAirplane.VehicleTypeId,
                            GroupId = coveragesAirplane.GroupId,
                            CoverageTypeId = coveragesAirplane.CoverageTypeId,
                            CoverageId = coveragesAirplane.CoverageId,
                            SurchargeId = null,
                            discountRuleId = null,
                            discountRuleDetailId = null,
                            languageId = Language.ToInt()
                        }).Select(s =>
                        {
                            decimal recargo = s.OldCoverageAmount * (s.DetailRuleValue.ToDecimal(0, true));
                            s.TipoRecargo = s.NotePredefiniedDesc;
                            s.PorcentajeRecargo = string.Format("{0} %", (s.DetailRuleValue.ToDecimal(0, true) * 100).ToString(CultureInfo.InvariantCulture));
                            s.Recargo = recargo;
                            return s;
                        }).FirstOrDefault();

                        porcRecargo = CoverageSAirplane != null ? (CoverageSAirplane.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(CoverageSAirplane.DetailRuleValue.NTrim())
                                                                                                                                : default(decimal))
                                                                : default(decimal);

                        montoRecargo += CoverageSAirplane != null ? (CoverageSAirplane.OldCoverageAmount > 0 ? (CoverageSAirplane.OldCoverageAmount * porcRecargo)
                                                                                                             : default(decimal))
                                                                  : default(decimal);
                    }

                    break;
                case Utility.AlliedLinesType.Bail:
                    dataDiscountBail = oBailManager.GetBailInsuredDiscount(new Entity.UnderWriting.Entities.Bail.Insured.Discount.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        BailId = (int)EntityId
                    }).FirstOrDefault();


                    porcDescuento = dataDiscountTransport != null ? (dataDiscountTransport.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(dataDiscountTransport.DetailRuleValue.NTrim())
                                                                                                                       : default(decimal))
                                                          : default(decimal);

                    montoDescuento = dataDiscountTransport != null ? (dataDiscountTransport.OldPremiumAmount * porcDescuento)
                                                           : default(decimal);

                    discountRuleDetailId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleDetailId
                                                                 : default(int);

                    discountRuleId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleId

                                                           : default(int);
                    //Surcharge   
                    var coveragesBail = oBailManager.GetBailInsuredCoverage(new Entity.UnderWriting.Entities.Bail.Insured.Coverage.Key
                    {
                        CorpId = corpId,
                        UniqueBailId = (int)EntityId
                    }).FirstOrDefault();

                    if (coveragesBail != null)
                    {
                        var CoverageSBail = oBailManager.GetBailInsuredCoverageSurcharge(new Entity.UnderWriting.Entities.Bail.Insured.Coverage.Surcharge.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            UniqueBailId = coveragesBail.UniqueBailId.GetValueOrDefault(),
                            BlTypeId = coveragesBail.BlTypeId.GetValueOrDefault(),
                            BlId = coveragesBail.BlId.GetValueOrDefault(),
                            ProductId = coveragesBail.ProductId.GetValueOrDefault(),
                            VehicleTypeId = coveragesBail.VehicleTypeId.GetValueOrDefault(),
                            GroupId = coveragesBail.GroupId.GetValueOrDefault(),
                            CoverageTypeId = coveragesBail.CoverageTypeId.GetValueOrDefault(),
                            CoverageId = coveragesBail.CoverageId.GetValueOrDefault(),
                            SurchargeId = null,
                            discountRuleId = null,
                            discountRuleDetailId = null,
                            languageId = Language.ToInt()
                        }).Select(s =>
                        {
                            decimal recargo = s.OldCoverageAmount * (s.DetailRuleValue.ToDecimal(0, true));
                            s.TipoRecargo = s.NotePredefiniedDesc;
                            s.PorcentajeRecargo = string.Format("{0} %", (s.DetailRuleValue.ToDecimal(0, true) * 100).ToString(CultureInfo.InvariantCulture));
                            s.Recargo = recargo;
                            return s;
                        }).FirstOrDefault();

                        porcRecargo = CoverageSBail != null ? (CoverageSBail.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(CoverageSBail.DetailRuleValue.NTrim())
                                                                                                                                : default(decimal))
                                                                : default(decimal);

                        montoRecargo += CoverageSBail != null ? (CoverageSBail.OldCoverageAmount > 0 ? (CoverageSBail.OldCoverageAmount * porcRecargo)
                                                                                                             : default(decimal))
                                                                  : default(decimal);
                    }
                    break;
                case Utility.AlliedLinesType.Navy:
                    //Discount
                    dataDiscountNavy = oNavyManager.GetNavyInsuredDiscount(new Navy.Insured.Discount.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticRegId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        NavyId = (int)EntityId
                    }).FirstOrDefault();

                    porcDescuento = dataDiscountTransport != null ? (dataDiscountTransport.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(dataDiscountTransport.DetailRuleValue.NTrim())
                                                                                                                       : default(decimal))
                                                          : default(decimal);

                    montoDescuento = dataDiscountTransport != null ? (dataDiscountTransport.OldPremiumAmount * porcDescuento)
                                                           : default(decimal);

                    discountRuleDetailId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleDetailId
                                                                 : default(int);

                    discountRuleId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleId
                                                           : default(int);

                    //Surcharge
                    var coveragesNavy = oNavyManager.GetNavyInsuredCoverage(new Navy.Insured.Coverage.Key
                    {
                        CorpId = corpId,
                        UniqueNavyId = (int)EntityId
                    }).FirstOrDefault();

                    if (coveragesNavy != null)
                    {
                        var CoverageSNavy = oNavyManager.GetNavyInsuredCoverageSurcharge(new Navy.Insured.Coverage.Surcharge.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            UniqueNavyId = coveragesNavy.UniqueNavyId.GetValueOrDefault(),
                            BlTypeId = coveragesNavy.BlTypeId.GetValueOrDefault(),
                            BlId = coveragesNavy.BlId.GetValueOrDefault(),
                            ProductId = coveragesNavy.ProductId.GetValueOrDefault(),
                            VehicleTypeId = coveragesNavy.VehicleTypeId.GetValueOrDefault(),
                            GroupId = coveragesNavy.GroupId.GetValueOrDefault(),
                            CoverageTypeId = coveragesNavy.CoverageTypeId.GetValueOrDefault(),
                            CoverageId = coveragesNavy.CoverageId.GetValueOrDefault(),
                            SurchargeId = null,
                            DiscountRuleId = null,
                            DiscountRuleDetailId = null,
                            LanguageId = Language.ToInt()
                        }).Select(s =>
                        {
                            decimal recargo = s.OldCoverageAmount * (s.DetailRuleValue.ToDecimal(0, true));
                            s.TipoRecargo = s.NotePredefiniedDesc;
                            s.PorcentajeRecargo = string.Format("{0} %", (s.DetailRuleValue.ToDecimal(0, true) * 100).ToString(CultureInfo.InvariantCulture));
                            s.Recargo = recargo;
                            return s;
                        }).FirstOrDefault();

                        porcRecargo = CoverageSNavy != null ? (CoverageSNavy.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(CoverageSNavy.DetailRuleValue.NTrim())
                                                                                                                                : default(decimal))
                                                                : default(decimal);

                        montoRecargo += CoverageSNavy != null ? (CoverageSNavy.OldCoverageAmount > 0 ? (CoverageSNavy.OldCoverageAmount * porcRecargo)
                                                                                                             : default(decimal))
                                                                  : default(decimal);

                    }
                    break;
                case Utility.AlliedLinesType.Property:
                    //Discount
                    dataDiscountProperty = oPropertyManager.GetPropertyInsuredDiscount(new Property.Insured.Discount.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        PropertyId = (int)EntityId
                    }).FirstOrDefault();

                    porcDescuento = dataDiscountTransport != null ? (dataDiscountTransport.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(dataDiscountTransport.DetailRuleValue.NTrim())
                                                                                                                       : default(decimal))
                                                          : default(decimal);

                    montoDescuento = dataDiscountTransport != null ? (dataDiscountTransport.OldPremiumAmount * porcDescuento)
                                                           : default(decimal);

                    discountRuleDetailId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleDetailId
                                                                 : default(int);

                    discountRuleId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleId
                                                           : default(int);

                    //Surcharge
                    var coveragesProperty = oPropertyManager.GetPropertyInsuredDetailCoverage(new Property.Insured.Detail.Coverage.GetDetailCoverageResult.Key
                    {
                        corpId = corpId,
                        uniquePropertyId = (int)EntityId
                    }).FirstOrDefault();

                    if (coveragesProperty != null)
                    {
                        var CoverageSProperty = oPropertyManager.GetPropertyInsuredCoverageSurcharge(new Property.Insured.Coverage.Surcharge.Key
                        {
                            corpId = corpId,
                            regionId = regionId,
                            countryId = countryId,
                            uniquePropertyId = coveragesProperty.UniquePropertyId,
                            blTypeId = coveragesProperty.BlTypeId,
                            blId = coveragesProperty.BlId,
                            productId = coveragesProperty.ProductId,
                            vehicleTypeId = coveragesProperty.VehicleTypeId,
                            groupId = coveragesProperty.GroupId,
                            coverageTypeId = coveragesProperty.CoverageTypeId,
                            coverageId = coveragesProperty.CoverageId,
                            surchargeId = null,
                            discountRuleId = null,
                            discountRuleDetailId = null,
                            languageId = Language.ToInt()
                        }).Select(s =>
                        {
                            decimal recargo = s.OldCoverageAmount * (s.DetailRuleValue.ToDecimal(0, true));
                            s.TipoRecargo = s.NotePredefiniedDesc;
                            s.PorcentajeRecargo = string.Format("{0} %", (s.DetailRuleValue.ToDecimal(0, true) * 100).ToString(CultureInfo.InvariantCulture));
                            s.Recargo = recargo;
                            return s;
                        }).FirstOrDefault();

                        porcRecargo = CoverageSProperty != null ? (CoverageSProperty.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(CoverageSProperty.DetailRuleValue.NTrim())
                                                                                                                                : default(decimal))
                                                                : default(decimal);

                        montoRecargo += CoverageSProperty != null ? (CoverageSProperty.OldCoverageAmount > 0 ? (CoverageSProperty.OldCoverageAmount * porcRecargo)
                                                                                                             : default(decimal))
                                                                  : default(decimal);

                    }
                    break;
                case Utility.AlliedLinesType.Transport:
                    //Discount
                    dataDiscountTransport = oTransportManager.GetTransportInsuredDiscount(new Transport.Insured.Discount.Key
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticRegId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        TransportId = (int)EntityId
                    }).FirstOrDefault();

                    //Surcharge
                    var coveragesTransport = oTransportManager.GetTransportInsuredCoverage(new Transport.Insured.Coverage.Key
                    {
                        CorpId = corpId,
                        UniqueTransportId = (int)EntityId
                    }).FirstOrDefault();

                    porcDescuento = dataDiscountTransport != null ? (dataDiscountTransport.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(dataDiscountTransport.DetailRuleValue.NTrim())
                                                                                                                       : default(decimal))
                                                          : default(decimal);

                    montoDescuento = dataDiscountTransport != null ? (dataDiscountTransport.OldPremiumAmount * porcDescuento)
                                                           : default(decimal);

                    discountRuleDetailId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleDetailId
                                                                 : default(int);

                    discountRuleId = dataDiscountTransport != null ? dataDiscountTransport.DiscountRuleId
                                                           : default(int);

                    if (coveragesTransport != null)
                    {
                        var coverageSTransport = oTransportManager.GetTransportInsuredCoverageSurcharge(new Transport.Insured.Coverage.Surcharge.Key
                        {
                            CorpId = corpId,
                            RegionId = regionId,
                            CountryId = countryId,
                            UniqueTransportId = coveragesTransport.UniqueTransportId.GetValueOrDefault(),
                            BlTypeId = coveragesTransport.BlTypeId.GetValueOrDefault(),
                            BlId = coveragesTransport.BlId.GetValueOrDefault(),
                            ProductId = coveragesTransport.ProductId.GetValueOrDefault(),
                            VehicleTypeId = coveragesTransport.VehicleTypeId.GetValueOrDefault(),
                            GroupId = coveragesTransport.GroupId.GetValueOrDefault(),
                            CoverageTypeId = coveragesTransport.CoverageTypeId.GetValueOrDefault(),
                            CoverageId = coveragesTransport.CoverageId.GetValueOrDefault(),
                            SurchargeId = null,
                            discountRuleId = null,
                            discountRuleDetailId = null,
                            languageId = Language.ToInt()
                        }).Select(s =>
                        {
                            decimal recargo = s.OldCoverageAmount * (s.DetailRuleValue.ToDecimal(0, true));
                            s.TipoRecargo = s.NotePredefiniedDesc;
                            s.PorcentajeRecargo = string.Format("{0} %", (s.DetailRuleValue.ToDecimal(0, true) * 100).ToString(CultureInfo.InvariantCulture));
                            s.Recargo = recargo;
                            return s;
                        }).FirstOrDefault();

                        porcRecargo = coverageSTransport != null ? (coverageSTransport.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(coverageSTransport.DetailRuleValue.NTrim())
                                                                                                                                : default(decimal))
                                                                : default(decimal);

                        montoRecargo += coverageSTransport != null ? (coverageSTransport.OldCoverageAmount > 0 ? (coverageSTransport.OldCoverageAmount * porcRecargo)
                                                                                                             : default(decimal))
                                                                  : default(decimal);
                    }

                    break;
            }

            #endregion

            return new Utility.QuotationAmmount
            {
                MontoDescuento = montoDescuento,
                MontoRecargo = montoRecargo,
                PorcDescuento = porcDescuento,
                PorcRecargo = porcRecargo
            };
        }

        /// <summary>
        /// Obtener montos
        /// </summary>
        /// <param name="caseSeqNo"></param>
        /// <param name="cityId"></param>
        /// <param name="corpId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="officeId"></param>
        /// <param name="regionId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="insuredVehicleId"></param>
        /// <param name="vehicleTypeId"></param>
        /// <param name="vehicleUniqueId"></param>
        /// <param name="DataCoverage"></param>
        /// <returns></returns>
        private Utility.QuotationAmmount GetQuotationAmmounts(int caseSeqNo,
                                                      int cityId,
                                                      int corpId,
                                                      int countryId,
                                                      int domesticRegId,
                                                      int histSeqNo,
                                                      int officeId,
                                                      int regionId,
                                                      int stateProvId,
                                                      int? insuredVehicleId,
                                                      int? vehicleTypeId,
                                                      long vehicleUniqueId,
                                                      IEnumerable<Policy.VehicleCoverage> DataCoverage)
        {
            decimal montoDescuento = default(decimal),
                    porcDescuento = default(decimal),
                    montoRecargo = default(decimal),
                    porcRecargo = default(decimal);

            var DataCvr = DataCoverage.FirstOrDefault();
            var DeducibleDesc = DataCvr.DeductiblePercentage.HasValue ? DataCvr.DeductiblePercentage.Value.Truncate().ToString(CultureInfo.InvariantCulture) + "%"
                                                                      : "";

            int discountRuleDetailId = default(int),
                discountRuleId = default(int),
                subRamo = DataCoverage != null ? DataCvr.SubRamo.GetValueOrDefault() : default(int);  //En este caso el GroupId es el SubRamo

            #region Discount / Coverage
            var PolicyVehicleDiscount = oPolicyManager.GetPolicyVehicleDiscount(new Policy.DVParameter
            {
                CaseSeqNo = caseSeqNo,
                CityId = cityId,
                CorpId = corpId,
                CountryId = countryId,
                DiscountId = null,
                DiscountRuleDetailId = null,
                DiscountRuleId = null,
                DomesticregId = domesticRegId,
                HistSeqNo = histSeqNo,
                InsuredVehicleId = insuredVehicleId,
                OfficeId = officeId,
                RegionId = regionId,
                StateProvId = stateProvId
            }).FirstOrDefault();

            #region Coverage
            porcDescuento = PolicyVehicleDiscount != null ? (PolicyVehicleDiscount.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(PolicyVehicleDiscount.DetailRuleValue.NTrim())
                                                                                                                       : default(decimal)) : default(decimal);

            montoDescuento = PolicyVehicleDiscount != null ? (PolicyVehicleDiscount.OldPremiumAmount * porcDescuento) : default(decimal);

            discountRuleDetailId = PolicyVehicleDiscount != null ? PolicyVehicleDiscount.DiscountRuleDetailId : default(int);
            discountRuleId = PolicyVehicleDiscount != null ? PolicyVehicleDiscount.DiscountRuleId : default(int);

            foreach (var vehicleItem in DataCoverage)
            {
                var VehicleCoverageSurcharge = oPolicyManager.GetVehicleCoverageSurcharge(new Policy.VehicleCoverageSurcharge
                {
                    BlId = vehicleItem.BlId,
                    BlTypeId = vehicleItem.BlTypeId,
                    CorpId = corpId,
                    CountryId = countryId,
                    CoverageId = vehicleItem.CoverageId,
                    CoverageTypeId = vehicleItem.CoverageTypeId,
                    DiscountRuleDetailId = discountRuleDetailId,
                    DiscountRuleId = discountRuleId,
                    GroupId = vehicleItem.GroupId,
                    OldCoverageAmount = null,
                    ProductId = vehicleItem.ProductId,
                    RegionId = regionId,
                    SurchargeId = null,
                    UserId = this.UserID.Value,
                    VehicleTypeId = vehicleItem.VehicleTypeId,
                    VehicleUniqueId = vehicleItem.VehicleUniqueId
                }).FirstOrDefault();

                porcRecargo = VehicleCoverageSurcharge != null ? (VehicleCoverageSurcharge.DetailRuleValue.NTrim().IsDecimal() ? Convert.ToDecimal(VehicleCoverageSurcharge.DetailRuleValue.NTrim())
                                                                                                                               : default(decimal))
                                                               : default(decimal);

                montoRecargo += VehicleCoverageSurcharge != null ? (VehicleCoverageSurcharge.OldCoverageAmount.HasValue ? (VehicleCoverageSurcharge.OldCoverageAmount.Value * porcRecargo)
                                                                                                                        : default(decimal))
                                                                 : default(decimal);
            }
            #endregion

            #endregion

            return new Utility.QuotationAmmount
            {
                MontoDescuento = montoDescuento,
                MontoRecargo = montoRecargo,
                PorcDescuento = porcDescuento,
                PorcRecargo = porcRecargo,
                DeducibleDesc = DeducibleDesc,
                SubRamo = subRamo
            };
        }

        public bool hasInspectionAllVehicles(int caseSeqNo, int cityId, int corpId, int countryId, int domesticRegId,
                                                      int histSeqNo,
                                                      int officeId,
                                                      int regionId,
                                                      int stateProvId)
        {
            var parameters = new Policy.Parameter();
            parameters.CaseSeqNo = caseSeqNo;
            parameters.CityId = cityId;
            parameters.CorpId = corpId;
            parameters.CountryId = countryId;
            parameters.DomesticregId = domesticRegId;
            parameters.HistSeqNo = histSeqNo;
            parameters.OfficeId = officeId;
            parameters.RegionId = regionId;
            parameters.StateProvId = stateProvId;

            var v = oPolicyManager.GetVehicleInsured(parameters);

            var result = v.All(x => x.Inspection != null);

            return result;
        }

        public bool hasInspectionAllProperties(Property.Key policy)
        {
            return oPropertyManager.GetProperty(policy).All(i => i.Inspected.GetValueOrDefault());
        }


        public bool isInspectedCompleted(int caseSeqNo, int cityId, int corpId, int countryId, int domesticRegId, int histSeqNo, int officeId, int regionId, int stateProvId)
        {
            //var parameters = new Policy.Parameter();
            //parameters.CaseSeqNo = caseSeqNo;
            //parameters.CityId = cityId;
            //parameters.CorpId = corpId;
            //parameters.CountryId = countryId;
            //parameters.DomesticregId = domesticRegId;
            //parameters.HistSeqNo = histSeqNo;
            //parameters.OfficeId = officeId;
            //parameters.RegionId = regionId;
            //parameters.StateProvId = stateProvId;

            //var v = oPolicyManager.GetVehicleInsured(parameters);

            //si todos los vehiculos estan completamente inspecionados
            //var result = v.All(x => x.IsInspected.GetValueOrDefault() == true);

            string completed = InspectionCompleted(new Utility.itemPolicy
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo
            }, Utility.ProductLine.Auto);

            return string.IsNullOrWhiteSpace(completed);
        }

        public bool IsRiskInspectionCompletd()
        {
            return false;
        }

        public bool UpdateVehicleInsuredInspection(int caseSeqNo, int cityId, int corpId, int countryId, int domesticRegId,
                                                   int histSeqNo,
                                                   int officeId,
                                                   int regionId,
                                                   int stateProvId, long vehicleuniqueid = 0, bool inspection = false)
        {
            Policy.VehicleInsured.InspectionV p = new Policy.VehicleInsured.InspectionV();
            p.CaseSeqNo = caseSeqNo;
            p.CityId = cityId;
            p.CorpId = corpId;
            p.CountryId = countryId;
            p.DomesticRegId = domesticRegId;
            p.HistSeqNo = histSeqNo;
            p.OfficeId = officeId;
            p.RegionId = regionId;
            p.StateProvId = stateProvId;
            p.VehicleUniqueId = vehicleuniqueid.ToInt();
            p.Inspection = inspection;
            p.UserId = UserID.GetValueOrDefault();
            p.EndorsementClarifying = false;

            var v = oPolicyManager.SetVehicleInsuredInspection(p);
            return false;
        }

        /// <summary>
        /// Método para generar el formulario de inspección de vehículos vía Thunderhead
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="PathXmlFile"></param>
        /// <param name="vehicleUniqueID"></param>
        /// <param name="TemplateType"></param>
        public byte[] GenerateXMLVIFToThunderhead(int corpId,
                                                  int regionId,
                                                  int countryId,
                                                  int domesticRegId,
                                                  int stateProvId,
                                                  int cityId,
                                                  int officeId,
                                                  int caseSeqNo,
                                                  int histSeqNo,
                                                  long vehicleUniqueID,
                                                  string ServerMapPath)
        {
            string XmlFilePath = string.Empty;
            byte[] Binary;

            Policy.VehicleInsured dataVehicle = new Policy.VehicleInsured();

            try
            {
                #region Datos de la poliza
                Policy PolicyData = oPolicyManager.GetPolicy(corpId,
                                                             regionId,
                                                             countryId,
                                                             domesticRegId,
                                                             stateProvId,
                                                             cityId,
                                                             officeId,
                                                             caseSeqNo,
                                                             histSeqNo);
                if (PolicyData == null)
                    throw new Exception(Resources.UnexpectedErrorMessage);

                string AgenteComercial = PolicyData.Agent_Name,
                       QuotationNumber = PolicyData.PolicyNo;
                #endregion

                #region Datos del contacto
                Contact ContactData = oContactManager.GetContact(corpId,
                                                                 PolicyData.ContactId,
                                                                 Language.ToInt());

                if (ContactData == null)
                    throw new Exception(Resources.QuotationDontHasContact);

                string PrincipalName = ContactData.FullName;

                #region Correo del contacto
                IEnumerable<Contact.Email> DataEmail = oContactManager.GetCommunicatonEmail(corpId,
                                                                                             ContactData.ContactId,
                                                                                             Language.ToInt());

                Contact.Email EmailResult = DataEmail.FirstOrDefault(x => x.IsPrimary);

                if (EmailResult == null)
                    EmailResult = DataEmail.FirstOrDefault();

                string Email = EmailResult != null ? EmailResult.EmailAdress : default(string);
                #endregion

                #region Direccion/Pais/Ciudad del contacto
                var oAddress = oContactManager.GetCommunicatonAdress(corpId,
                                                                     ContactData.ContactId,
                                                                     Language.ToInt()).FirstOrDefault(x => x.DirectoryTypeId == 5);

                string Direccion = (oAddress != null) ? oAddress.StreetAddress : string.Empty,
                       Ciudad = (oAddress != null) ? oAddress.CityDesc : string.Empty,
                       Pais = (oAddress != null) ? oAddress.CountryDesc : string.Empty;
                #endregion

                #region Telefonos del contacto
                IEnumerable<Contact.Phone> oPhones = oContactManager.GetCommunicatonPhone(corpId,
                                                                                          ContactData.ContactId,
                                                                                          Language.ToInt());
                Contact.Phone dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary),
                              personalNumber = oPhones.FirstOrDefault(c => c.DirectoryTypeId.Equals(8)); //8 = Celular

                string PhoneNumber = dataPhonePrimary != null ? string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode,
                                                                                           dataPhonePrimary.AreaCode,
                                                                                           dataPhonePrimary.PhoneNumber)
                                                              : default(string),
                       PersonalNumber = personalNumber != null ? string.Format("{0}{1}{2}", personalNumber.CountryCode,
                                                                                            personalNumber.AreaCode,
                                                                                            personalNumber.PhoneNumber)
                                                               : default(string);
                #endregion
                #endregion

                #region Datos del inspector
                Policy.Quo info = oPolicyManager.GetQuotationInfoTemp(new Policy.Quo.Temp
                {
                    PolicyNo = QuotationNumber
                }).FirstOrDefault();

                if (info == null)
                    return Encoding.ASCII.GetBytes(Resources.VehicleDontHasInspection);

                string NombreInspector = info.InspectorName;
                #endregion

                #region Datos del vehiculo
                dataVehicle = getVehicles(corpId,
                                          regionId,
                                          countryId,
                                          domesticRegId,
                                          stateProvId,
                                          cityId,
                                          officeId,
                                          caseSeqNo,
                                          histSeqNo,
                                          vehicleUniqueID).FirstOrDefault();

                if (dataVehicle == null)
                    return Encoding.ASCII.GetBytes(Resources.QuotationDontHasVehicle);

                int? InsuredVehicleId = dataVehicle.InsuredVehicleId;
                #endregion

                #region Datos inspeccion
                Vehicle.Review vehicleReview = oVehicleManager.GetVehicleReview(new Vehicle
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticRegId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    InsuredVehicleId = InsuredVehicleId
                }).FirstOrDefault(v => v.Inspection == true /*&& v.ReviewStatus == true*/);

                if (vehicleReview == null)
                    return Encoding.ASCII.GetBytes(Resources.VehicleDontHasInspection);

                List<Vehicle.Review.Detail> reviews = oVehicleManager.GetVehicleReviewDetail(new Vehicle.Review()
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticRegId = domesticRegId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    InsuredVehicleId = InsuredVehicleId,
                    ReviewId = null,
                    ReviewGroupId = null,
                    ReviewGroupEndorsementClarifying = null,
                    ReviewOptionEndorsementClarifying = null,
                    LanguageId = Language.ToInt()
                }).ToList();

                if (reviews.Count == 0)
                    return Encoding.ASCII.GetBytes(Resources.VehicleDontHasInspection);

                string Fecha = vehicleReview.ReviewDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                       HoraInicio = vehicleReview.ReviewDate.Value.ToString("hh:mmtt", CultureInfo.InvariantCulture),
                       Cilindros = vehicleReview.Cylinder.ToString(),
                       Kilometraje = vehicleReview.Odometer.ToString(),
                       Pasajeros = vehicleReview.Seats.ToString(),
                       Year = vehicleReview.ModelYear.ToString(),
                       Color = vehicleReview.ColorDesc,
                       Placa = vehicleReview.RegistryPlate,
                       Tipo = vehicleReview.VehicleTypeDesc,
                       Uso = vehicleReview.UsageDesc,
                       Chasis = vehicleReview.Mark,
                       Clase = vehicleReview.VehicleClassDesc,
                       Version = vehicleReview.VersionDesc,
                       Transmision = string.Empty,
                       Traccion = vehicleReview.WheelDriveTypeDesc,
                       Brand = dataVehicle.MakeDesc,
                       Model = dataVehicle.ModelDesc,
                       NotasInspeccion = vehicleReview.ReviewNotes;

                switch ((Utility.TransmissionType)vehicleReview.TransmissionTypeId)
                {
                    case Utility.TransmissionType.Automatica:
                        Transmision = Utility.TransmissionType.Automatica.Type();
                        break;
                    case Utility.TransmissionType.Mecanica:
                        Transmision = Utility.TransmissionType.Mecanica.Type();
                        break;
                    case Utility.TransmissionType.Sequencial:
                        Transmision = Utility.TransmissionType.Sequencial.Type();
                        break;
                }
                #endregion

                string DocumentId = ConfigurationManager.AppSettings["DocumentIDInspeccion"];

                #region XML
                string schema_path = string.Format("{0}VIF_SCHEMA.xml", ServerMapPath);
                byte[] BinaryTemplate = File.ReadAllBytes(schema_path);

                Stream stream = new MemoryStream(BinaryTemplate);

                XmlDocument doc = new XmlDocument();
                doc.Load(stream);

                #endregion

                #region XmlNodeList
                XmlElement VIF_SCHEMA = doc.DocumentElement;
                XmlNodeList Quotation = VIF_SCHEMA.GetElementsByTagName("Quotation");
                XmlNodeList Transaction = VIF_SCHEMA.GetElementsByTagName("Transaction");
                #endregion

                #region XmlNode
                #region Transaction
                XmlNode NodeTransaction = Transaction[0];
                NodeTransaction["DocumentId"].InnerText = DocumentId;
                NodeTransaction["Address"].InnerText = string.Format("{0}, {1}, {2}", Direccion, Ciudad, Pais);
                NodeTransaction["NombreInspector"].InnerText = NombreInspector;
                NodeTransaction["AgenteComercial"].InnerText = AgenteComercial;
                NodeTransaction["InspectionStartHour"].InnerText = HoraInicio;
                #endregion

                #region Quotation
                XmlNode NodeQuotation = Quotation[0];
                NodeQuotation["QuotationNumber"].InnerText = QuotationNumber;
                NodeQuotation["StartDate"].InnerText = Fecha;
                NodeQuotation["PrincipalName"].InnerText = PrincipalName;
                NodeQuotation["TelephoneNumber"].InnerText = PersonalNumber;
                NodeQuotation["Email"].InnerText = Email;
                #endregion

                #region Drivers
                XmlElement NodeDrivers = NodeQuotation["Drivers"];
                NodeDrivers["TelephoneNumber"].InnerText = PhoneNumber;
                #endregion

                #region Quotation.Vehicles y Quotation.Vehicles.Piezas
                XmlElement ElementVehicles = doc.CreateElement("Vehicles"),
                           ElementBrand = doc.CreateElement("Brand"),
                           ElementModel = doc.CreateElement("Model"),
                           ElementYear = doc.CreateElement("Year"),
                           ElementVersion = doc.CreateElement("Version"),
                           ElementColor = doc.CreateElement("Color"),
                           ElementTransmision = doc.CreateElement("Transmision"),
                           ElementTraccion = doc.CreateElement("Traccion"),
                           ElementCilindros = doc.CreateElement("Cilindros"),
                           ElementPlaca = doc.CreateElement("Placa"),
                           ElementChasis = doc.CreateElement("Chasis"),
                           ElementClase = doc.CreateElement("Clase"),
                           ElementTipo = doc.CreateElement("Tipo"),
                           ElementUso = doc.CreateElement("Uso"),
                           ElementKilometraje = doc.CreateElement("Kilometraje"),
                           ElementPasajeros = doc.CreateElement("Pasajeros"),
                           ElementNotasInspeccion = doc.CreateElement("NotasInspeccion");

                ElementBrand.InnerText = Brand;
                ElementVehicles.AppendChild(ElementBrand);

                ElementModel.InnerText = Model;
                ElementVehicles.AppendChild(ElementModel);

                ElementYear.InnerText = Year;
                ElementVehicles.AppendChild(ElementYear);

                ElementVersion.InnerText = Version;
                ElementVehicles.AppendChild(ElementVersion);

                ElementColor.InnerText = Color;
                ElementVehicles.AppendChild(ElementColor);

                ElementTransmision.InnerText = Transmision;
                ElementVehicles.AppendChild(ElementTransmision);

                ElementTraccion.InnerText = Traccion;
                ElementVehicles.AppendChild(ElementTraccion);

                ElementCilindros.InnerText = Cilindros;
                ElementVehicles.AppendChild(ElementCilindros);

                ElementPlaca.InnerText = Placa;
                ElementVehicles.AppendChild(ElementPlaca);

                ElementChasis.InnerText = Chasis;
                ElementVehicles.AppendChild(ElementChasis);

                ElementClase.InnerText = Clase;
                ElementVehicles.AppendChild(ElementClase);

                ElementTipo.InnerText = Tipo;
                ElementVehicles.AppendChild(ElementTipo);

                ElementUso.InnerText = Uso;
                ElementVehicles.AppendChild(ElementUso);

                ElementKilometraje.InnerText = Kilometraje;
                ElementVehicles.AppendChild(ElementKilometraje);

                ElementPasajeros.InnerText = Pasajeros;
                ElementVehicles.AppendChild(ElementPasajeros);

                ElementNotasInspeccion.InnerText = NotasInspeccion;
                ElementVehicles.AppendChild(ElementNotasInspeccion);

                //string[] Secciones = new string[] 
                //{
                //    "Combustibles",
                //    "Complementos",
                //    "Seguridad"
                //};

                //Julisy Amador 2017-10-18
                //Se comentó el arreglo anterior ya que estaba excluyendo el bloque de Complementos y Seguridad y estos fueron solicitados para inclusion por parte del sr. Orlando Jimenez
                string[] Secciones = new string[]
                {
                    "Combustibles"
                };

                foreach (Vehicle.Review.Detail review in reviews)
                {
                    if (!Secciones.Contains(review.ReviewClassDesc))
                    {
                        XmlElement Descripcion = doc.CreateElement("Descripcion"),
                                   Estado = doc.CreateElement("Estado");

                        Descripcion.InnerText = review.ReviewItemDesc;
                        Estado.InnerText = review.ReviewOptionDesc;

                        XmlElement ElementPiezas = doc.CreateElement("Piezas");
                        ElementPiezas.AppendChild(Descripcion);
                        ElementPiezas.AppendChild(Estado);

                        ElementVehicles.AppendChild(ElementPiezas);
                    }
                }
                #endregion

                NodeQuotation.AppendChild(ElementVehicles);
                #endregion
                var stringFile = Utility.CleanXMLToParse(doc.InnerXml);
                Binary = ASCIIEncoding.UTF8.GetBytes(stringFile);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            //Devolverlo en la funcion
            return Binary;
        }

        /// <summary>
        /// Crear el Prestamo
        /// </summary>
        public Utility.CLoanResult kcoCreateLoan(Contact ContactData,
                                                 Policy PolicyData,
                                                 Utility.ContactParameter contactParameter,
                                                 string PolicyNo
                                                 )
        {
            var Email = string.Empty;
            var UniqueClientId = string.Empty;
            var UniqueAgentId = string.Empty;

            var result = new Utility.CLoanResult();

            #region Crear el agente
            //Obtener la informacion del agente
            var dataAgent = oPolicyManager.GetAgentInfo(this.Corp_Id, PolicyData.Agent_Id);

            if (dataAgent == null)
                throw new Exception(string.Format("{0}", GenericMessage, "El agente no existe"));

            UniqueAgentId = dataAgent.KcoUniqueId;

            if (string.IsNullOrEmpty(dataAgent.KcoUniqueId))
            {
                var IsPerson = (dataAgent.IdentityTypeId == 11);

                var DataDirectory = oPolicyManager.GetAgentDirectoryInfo(dataAgent.DirectoryId).ToList();
                var DataEmailAgent = DataDirectory.Where(m => m.DirectoryTypeId == 2 && m.isPrimary).ToList();
                var DataAddressAgent = DataDirectory.Where(m => m.DirectoryTypeId == 5).ToList();

                var EmailAgent = DataEmailAgent.Any() ? DataEmailAgent.FirstOrDefault().Address : string.Empty;
                var BirthCountry = "Republica Dominicana";
                var City = "Santo Domingo";
                var Country = "Republica Dominicana";
                var Province = "Distrito Nacional";
                var Sector = "Santo Domingo";
                var Street = "C/27 de febrero Esq Calle las Fronda";

                //Crear el Agente
                var itemAgent = new GlobalServices.PolicyksiAgentparameter
                {
                    FirstName = dataAgent.FirstName,
                    LastName = IsPerson ? dataAgent.FirstLastname : string.Empty,
                    MiddleName = IsPerson ? dataAgent.MiddleName : string.Empty,
                    Gender = dataAgent.Gender == "M" ? GlobalServices.Gender.M : GlobalServices.Gender.F,
                    IdNumber = dataAgent.ID,
                    IdType = IsPerson ? GlobalServices.IdType.CEDULA : GlobalServices.IdType.RNC,
                    DateOfBirth = dataAgent.Dob,
                    EntityType = IsPerson ? GlobalServices.EntityType.Person : GlobalServices.EntityType.Institution,
                    Company = "ATLANTICA SEGUROS",
                    MainEmailAddress = Email,
                    BirthCountry = BirthCountry,
                    City = City,
                    Country = Country,
                    Province = Province,
                    Sector = Sector,
                    Street = Street
                };

                var ExportAgentResult = oPolicyGlobalService.ksiExportAgent(itemAgent);

                hasError = ErrorCode.Contains(ExportAgentResult.Code) || !ExportAgentResult.exportResult.OperationResult;

                if (hasError)
                {
                    result.Code = ExportAgentResult.Code;
                    result.Message = ExportAgentResult.Message;
                    return
                         result;
                }

                UniqueAgentId = ExportAgentResult.exportResult.UniqueAgentId;
                //Actualizar el campo de UniqueId en la tabla de agent de global                
                oPolicyManager.SetAgentUniqueID(this.Corp_Id, dataAgent.AgentId, UniqueAgentId);
            }

            #endregion

            #region Crear el cliente
            UniqueClientId = ContactData.KcoUniqueId;

            if (string.IsNullOrEmpty(ContactData.KcoUniqueId))
            {
                var IsPerson = !ContactData.IsCompany;
                var EstadoCivil = string.Empty;

                /*
                    0	Others
                    1	Married
                    2	Divorced
                    4	Single
                    5	Widowed
                    6	Not Assigned
                    7	Separated
                    8	Free union
                */

                switch (ContactData.MaritalStatId)
                {
                    case 1:
                        EstadoCivil = "C";
                        break;
                    case 0:
                    case 2:
                    case 4:
                    case 7:
                        EstadoCivil = "S";
                        break;
                    case 5:
                        EstadoCivil = "V";
                        break;
                    case 8:
                        EstadoCivil = "U";
                        break;
                }

                //Crear el Cliente
                var itemCliente = new GlobalServices.PolicyksiClientparameter
                {
                    Nombre1 = IsPerson ? ContactData.FirstName.ToUpper() : ContactData.InstitutionalName.ToUpper(),
                    Nombre2 = IsPerson ? ContactData.MiddleName : string.Empty,
                    Apellido1 = IsPerson ? ContactData.FirstLastName : string.Empty,
                    Apellido2 = IsPerson ? ContactData.SecondLastName : string.Empty,
                    Provincia = contactParameter.oAddress.StateProvDesc,
                    Calle = contactParameter.oAddress.StreetAddress,
                    Compania = string.Empty,
                    Ciudad = contactParameter.oAddress.MunicipioDesc,
                    Sector = contactParameter.oAddress.CityDesc,
                    EstadoCivil = IsPerson ? EstadoCivil : string.Empty,
                    FechaNacimiento = ContactData.Dob.HasValue ? ContactData.Dob : new DateTime(1753, 1, 1),
                    Nacionalidad = !string.IsNullOrEmpty(ContactData.CountryOfBirthDesc) ? ContactData.CountryOfBirthDesc : "Republica Dominicana",
                    NoIdentificacion = ContactData.Id,
                    PaisResidencia = !string.IsNullOrEmpty(ContactData.CountryOfResidenceDesc) ? ContactData.CountryOfResidenceDesc : "Republica Dominicana",
                    Personeria = IsPerson ? GlobalServices.EntityType.Person : GlobalServices.EntityType.Institution,
                    SegmentoRD = "950004",
                    Sexo = ContactData.Gender == "M" ? GlobalServices.Gender.M : GlobalServices.Gender.F,
                    //Cedula  = 1 Passaporte = 2 Rnc = 3
                    TipoIdentificacion = contactParameter.tipoCedula,
                    Vinculado = "NI",
                    TelefonoCelular = contactParameter.TelefonoCelular,
                    TelefonoResidencia = contactParameter.TelefonoCasa,
                    TelefonoOficina = contactParameter.TelefonoTrabajo,
                    TieneCasaPropia = ContactData.homeOwner.GetValueOrDefault() ? (short)1 : (short)0,
                    CorreoElectronico = contactParameter.Email
                };

                var ExportClientResult = oPolicyGlobalService.ksiExportClient(itemCliente);

                hasError = ErrorCode.Contains(ExportClientResult.Code) || !ExportClientResult.exportResult.OperationResult;

                if (hasError)
                {
                    result.Code = ExportClientResult.Code;
                    result.Message = ExportClientResult.Message;
                    return
                         result;
                }

                UniqueClientId = ExportClientResult.exportResult.UniqueClientId;

                //Actualizar el campo de UniqueId en la tabla de contact de global
                ContactData.KcoUniqueId = UniqueClientId;
                oContactManager.UpdateContact(ContactData);
            }

            #endregion

            GlobalServices.PolicyType PolicyType = GlobalServices.PolicyType.Vehicles;

            switch (ProductLine)
            {
                case Utility.ProductLine.Auto:
                    PolicyType = GlobalServices.PolicyType.Vehicles;
                    break;
                case Utility.ProductLine.AlliedLines:
                    PolicyType = GlobalServices.PolicyType.Property;
                    break;
            }

            GlobalServices.CardTypes cardType = GlobalServices.CardTypes.VISA;

            /*
                1	MasterCard
                2	American Express
                3	Visa
                4	Diners
                5	Discover
                6	Amex
             */

            switch (ContactData.CreditCardTypeId)
            {
                case 1:
                    cardType = GlobalServices.CardTypes.MASTERCARD;
                    break;
                case 2:
                    cardType = GlobalServices.CardTypes.AMERICANEXPRESS;
                    break;
                case 3:
                    cardType = GlobalServices.CardTypes.VISA;
                    break;
                case 4:
                    cardType = GlobalServices.CardTypes.DINERS;
                    break;
                case 5:
                    cardType = GlobalServices.CardTypes.DISCOVER;
                    break;
                case 6:
                    cardType = GlobalServices.CardTypes.AMEX;
                    break;
            }

            DateTime? ExpirationDate = null;

            var Month = ContactData.ExpirationDateMonth.GetValueOrDefault();
            var Year = ContactData.ExpirationDateYear.GetValueOrDefault();
            ExpirationDate = new DateTime(Year, Month, 1).Date;

            double Principal = GetPorcKCO();

            var annualPremium = (double)this.annualPremium.GetValueOrDefault();
            var PrincipalAmount = ((Principal / 100) * annualPremium);
            var FinancedAmount = annualPremium - PrincipalAmount;
            var loanType = (ProductLine == Utility.ProductLine.Auto) ? GlobalServices.LoanType.VehicleInsurance : GlobalServices.LoanType.HouseInsurance;

            var resultGetAmortizationTable = GetAmortizationTable(FinancedAmount,
                                                                  loanType,
                                                                  (short)Period.GetValueOrDefault(),
                                                                  Principal,
                                                                  annualPremium
                                                                  );

            var GastoDeCierre = resultGetAmortizationTable.productCalculatorResult.ExpendituresAmount;
            FinancedAmount = FinancedAmount + GastoDeCierre;

            var InitialPaymentDate = DateTime.Now;

            var isTest = System.Configuration.ConfigurationManager.AppSettings["isTestingQuotDebug"] == "true";

            var DateLoan = DateTime.Now;

            if (isTest)
                DateLoan = new DateTime(2017, 12, 27).Date;

            var itemLoan = new GlobalServices.PolicyksiLoanparameter
            {
                petition = new GlobalServices.LoanPetition
                {
                    ProductID = 0,
                    Date = DateLoan,
                    LoanAmount = annualPremium,
                    LoanTerm = (short)Period.GetValueOrDefault()
                },
                PolicyDetails = new GlobalServices.Policy1
                {
                    PolicyNumber = PolicyNo,
                    ExpiryDate = PolicyData.ExpirationDate.GetValueOrDefault(),
                    Premium = annualPremium, //Antes era el Monthly Payment
                    PolicyType = PolicyType,
                    DateIssued = PolicyData.PolicyEffectiveDate.GetValueOrDefault(),
                    InitialPaymentDate = InitialPaymentDate,
                    Coverage = 0
                },
                Domiciliation = new GlobalServices.DomiciliationDetails
                {
                    CardHolder = ContactData.CardHolder,
                    CardNumber = Utility.Decrypt_Query(ContactData.CreditCardNumber),
                    CardType = cardType,
                    CVV = string.Empty,
                    ExpirationDate = ExpirationDate.GetValueOrDefault(),
                    Principal = PrincipalAmount
                },
                UniqueAgentId = UniqueAgentId,
                UniqueClientId = UniqueClientId
            };

            var CreateLoanResult = oPolicyGlobalService.ksiCreateLoan(itemLoan);

            hasError = ErrorCode.Contains(CreateLoanResult.Code) || !CreateLoanResult.exportResult.OperationResult;

            if (hasError)
            {
                result.Code = CreateLoanResult.Code;
                result.Message = CreateLoanResult.Message;
                return
                     result;
            }

            result.Code = CreateLoanResult.Code;
            result.Message = CreateLoanResult.Message;
            result.LoanNo = CreateLoanResult.exportResult.LoanAccount;

            return
                result;
        }

        /// <summary>
        /// Retorna el porciento de pago inicial en KCO
        /// </summary>
        /// <returns></returns>
        public double GetPorcKCO()
        {
            double Principal = 20;
            var dataPrincipal = this.dataConfig.FirstOrDefault(i => i.Namekey == "PorcKCO");
            if (dataPrincipal != null)
                Principal = dataPrincipal.ConfigurationValue.ToDouble();

            return
                 Principal;
        }

        /// <summary>
        /// Generar la Cotizacion de Property
        /// </summary>
        /// <param name="policy"></param>
        /// <param name="ServerMapPath"></param>
        /// <param name="UniqueID"></param>
        /// <param name="templateType"></param>
        /// <returns></returns>
        public byte[] GenerateXMLInspeccionRiesgoToThuderhead(Property.Key policy, string ServerMapPath, long? UniqueID = null)
        {
            byte[] result = null;

            #region Consultas Varias

            var Email = string.Empty;

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(policy.CorpId,
                                                      policy.RegionId,
                                                      policy.CountryId,
                                                      policy.DomesticregId,
                                                      policy.StateProvId,
                                                      policy.CityId,
                                                      policy.OfficeId,
                                                      policy.CaseSeqNo,
                                                      policy.HistSeqNo);

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(policy.CorpId, PolicyData.ContactId, Language.ToInt());

            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager
                        .GetCommunicatonEmail(Corp_Id, ContactData.ContactId, Language.ToInt());

            var EmailResult = DataEmail
                             .FirstOrDefault(x => x.IsPrimary);

            if (EmailResult == null)
                EmailResult = DataEmail.FirstOrDefault();

            if (EmailResult != null)
                Email = EmailResult.EmailAdress;

            //Direccion del Contacto
            var oAddress = oContactManager
                          .GetCommunicatonAdress(policy.CorpId, ContactData.ContactId, Language.ToInt())
                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? oAddress.StreetAddress : "-";

            //Telefonos del contacto
            var oPhones = oContactManager
                          .GetCommunicatonPhone(policy.CorpId, ContactData.ContactId, Language.ToInt());

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var RecordId = dataId.FirstOrDefault();
            var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

            var PhoneNumber = dataPhonePrimary != null ?
                              string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                              : default(string);
            #endregion

            var oDataSet = new RiskInspection.Thunderhead.Dataset();
            var oTransaction = new RiskInspection.Thunderhead.Transaction();
            oTransaction.DocumentId = ConfigurationManager.AppSettings[Country == Utility.Country.RepublicaDominicana ? "DocumentIDInspeccionRiesgoRD"
                                                                                                                      : "DocumentIDInspeccionRiesgoSV"];

            var oPolicyInfo = new RiskInspection.Thunderhead.PolicyInfo();
            oPolicyInfo.FullName = ContactData.FullName;
            oPolicyInfo.NoPoliza = PolicyData.PolicyNo;
            oPolicyInfo.AgenteComercial = PolicyData.Agent_Name;

            var oCoverages = new List<RiskInspection.Thunderhead.Coverages>() { };
            var oElementoAsegurado = new List<RiskInspection.Thunderhead.ElementoAsegurado>() { };
            var oCotizacionFire = new List<RiskInspection.Thunderhead.CotizacionFire>() { };
            var oCliente = new RiskInspection.Thunderhead.Cliente();
            var oDescripcion = new List<RiskInspection.Thunderhead.Descripcion>() { };
            var oNivel = new RiskInspection.Thunderhead.Nivel();
            var oPerdida = new RiskInspection.Thunderhead.Perdida();
            var oPeligro = new List<RiskInspection.Thunderhead.Peligro>() { };
            var oProteccion = new List<RiskInspection.Thunderhead.Proteccion>() { };
            var oExposures = new List<RiskInspection.Thunderhead.Exposures>() { };
            var oInspeccion = new RiskInspection.Thunderhead.Inspeccion();
            var oPropiedad = new List<RiskInspection.Thunderhead.Propiedad>() { };

            #region InspectorName
            string Inspector = string.Empty;
            int? InspectorAgentId = null;
            var quoTemp = oPolicyManager.GetQuotationInfoTemp(new Policy.Quo.Temp
            {
                PolicyNo = PolicyData.PolicyNo
            });
            if (quoTemp != null)
            {
                var data = quoTemp.FirstOrDefault();
                Inspector = data.InspectorName;
                InspectorAgentId = data.InspectorAgentId;
            }
            #endregion

            #region Property
            var dataProperty = oPropertyManager.GetProperty(new Entity.UnderWriting.Entities.Property.Key
            {
                CorpId = policy.CorpId,
                RegionId = policy.RegionId,
                CountryId = policy.CountryId,
                DomesticregId = policy.DomesticregId,
                StateProvId = policy.StateProvId,
                CityId = policy.CityId,
                OfficeId = policy.OfficeId,
                CaseSeqNo = policy.CaseSeqNo,
                HistSeqNo = policy.HistSeqNo
            });

            if (dataProperty != null && dataProperty.Count() > 0)
            {
                #region strings
                string FechaInspeccion = string.Empty,
                       PropiedadDireccion = string.Empty,
                       DescripcionRiesgo = string.Empty,
                       Tipo = string.Empty,
                       Entrevistador = string.Empty,
                       EdadConstrucccion = string.Empty,
                       MovimientoComercial = string.Empty,
                       OrganizacionContable = string.Empty,
                       NoEmpleados = string.Empty,
                       Horario = string.Empty,
                       FormaDeOcupacion = string.Empty,
                       AseguradoraAnterior = string.Empty,
                       SumasAseguradasEdificio = string.Empty,
                       SumasAseguradasMobiliarios = string.Empty,
                       SumasAseguradasMaquinarias = string.Empty,
                       SumasAseguradasExistencia = string.Empty,
                       DescripcionTipoEdificio = string.Empty,
                       DescripcionTipoEdificioOtro = string.Empty,
                       DescripcionTipoEdificacion = string.Empty,
                       DescripcionTipoEdificacionOtra = string.Empty,
                       DescripcionTipoMobiliarios = string.Empty,
                       DescripcionTipoMaquinarias = string.Empty,
                       DescripcionTipoExistencias = string.Empty,
                       AnoDeConstruccion = string.Empty,
                       CantidadPisos = string.Empty,
                       AreaPorPiso = string.Empty,
                       CantidadLocales = string.Empty,
                       AreaPorAptOficina = string.Empty,
                       PerdidaTiene = string.Empty,
                       PerdidaNivel = string.Empty,
                       PerdidaTipo = string.Empty,
                       PerdidaOtros = string.Empty,
                       NiveldeSiniestroEnZona = string.Empty,
                       SiniestralidadDesc = string.Empty,
                       ColindanciaNorte = string.Empty,
                       ColindanciaSur = string.Empty,
                       ColindanciaEste = string.Empty,
                       ColindanciaOeste = string.Empty,
                       Street = string.Empty,
                       Sector = string.Empty,
                       Municipio = string.Empty,
                       Provincia = string.Empty,
                       Departamento = string.Empty,
                       Longitud = string.Empty,
                       Latitud = string.Empty,
                       DescripcionProcesos = string.Empty,
                       MPL = string.Empty,
                       EML = string.Empty,
                       CategoriaRiesgo = string.Empty,
                       OpinionRiesgo = string.Empty,
                       RecomendacionesTecnicas = string.Empty,
                       RecomendacionesHechasEnviadasAsegurado = string.Empty;
                #endregion

                TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

                foreach (var dp in dataProperty)
                {
                    #region Inspeccion
                    var getReview = oAlliedLinesReviewManager.GetAlliedLineReview(new AlliedLines.Review.Parameters.Get
                    {
                        CorpId = policy.CorpId,
                        RegionId = policy.RegionId,
                        CountryId = policy.CountryId,
                        DomesticregId = policy.DomesticregId,
                        StateProvId = policy.StateProvId,
                        CityId = policy.CityId,
                        OfficeId = policy.OfficeId,
                        CaseSeqNo = policy.CaseSeqNo,
                        HistSeqNo = policy.HistSeqNo,
                        AlliedLineId = dp.PropertyId,
                        UniqueAlliedLineId = dp.UniquePropertyId,
                        AlliedLineTypeId = Utility.AlliedLinesType.Property.ToInt(),
                        ReviewId = null,
                        BlTypeId = dp.BlTypeId,
                        BlId = dp.BlId,
                        ProductId = dp.ProductId
                    }).LastOrDefault();
                    if (getReview != null)
                    {
                        FechaInspeccion = getReview.InspectionDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                        PropiedadDireccion = getReview.InspectedLocation;
                        DescripcionRiesgo = getReview.RiskName;
                        Tipo = getReview.RiskType;

                        var getReviewDetail = oAlliedLinesReviewManager.GetAlliedLineReviewDetail(new AlliedLines.Review.Detail.Parameters.Get
                        {
                            CorpId = getReview.CorpId,
                            RegionId = getReview.RegionId,
                            CountryId = getReview.CountryId,
                            DomesticregId = getReview.DomesticregId,
                            StateProvId = getReview.StateProvId,
                            CityId = getReview.CityId,
                            OfficeId = getReview.OfficeId,
                            CaseSeqNo = getReview.CaseSeqNo,
                            HistSeqNo = getReview.HistSeqNo,
                            AlliedLineId = getReview.PropertyId.GetValueOrDefault(),
                            UniqueAlliedLineId = getReview.UniqueAlliedLineId,
                            AlliedLineTypeId = getReview.AlliedLineTypeId,
                            ReviewId = getReview.ReviewId,
                            ReviewGroupId = null,
                            ReviewGroupEndorsementClarifying = null,
                            ReviewOptionEndorsementClarifying = null
                        });
                        if (getReviewDetail != null)
                        {
                            string _descripcion = string.Empty,
                                   _eml = string.Empty,
                                   _exposure = string.Empty,
                                   _mpl = string.Empty,
                                   vdescripcion = string.Empty,
                                   vcantidad = string.Empty,
                                   vhorario = string.Empty,
                                   vvalor = string.Empty,
                                   peligoDescripcion = string.Empty,
                                   peligoValor = string.Empty,
                                   peligoComentario = string.Empty,
                                   pdescripcion = string.Empty,
                                   pcomentario = string.Empty,
                                   pvalor = string.Empty;

                            foreach (var detail in getReviewDetail)
                            {
                                #region DatosGenerales
                                if (detail.ReviewGroupId == 9)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 2: oCliente.DUI = detail.ValueText; break;
                                        case 3: Entrevistador = detail.ValueText; break;
                                        case 4: EdadConstrucccion = detail.ValueText; break;
                                        case 5: MovimientoComercial = detail.ReviewItemDesc; break;
                                        case 6:
                                            string organizacionContable = Utility.ReplaceVowels(detail.ReviewItemDesc.ToLower());
                                            OrganizacionContable = organizacionContable.ToLower() == "si" ? "Yes" : "No";
                                            break;
                                        case 7: NoEmpleados = detail.ValueText; break;
                                        case 8: Horario = detail.ValueText; break;
                                        case 9: FormaDeOcupacion = detail.ReviewItemDesc; break;
                                        case 10: AseguradoraAnterior = detail.ValueText; break;
                                    }
                                #endregion

                                #region SumasAseguradas
                                if (detail.ReviewGroupId == 10 && detail.ReviewItemId == 1)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1: SumasAseguradasEdificio = detail.ValueText; break;
                                        case 2: SumasAseguradasMobiliarios = detail.ValueText; break;
                                        case 3: SumasAseguradasMaquinarias = detail.ValueText; break;
                                        case 4: SumasAseguradasExistencia = detail.ValueText; break;
                                    }
                                #endregion

                                #region Descripcion
                                if (detail.ReviewGroupId == 11)// && detail.ReviewItemId == 1)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1:
                                            string reviewItemDesc = Utility.ReplaceVowels(detail.ReviewItemDesc.ToLower()),
                                                descripcionTipoEdificio = reviewItemDesc.ToLower() == "fabrica/industria" ? "Industria" : detail.ReviewItemDesc;
                                            DescripcionTipoEdificio = textInfo.ToTitleCase(descripcionTipoEdificio);
                                            break;
                                        case 2:
                                            DescripcionTipoEdificioOtro = detail.ValueText;

                                            var tipedf = new string[]
                                            {
                                                Utility.InspeccionPropiedadTipoEdificio.Comercio.Code(),
                                                Utility.InspeccionPropiedadTipoEdificio.Fabrica.Code(),
                                                Utility.InspeccionPropiedadTipoEdificio.Industria.Code(),
                                                Utility.InspeccionPropiedadTipoEdificio.Oficina.Code(),
                                                Utility.InspeccionPropiedadTipoEdificio.PlazaComercial.Code(),
                                                Utility.InspeccionPropiedadTipoEdificio.Vivienda.Code()
                                            };

                                            if (DescripcionTipoEdificio.Trim().Length == 0 || !tipedf.Contains(DescripcionTipoEdificio))
                                                DescripcionTipoEdificio = DescripcionTipoEdificioOtro;

                                            break;
                                        case 3:
                                            if (detail.ReviewItemId == 1)
                                            {
                                                if (detail.ValueText == Utility.InspeccionPropiedadTipoConstruccion.PrimeraClase.Code())
                                                    DescripcionTipoEdificacion = Utility.InspeccionPropiedadTipoConstruccion.PrimeraClase.TipoEdificacion();

                                                if (detail.ValueText == Utility.InspeccionPropiedadTipoConstruccion.PrimeraClaseEspecial.Code())
                                                    DescripcionTipoEdificacion = Utility.InspeccionPropiedadTipoConstruccion.PrimeraClaseEspecial.TipoEdificacion();

                                                if (detail.ValueText == Utility.InspeccionPropiedadTipoConstruccion.SegundaClase.Code())
                                                    DescripcionTipoEdificacion = Utility.InspeccionPropiedadTipoConstruccion.SegundaClase.TipoEdificacion();

                                                if (detail.ValueText == Utility.InspeccionPropiedadTipoConstruccion.SegundaClaseEspecial.Code())
                                                    DescripcionTipoEdificacion = Utility.InspeccionPropiedadTipoConstruccion.SegundaClaseEspecial.TipoEdificacion();

                                                if (detail.ValueText == Utility.InspeccionPropiedadTipoConstruccion.TerceraClase.Code())
                                                    DescripcionTipoEdificacion = Utility.InspeccionPropiedadTipoConstruccion.TerceraClase.TipoEdificacion();

                                                if (detail.ValueText == Utility.InspeccionPropiedadTipoConstruccion.TerceraClaseEspecial.Code())
                                                    DescripcionTipoEdificacion = Utility.InspeccionPropiedadTipoConstruccion.TerceraClaseEspecial.TipoEdificacion();

                                                if (detail.ValueText == Utility.InspeccionPropiedadTipoConstruccion.Superior.Code())
                                                    DescripcionTipoEdificacion = Utility.InspeccionPropiedadTipoConstruccion.Superior.TipoEdificacion();

                                                if (string.IsNullOrWhiteSpace(DescripcionTipoEdificacion))
                                                    DescripcionTipoEdificacionOtra = DescripcionTipoEdificacion = detail.ValueText;
                                            }
                                            break;
                                        case 4: DescripcionTipoMobiliarios = detail.ValueText; break;
                                        case 5: DescripcionTipoMaquinarias = detail.ValueText; break;
                                        case 6: DescripcionTipoExistencias = detail.ValueText; break;
                                        case 7: AnoDeConstruccion = detail.ValueText; break;
                                        case 8: CantidadPisos = detail.ValueText; break;
                                        case 9: AreaPorPiso = detail.ValueText; break;
                                        case 10: CantidadLocales = detail.ValueText; break;
                                        case 11: AreaPorAptOficina = detail.ValueText; break;
                                    }
                                #endregion

                                #region HistorialPerdidas
                                if (detail.ReviewGroupId == 12)// && detail.ReviewItemId == 1)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1:
                                            string perdidaTiene = Utility.ReplaceVowels(detail.ReviewItemDesc.ToLower());
                                            PerdidaTiene = perdidaTiene.ToLower() == "si" ? "Yes" : "No";
                                            break;
                                        case 2: PerdidaNivel = detail.ReviewItemDesc; break;
                                        case 4:
                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.DanosMaliciosos.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.DanosMaliciosos.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.DanosPorAguaAccidental.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.DanosPorAguaAccidental.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.DanosPorAguaLluvia.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.DanosPorAguaLluvia.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.Explosion.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.Explosion.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.Huelga.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.Huelga.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.Huracan.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.Huracan.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.Incendio.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.Incendio.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.Inundacion.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.Inundacion.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.Motin.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.Motin.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.Rayo.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.Rayo.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.RoboConEscalamiento.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.RoboConEscalamiento.Code();

                                            if (detail.ReviewItemDesc == Utility.InspeccionPropiedadCausaPerdida.RoboConViolencia.DB())
                                                PerdidaTipo = Utility.InspeccionPropiedadCausaPerdida.RoboConViolencia.Code();

                                            if (string.IsNullOrWhiteSpace(PerdidaTipo))
                                                PerdidaTipo = detail.ReviewItemDesc;

                                            break;
                                        case 5: PerdidaOtros = detail.ValueText; break;
                                    }
                                #endregion

                                #region Siniestralidad
                                if (detail.ReviewGroupId == 13 && detail.ReviewItemId == 1)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1: NiveldeSiniestroEnZona = detail.ReviewItemDesc; break;
                                        case 2: SiniestralidadDesc = detail.ValueText; break;
                                    }
                                #endregion

                                #region Colindancias
                                if (detail.ReviewGroupId == 14 && detail.ReviewItemId == 1)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1: ColindanciaNorte = detail.ValueText; break;
                                        case 2: ColindanciaSur = detail.ValueText; break;
                                        case 3: ColindanciaEste = detail.ValueText; break;
                                        case 4: ColindanciaOeste = detail.ValueText; break;
                                    }
                                #endregion

                                #region LocalizacionRiesgo
                                if (detail.ReviewGroupId == 15 && detail.ReviewItemId == 1)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1: Street = detail.ValueText; break;
                                        case 2: Sector = detail.ValueText; break;
                                        case 3: Municipio = detail.ValueText; break;
                                        case 4:
                                            Provincia = detail.ValueText;
                                            Departamento = detail.ValueText;
                                            break;
                                        case 5: Longitud = detail.ValueText; break;
                                        case 6: Latitud = detail.ValueText; break;
                                    }
                                #endregion

                                #region DescripcionDeProcesos
                                if (detail.ReviewGroupId == 16 && detail.ReviewItemId == 1)
                                    if (detail.ReviewClassId == 1)
                                        DescripcionProcesos = detail.ValueText;
                                #endregion

                                #region DescripcionPeligros
                                if (detail.ReviewGroupId == 17)
                                {
                                    var Peligro = new RiskInspection.Thunderhead.Peligro();
                                    Peligro.Descripcion =
                                        Peligro.Comentario =
                                        Peligro.Valor = string.Empty;

                                    if (detail.ReviewClassId == 1)
                                    {
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2: pdescripcion = "Almacenamiento y uso de combustibles"; break;
                                            case 4: pvalor = detail.ReviewItemDesc; break;
                                            case 6: pcomentario = detail.ValueText; break;
                                        }

                                        if (!string.IsNullOrWhiteSpace(pdescripcion) &&
                                            !string.IsNullOrWhiteSpace(pcomentario) &&
                                            !string.IsNullOrWhiteSpace(pvalor))
                                        {
                                            Peligro.Descripcion = pdescripcion;
                                            Peligro.Valor = pvalor;
                                            Peligro.Comentario = pcomentario;

                                            pdescripcion = pvalor = pcomentario = string.Empty;
                                        }
                                    }

                                    if (detail.ReviewClassId == 2)
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2:
                                                Peligro.Descripcion = "¿La Edificación tiene carga combustible?";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 4:
                                                Peligro.Descripcion = "La edificacion tiene Carga"; //"¿Cómo es?";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                        }

                                    if (detail.ReviewClassId == 3)
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2:
                                                Peligro.Descripcion = "Subestación eléctrica";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 3:
                                                Peligro.Descripcion = "Subestacion Electrica";
                                                Peligro.Valor = detail.ValueText;
                                                break;
                                        }

                                    if (detail.ReviewClassId == 4)
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2:
                                                Peligro.Descripcion = "Generadores eléctricos";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 3:
                                                Peligro.Descripcion = "Generadores Electricos";//detail.ReviewItemDesc;
                                                Peligro.Valor = detail.ValueText;
                                                break;
                                        }

                                    if (detail.ReviewClassId == 5)
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2:
                                                Peligro.Descripcion = "Caldera";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 3:
                                                Peligro.Descripcion = "Calderas";//detail.ReviewItemDesc;
                                                Peligro.Valor = detail.ValueText;
                                                break;
                                        }

                                    if (detail.ReviewClassId == 6)
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2:
                                                Peligro.Descripcion = "Air Comprimido";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 3:
                                                Peligro.Descripcion = "Aire Comprimido";//detail.ReviewItemDesc;
                                                Peligro.Valor = detail.ValueText;
                                                break;
                                        }

                                    if (detail.ReviewClassId == 7)
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2:
                                                Peligro.Descripcion = "Pasillo Libre";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 3:
                                                Peligro.Descripcion = "Pasillos Libres";//detail.ReviewItemDesc;
                                                Peligro.Valor = detail.ValueText;
                                                break;
                                        }

                                    if (detail.ReviewClassId == 8)
                                        switch (detail.ReviewItemId)
                                        {
                                            case 2:
                                                Peligro.Descripcion = "Fluido inflamable";
                                                Peligro.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 3:
                                                Peligro.Descripcion = "Fluidos Inflamables";//detail.ReviewItemDesc;
                                                Peligro.Valor = detail.ValueText;
                                                break;
                                        }

                                    if (detail.ReviewClassId == 9)
                                    {
                                        peligoDescripcion = "Orden y Limpieza dentro del Riesgo";//"Orden y Limpieza Dentro del riesgo";//detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 2)
                                            peligoValor = detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 4)
                                            peligoComentario = detail.ValueText;
                                    }

                                    if (detail.ReviewClassId == 10)
                                    {
                                        peligoDescripcion = "Orden y Limpieza Fuera del Riesgo";//"Orden y Limpieza Fuera del riesgo";//detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 2)
                                            peligoValor = detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 4)
                                            peligoComentario = detail.ValueText;
                                    }

                                    if (detail.ReviewClassId == 11)
                                    {
                                        peligoDescripcion = "Orden y Limpieza en General";//"Orden y Limpieza en general";//detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 2)
                                            peligoValor = detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 4)
                                            peligoComentario = detail.ValueText;
                                    }

                                    if (detail.ReviewClassId == 12)
                                    {
                                        peligoDescripcion = "Instalaciones Electricas";//"Instalaciones eléctricas";//detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 2)
                                            peligoValor = detail.ReviewItemDesc;

                                        if (detail.ReviewItemId == 4)
                                            peligoComentario = detail.ValueText;
                                    }

                                    if ((detail.ReviewClassId == 9) || (detail.ReviewClassId == 10) || (detail.ReviewClassId == 11) || (detail.ReviewClassId == 12))
                                    {
                                        if ((!string.IsNullOrWhiteSpace(peligoDescripcion)) &&
                                            (!string.IsNullOrWhiteSpace(peligoValor)) &&
                                            (!string.IsNullOrWhiteSpace(peligoComentario)))
                                        {
                                            Peligro.Descripcion = peligoDescripcion;
                                            Peligro.Valor = peligoValor;
                                            Peligro.Comentario = peligoComentario;

                                            peligoDescripcion =
                                                peligoValor =
                                                peligoComentario = string.Empty;
                                        }
                                    }

                                    if (detail.ReviewClassId == 13 && detail.ReviewItemId == 1)
                                    {
                                        Peligro.Descripcion = "Otros peligros observados"; //detail.ReviewItemDesc;
                                        Peligro.Valor = detail.ValueText;
                                    }

                                    if (!string.IsNullOrWhiteSpace(Peligro.Descripcion) &&
                                            (
                                                !string.IsNullOrWhiteSpace(Peligro.Comentario) ||
                                                !string.IsNullOrWhiteSpace(Peligro.Valor)
                                            )
                                       )
                                        oPeligro.Add(Peligro);
                                }
                                #endregion

                                #region PrevencionProteccion
                                if (detail.ReviewGroupId == 18)
                                {
                                    var proteccion = new RiskInspection.Thunderhead.Proteccion();
                                    proteccion.Cantidad =
                                        proteccion.Horario =
                                        proteccion.Descripcion =
                                    proteccion.Valor = string.Empty;

                                    if (detail.ReviewItemId == 1)
                                        switch (detail.ReviewClassId)
                                        {
                                            case 2:
                                                proteccion.Descripcion = "Cantidad de extintores";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 5:
                                                proteccion.Descripcion = "Bombas de Agua contra Incendio";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 8:
                                                proteccion.Descripcion = "Toma de Agua para Bomberos";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 11:
                                                proteccion.Descripcion = "Brigada contra Incendios";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 14:
                                                proteccion.Descripcion = "Sistema contra Incendios";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 17:
                                                proteccion.Descripcion = "Sistema de Alarmas";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 19:
                                                proteccion.Descripcion = "Servicio de Monitoreo";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 21:
                                                proteccion.Descripcion = "Caja de Seguridad";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 23:
                                                proteccion.Descripcion = "Rejas en ventanas y/o puertas";//"Tipo de Ventanas";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 25:
                                                proteccion.Descripcion = "Pulsadores Manuales";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 33:
                                                proteccion.Descripcion = "Cantidad galones";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ValueText;
                                                break;
                                            case 37:
                                                proteccion.Descripcion = "Distancia del Mar";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                            case 39:
                                                proteccion.Descripcion = "Distancia de otras fuentes de agua";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                            case 41:
                                                proteccion.Descripcion = "Distancia Bomberos";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                            case 42:
                                                proteccion.Descripcion = "Distancia P. N.";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                        }

                                    if (detail.ReviewItemId == 2)
                                        switch (detail.ReviewClassId)
                                        {
                                            case 1:
                                                proteccion.Descripcion = "Mangueras contra incendios";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 3:
                                                proteccion.Descripcion = "Señales de Emergencias";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 6:
                                                proteccion.Descripcion = "Pararrayos";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 9:
                                                proteccion.Descripcion = "Rociadores automáticos";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 12:
                                                proteccion.Descripcion = "Escaleras de emergencias";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 13:
                                                proteccion.Descripcion = "Sistema contra incendio";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 15:
                                                proteccion.Descripcion = "Puertas enrollables";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 26:
                                                proteccion.Descripcion = "Mantenimiento preventivo";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 28:
                                                proteccion.Descripcion = "Almacenamiento";//detail.ReviewClassDesc;
                                                proteccion.Valor = detail.ReviewItemDesc;
                                                break;
                                            case 29:
                                                proteccion.Descripcion = "Alimentacion Electrica";//detail.ReviewClassDesc;
                                                proteccion.Valor = Utility.ReplaceVowels(detail.ReviewItemDesc);
                                                break;
                                            case 37:
                                                proteccion.Descripcion = "Distancia del Mar";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                            case 39:
                                                proteccion.Descripcion = "Distancia de otras fuentes de agua";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                            case 41:
                                                proteccion.Descripcion = "Distancia Bomberos";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                            case 42:
                                                proteccion.Descripcion = "Distancia P. N.";//detail.ReviewClassDesc;
                                                proteccion.Valor = proteccion.Cantidad = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                                break;
                                        }

                                    #region Tipo Suministracion de Agua
                                    if (detail.ReviewItemId == 2 &&
                                        detail.ReviewClassId == 30)
                                    {
                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;

                                        vvalor = Utility.ReplaceVowels(detail.ReviewItemDesc);
                                        vdescripcion = "Tipo Suministracion de Agua";// detail.ReviewClassDesc;
                                    }

                                    if (detail.ReviewItemId == 1 &&
                                        detail.ReviewClassId == 31)
                                        vcantidad = detail.ValueText;

                                    if (!string.IsNullOrWhiteSpace(vdescripcion) &&
                                        !string.IsNullOrWhiteSpace(vcantidad) &&
                                        !string.IsNullOrWhiteSpace(vvalor))
                                    {
                                        proteccion.Cantidad = vcantidad;
                                        proteccion.Descripcion = vdescripcion;
                                        proteccion.Horario = vhorario;
                                        proteccion.Valor = vvalor;

                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;
                                    }
                                    #endregion

                                    #region Distancia del Mar
                                    if (detail.ReviewItemId == 1 &&
                                        detail.ReviewClassId == 37)
                                    {
                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;

                                        vvalor = detail.ReviewItemDesc == "< de 500 metros" ? "499" : "501";
                                        vdescripcion = "Distancia del Mar";// detail.ReviewClassDesc;
                                    }

                                    if (detail.ReviewItemId == 1 &&
                                        detail.ReviewClassId == 38)
                                        vcantidad = detail.ValueText;

                                    if (!string.IsNullOrWhiteSpace(vdescripcion) &&
                                        !string.IsNullOrWhiteSpace(vcantidad) &&
                                        !string.IsNullOrWhiteSpace(vvalor))
                                    {
                                        proteccion.Cantidad = vcantidad;
                                        proteccion.Descripcion = vdescripcion;
                                        proteccion.Horario = vhorario;
                                        proteccion.Valor = vvalor;

                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;
                                    }
                                    #endregion

                                    #region Distancia de Otras Fuentes de Agua
                                    if (detail.ReviewItemId == 2 &&
                                       detail.ReviewClassId == 39)
                                    {
                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;

                                        vvalor = detail.ReviewItemDesc == "> de 500 metros" ? "501" : "499";
                                        vdescripcion = "Distancia de Otras Fuentes de Agua";// detail.ReviewClassDesc;
                                    }

                                    if (detail.ReviewItemId == 1 &&
                                        detail.ReviewClassId == 40)
                                        vcantidad = detail.ValueText;

                                    if (!string.IsNullOrWhiteSpace(vdescripcion) &&
                                        !string.IsNullOrWhiteSpace(vcantidad) &&
                                        !string.IsNullOrWhiteSpace(vvalor))
                                    {
                                        proteccion.Cantidad = vcantidad;
                                        proteccion.Descripcion = vdescripcion;
                                        proteccion.Horario = vhorario;
                                        proteccion.Valor = vvalor;

                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;
                                    }
                                    #endregion

                                    #region Tipo Almacenamiento de agua
                                    if (detail.ReviewItemId == 2 &&
                                        detail.ReviewClassId == 32)
                                    {
                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;

                                        vdescripcion = detail.ReviewClassDesc;
                                        vvalor = detail.ReviewItemDesc;
                                    }

                                    if (detail.ReviewItemId == 1 &&
                                        detail.ReviewClassId == 33)
                                        vcantidad = detail.ValueText;

                                    if (!string.IsNullOrWhiteSpace(vdescripcion) &&
                                        !string.IsNullOrWhiteSpace(vcantidad) &&
                                        !string.IsNullOrWhiteSpace(vvalor))
                                    {
                                        proteccion.Cantidad = vcantidad;
                                        proteccion.Descripcion = vdescripcion;
                                        proteccion.Horario = vhorario;
                                        proteccion.Valor = vvalor;

                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;
                                    }
                                    #endregion

                                    #region Vigilantes
                                    if (detail.ReviewItemId == 2 &&
                                        detail.ReviewClassId == 34)
                                    {
                                        vcantidad = vdescripcion = vhorario = vvalor = string.Empty;

                                        vdescripcion = detail.ReviewClassDesc;
                                    }

                                    if (detail.ReviewItemId == 1 &&
                                        detail.ReviewClassId == 35)
                                        vcantidad = detail.ValueText;


                                    if (detail.ReviewItemId == 1 &&
                                        detail.ReviewClassId == 36)
                                        vhorario = detail.ValueText;

                                    if (!string.IsNullOrWhiteSpace(vdescripcion) &&
                                        !string.IsNullOrWhiteSpace(vcantidad) &&
                                        !string.IsNullOrWhiteSpace(vhorario))
                                    {
                                        proteccion.Cantidad = vcantidad;
                                        proteccion.Descripcion = vdescripcion;
                                        proteccion.Horario = vhorario;
                                        proteccion.Valor = vvalor;

                                        vcantidad = vdescripcion = vhorario = string.Empty;
                                    }
                                    #endregion

                                    if (!string.IsNullOrWhiteSpace(proteccion.Descripcion) &&
                                        !string.IsNullOrWhiteSpace(proteccion.Valor) ||
                                            (
                                                !string.IsNullOrWhiteSpace(proteccion.Cantidad) ||
                                                !string.IsNullOrWhiteSpace(proteccion.Horario)
                                            )
                                        )
                                        oProteccion.Add(proteccion);
                                }
                                #endregion

                                #region EstimacionPerdidasCoberturaIncendio
                                if (detail.ReviewGroupId == 19)
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1: MPL = detail.ValueText; break;
                                        case 2: EML = detail.ValueText; break;
                                    }
                                #endregion

                                #region ExposicionRiesgos
                                if (detail.ReviewGroupId == 20)
                                {
                                    switch (detail.ReviewClassId)
                                    {
                                        case 1:
                                        case 4:
                                        case 7:
                                        case 10:
                                        case 13:
                                        case 16:
                                            _exposure = detail.ValueText;
                                            break;

                                        case 2:
                                        case 5:
                                        case 8:
                                        case 11:
                                        case 14:
                                        case 17:
                                            _mpl = detail.ValueText;
                                            break;

                                        case 3:
                                        case 6:
                                        case 9:
                                        case 12:
                                        case 15:
                                        case 18:
                                            _eml = detail.ValueText;
                                            break;

                                    }

                                    if (!string.IsNullOrWhiteSpace(_exposure) &&
                                        !string.IsNullOrWhiteSpace(_mpl) &&
                                        !string.IsNullOrWhiteSpace(_eml))
                                    {
                                        _descripcion = detail.ReviewClassDesc.Split('-')[0];

                                        oExposures.Add(new RiskInspection.Thunderhead.Exposures
                                        {
                                            Descripcion = Utility.ReplaceVowels(_descripcion),
                                            EML = _eml,
                                            Exposure = _exposure,
                                            MPL = _mpl
                                        });

                                        _descripcion = _eml = _exposure = _mpl = string.Empty;
                                    }
                                }
                                #endregion

                                #region CategoriaRiesgo
                                if (detail.ReviewGroupId == 21 && detail.ReviewClassId == 1 && detail.ReviewItemId == 3)
                                {
                                    int categoriaRiesgo = Convert.ToInt32((Utility.InspeccionPropiedadCategoriaRiesgo)Enum.Parse(typeof(Utility.InspeccionPropiedadCategoriaRiesgo), detail.ReviewItemDesc));
                                    CategoriaRiesgo = categoriaRiesgo.ToString();
                                }
                                #endregion

                                #region OpinionRiesgo
                                if (detail.ReviewGroupId == 22 && detail.ReviewClassId == 1 && detail.ReviewItemId == 1)
                                    OpinionRiesgo = detail.ValueText;
                                #endregion

                                #region RecomendacionesTecnicas
                                if (detail.ReviewGroupId == 23 && detail.ReviewClassId == 1 && detail.ReviewItemId == 1)
                                    RecomendacionesTecnicas = detail.ValueText;
                                #endregion

                                #region RecomendacionesHechasEnviadasAsegurado
                                if (detail.ReviewGroupId == 24 && detail.ReviewClassId == 1 && detail.ReviewItemId == 1)
                                    RecomendacionesHechasEnviadasAsegurado = detail.ValueText;
                                #endregion
                            }
                        }
                    }
                    #endregion

                    var setPropiedad = new RiskInspection.Thunderhead.Propiedad();
                    setPropiedad.DescripcionRiesgo = DescripcionRiesgo;
                    setPropiedad.propiedad = PropiedadDireccion;
                    setPropiedad.Tipo = Tipo;
                    setPropiedad.Direccion = PropiedadDireccion;

                    oInspeccion.Inspector = !string.IsNullOrEmpty(Inspector) ? Inspector : "-";
                    oInspeccion.FechaInspeccion = FechaInspeccion;
                    oInspeccion.Entrevistador = Entrevistador;

                    setPropiedad.Inspeccion = oInspeccion;

                    setPropiedad.EdadConstrucccion = EdadConstrucccion;
                    setPropiedad.MovimientoComercial = MovimientoComercial;
                    setPropiedad.OrganizacionContable = OrganizacionContable;
                    setPropiedad.NoEmpleados = NoEmpleados;
                    setPropiedad.Horario = Horario;
                    setPropiedad.FormaDeOcupacion = FormaDeOcupacion;
                    setPropiedad.AseguradoraAnterior = AseguradoraAnterior;

                    var setCotizacionFire = new RiskInspection.Thunderhead.CotizacionFire();
                    setCotizacionFire.ElementoAsegurado = new List<RiskInspection.Thunderhead.ElementoAsegurado>();

                    #region Sumas Aseguradas
                    var setElementoAsegurado = new RiskInspection.Thunderhead.ElementoAsegurado();

                    setElementoAsegurado.Descripcion = "Edificio";
                    setElementoAsegurado.Valor = SumasAseguradasEdificio.Replace(",", "");
                    //setElementoAsegurado.Valor = dp.EdificationValue.ToFormatNumeric().Replace(",", "");
                    setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                    setElementoAsegurado = new RiskInspection.Thunderhead.ElementoAsegurado();

                    setElementoAsegurado.Descripcion = "Mobiliarios";
                    setElementoAsegurado.Valor = SumasAseguradasMobiliarios.Replace(",", ""); ;
                    setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                    setElementoAsegurado = new RiskInspection.Thunderhead.ElementoAsegurado();

                    setElementoAsegurado.Descripcion = "Maquinarias";
                    setElementoAsegurado.Valor = SumasAseguradasMaquinarias.Replace(",", ""); ;
                    setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                    setElementoAsegurado = new RiskInspection.Thunderhead.ElementoAsegurado();

                    setElementoAsegurado.Descripcion = "Existencia";
                    setElementoAsegurado.Valor = SumasAseguradasExistencia.Replace(",", ""); ;
                    setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);
                    #endregion

                    #region Descripcion
                    setPropiedad.TipoEdificio = DescripcionTipoEdificio;
                    setPropiedad.TipoEdificioOtro = DescripcionTipoEdificioOtro;

                    setPropiedad.TipoEdificacion = DescripcionTipoEdificacion;
                    setPropiedad.TipoEdificacionOtra = DescripcionTipoEdificacionOtra;

                    var setDescripcion = new RiskInspection.Thunderhead.Descripcion();
                    setDescripcion.Tipo = "Mobiliarios";
                    setDescripcion.Detalle = DescripcionTipoMobiliarios;
                    oDescripcion.Add(setDescripcion);

                    setDescripcion = new RiskInspection.Thunderhead.Descripcion();
                    setDescripcion.Tipo = "Maquinarias";
                    setDescripcion.Detalle = DescripcionTipoMaquinarias;
                    oDescripcion.Add(setDescripcion);

                    setDescripcion = new RiskInspection.Thunderhead.Descripcion();
                    setDescripcion.Tipo = "Existencias";
                    setDescripcion.Detalle = DescripcionTipoExistencias;
                    oDescripcion.Add(setDescripcion);

                    setPropiedad.Descripcion = oDescripcion;
                    if (!string.IsNullOrWhiteSpace(AnoDeConstruccion.NTrim()))
                    {
                        setPropiedad.FechaDeConstruccion = new DateTime(AnoDeConstruccion.ToInt(), 1, 1).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        setPropiedad.FechaDeConstruccion = "-";
                    }
                    setPropiedad.CantidadDeNiveles = CantidadPisos;

                    oNivel.AreaPorPiso = AreaPorPiso;
                    oNivel.CantidadLocales = CantidadLocales;
                    oNivel.AreaPorAptOficina = AreaPorAptOficina;

                    setPropiedad.Nivel = oNivel;
                    #endregion

                    #region Historial de Perdidas
                    oPerdida.Tiene = PerdidaTiene;
                    oPerdida.Nivel = PerdidaNivel;
                    oPerdida.Tipo = PerdidaTipo;
                    oPerdida.Otros = PerdidaOtros;

                    setPropiedad.Perdida = oPerdida;
                    #endregion

                    #region Siniestralidad
                    setPropiedad.NiveldeSiniestroEnZona = NiveldeSiniestroEnZona;
                    setPropiedad.SiniestralidadDesc = SiniestralidadDesc;
                    #endregion

                    #region Colindancias
                    setCotizacionFire.ColindanciaNorte = ColindanciaNorte;
                    setCotizacionFire.ColindanciaSur = ColindanciaSur;
                    setCotizacionFire.ColindanciaEste = ColindanciaEste;
                    setCotizacionFire.ColindanciaOeste = ColindanciaOeste;
                    #endregion

                    #region Localizacion del Riesgo
                    setPropiedad.Street = Street;
                    setPropiedad.Sector = Sector;
                    setPropiedad.Municipio = Municipio;
                    setPropiedad.Provincia = Provincia;
                    setPropiedad.Departamento = Departamento;
                    setPropiedad.Longitud = Longitud.Trim().Length > 0 ? Longitud : "0";
                    setPropiedad.Latitud = Latitud.Trim().Length > 0 ? Latitud : "0"; ;
                    #endregion

                    #region Descripcion de los Procesos
                    setPropiedad.Texto = DescripcionProcesos;
                    #endregion

                    #region Descripcion de los Peligros
                    setPropiedad.Peligro = oPeligro;
                    #endregion

                    #region Prevencion y Proteccion
                    setPropiedad.Proteccion = oProteccion.GroupBy(p => new
                    {
                        p.Descripcion,
                        p.Valor
                    }).Select(grp => grp.First()).ToList();
                    #endregion

                    #region Estimación de Pérdidas para la Cobertura de Incendio
                    var setCoverage = new RiskInspection.Thunderhead.Coverages();
                    setCoverage.Code = "MPL";
                    setCoverage.Description = "Pérdida Máxima Posible (Maximum Posible Loss)";
                    setCoverage.Limit = MPL;
                    setCoverage.Percentage = "0";
                    oCoverages.Add(setCoverage);

                    setCoverage = new RiskInspection.Thunderhead.Coverages();
                    setCoverage.Code = "EML";
                    setCoverage.Description = "Pérdida Máxima Estimada (Estimated Maximum Loss)";
                    setCoverage.Limit = EML;
                    setCoverage.Percentage = "0";
                    oCoverages.Add(setCoverage);
                    #endregion

                    #region Exposición a Riesgos
                    setPropiedad.Exposures = oExposures;
                    #endregion

                    #region Categoría del Riesgo
                    setPropiedad.Categoria = CategoriaRiesgo;
                    #endregion

                    #region Opinión del Riesgo
                    setPropiedad.OpinionRiesgo = OpinionRiesgo;
                    #endregion

                    #region Recomendaciones Técnicas
                    setPropiedad.RecomendacionesTecnicas = RecomendacionesTecnicas;
                    #endregion

                    #region Recomendaciones Hechas y Enviadas al Asegurado
                    setPropiedad.RecomendacionesHechas = RecomendacionesHechasEnviadasAsegurado;
                    #endregion

                    oPropiedad.Add(setPropiedad);
                    oCotizacionFire.Add(setCotizacionFire);
                }
            }

            oDataSet.Transaction = oTransaction;
            oDataSet.PolicyInfo = oPolicyInfo;
            oDataSet.Coverages = oCoverages;
            oDataSet.CotizacionFire = oCotizacionFire;
            oDataSet.Cliente = oCliente;
            oDataSet.Propiedad = oPropiedad;
            #endregion

            var DocXML = SerializeToXMLString(oDataSet);

            result = UTF8Encoding.UTF8.GetBytes(DocXML);

            return
                result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="user"></param>
        /// <param name="pass"></param>
        /// <param name="DefaultPass"></param>
        /// <returns></returns>
        public TransunionServiceClient TransunionServiceLogIn(string user, string pass, string DefaultPass)
        {
            UserNamePasswordEncrypting en;
            TransunionServiceClient client;

            client = new TransunionServiceClient();

            en = Encrypting.UserNamePasswordEncrypt(user, pass, DefaultPass);

            user = en.UserName;
            pass = en.Password;

            client.ClientCredentials.UserName.UserName = user;
            client.ClientCredentials.UserName.Password = pass;

            return
                client;
        }

        public EquifaxService.EquifaxServiceClient EquifaxServiceLogIn(string user, string pass, string DefaultPass)
        {
            UserNamePasswordEncrypting en;
            EquifaxService.EquifaxServiceClient client;

            client = new EquifaxService.EquifaxServiceClient();

            UserNamePasswordEncrypting SecurityAgent = Encrypting.UserNamePasswordEncrypt("vbarrera", "vbarrera", "E500D0");

            client.ClientCredentials.UserName.UserName = SecurityAgent.UserName;
            client.ClientCredentials.UserName.Password = SecurityAgent.Password;

            return
                client;
        }

        #region Illustration Methods
        public bool SetCustomerDetailToIllusdata(int corpId, int contactId, int companyId, long? customerNo = null, bool saveAllInformation = true, Control control = null)
        {
            ServicesApi.ContactService.ReturnMessageData returnMessageData = new ServicesApi.ContactService.ReturnMessageData();
            if (saveAllInformation)
                if (customerNo.GetValueOrDefault() <= 0)
                    returnMessageData = oContactServicesClient.SetContactAllInformation(Utility.Encrypt(corpId), Utility.Encrypt(contactId), Utility.Encrypt(companyId));
                else
                    returnMessageData = oContactServicesClient.SetContactAllInformationWithCustomerNo(Utility.Encrypt(corpId), Utility.Encrypt(contactId), Utility.Encrypt(companyId), Utility.Encrypt(customerNo));
            else
                if (customerNo.GetValueOrDefault() <= 0)
                returnMessageData = oContactServicesClient.SetContactInformation(Utility.Encrypt(corpId), Utility.Encrypt(contactId), Utility.Encrypt(companyId));
            else
                returnMessageData = oContactServicesClient.SetContactInformationWithCustomerNo(Utility.Encrypt(corpId), Utility.Encrypt(contactId), Utility.Encrypt(companyId), Utility.Encrypt(customerNo));

            if (returnMessageData.Status == ServicesApi.ContactService.ReturnMessageData.StatusProcess.Error)
            {
                var sb = new StringBuilder();
                returnMessageData.ListMessage.ToList().ForEach(o => sb.AppendLine(o));
                control.MessageBox(sb.ToString().RemoveInvalidCharacters());
            }

            return returnMessageData.Status == ServicesApi.ContactService.ReturnMessageData.StatusProcess.Success;
        }

        public bool SetIllustrationToGlobal(
            long customerPlanNo,
            int corpId,
            int regionId,
            int countryId,
            int domesticregId,
            int stateProvId,
            int cityId,
            int officeId,
            int userId,
            int companyId,
            int projectId, Control control = null)
        {
            ServicesApi.PolicyIllustrationService.ReturnMessageData returnMessageData = new ServicesApi.PolicyIllustrationService.ReturnMessageData();

            var service = new ServicesApi.PolicyIllustrationService.PolicyIllustrationServiceClient();
            returnMessageData = service
                .SetPolicyInformation(
                                        Utility.Encrypt(customerPlanNo),
                                        Utility.Encrypt(corpId),
                                        Utility.Encrypt(regionId),
                                        Utility.Encrypt(countryId),
                                        Utility.Encrypt(domesticregId),
                                        Utility.Encrypt(stateProvId),
                                        Utility.Encrypt(cityId),
                                        Utility.Encrypt(officeId),
                                        Utility.Encrypt(userId),
                                        Utility.Encrypt(companyId),
                                        Utility.Encrypt(projectId)
                                     );

            if (returnMessageData.Status == ServicesApi.PolicyIllustrationService.ReturnMessageData.StatusProcess.Error)
            {
                var sb = new StringBuilder();
                returnMessageData.ListMessage.ToList().ForEach(o => sb.AppendLine(o));
                //TODO: Descomentar cuando los productos de Statetrustlife esten activos.
                //control.MessageBox(sb.ToString().RemoveInvalidCharacters());
            }

            return returnMessageData.Status == ServicesApi.PolicyIllustrationService.ReturnMessageData.StatusProcess.Success;
        }

        public bool CanChangeStatus(string illustrationStatusCode)
        {
            return !new[] {
                    Utility.IllustrationStatus.ApprovedBySubscription.Code(),
                    Utility.IllustrationStatus.Issued.Code(),
                    Utility.IllustrationStatus.Submitted.Code(),
                    Utility.IllustrationStatus.TimeExpired.Code(),
                    Utility.IllustrationStatus.Subscription.Code()  }.Contains(illustrationStatusCode);
        }

        public void AssignIllustrationToSubscriber(
           int corpId,
           int regionId,
           int countryId,
           int domesticregId,
           int stateProvId,
           int cityId,
           int officeId,
           int caseSeqNo,
           int histSeqNo,
           int subscriberId,
           //Agregado por: Rainny Martinez 11/07/2017
           string roles
            )
        {
            oCaseManager.SetAssignCase(new Case.AssignCase
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticRegId = domesticregId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                UnderwriterId = subscriberId,
                AssignRol = roles,
                UserId = UserID.GetValueOrDefault()
            });
        }

        public void ChangeIllustrationStatus(
            long customerPlanNo,
            int corpId,
            int regionId,
            int countryId,
            int domesticregId,
            int stateProvId,
            int cityId,
            int officeId,
            int caseSeqNo,
            int histSeqNo,
            int userId,
            Utility.IllustrationStatus illustrationStatus,
            string note,
            int? agent_id = null,
            string Comment = null
            )
        {
            var illustrationStatusCode = illustrationStatus.Code();

            if (customerPlanNo != -1)
            {
                var customerPlan = idManager.IIllusDataManager.GetAllCustomerPlanDetail(new Entity.UnderWriting.IllusData.Illustrator.CustomerPlanDetailP
                {
                    CustomerPlanNo = customerPlanNo
                }).FirstOrDefault();

                if (customerPlan == null) throw new Exception(Resources.IllustrationDontExist);
                if (!CanChangeStatus(customerPlan.IllustrationStatusCode)) throw new Exception(Resources.IllustrationCantChangeHisStatus);

                customerPlan.IllustrationStatusCode = illustrationStatusCode;
                customerPlan.UserId = userId;
                idManager.IIllusDataManager.UpdateCustomerPlanDetail(customerPlan);

                corpId = customerPlan.CorpId;
                regionId = customerPlan.RegionId;
                countryId = customerPlan.CountryNo;
                domesticregId = customerPlan.DomesticregId;
                stateProvId = customerPlan.StateProvId;
                cityId = customerPlan.CityId;
                officeId = customerPlan.OfficeId;
                caseSeqNo = customerPlan.CaseSeqNo;
                histSeqNo = customerPlan.HistSeqNo;
            }

            if (caseSeqNo != -1)
            {
                illustrationStatusCode = illustrationStatus == Utility.IllustrationStatus.NewPlan ? "Illustration" : illustrationStatus.Code();

                var policy = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticregId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo);
                if (policy == null) throw new Exception(Resources.IllustrationDontExist);
                var policyStatusId = 0;
                var lstPolicyStatus = GetDropDownByType(Utility.DropDownType.PolicyStatus);

                var subscriptionStatusId = lstPolicyStatus.FirstOrDefault(o => o.Namekey == Utility.IllustrationStatus.Subscription.Code());
                if (subscriptionStatusId == null) throw new Exception(Resources.IllustrationCantChangeHisStatus);

                var declinedSubscriptionStatusId = lstPolicyStatus.FirstOrDefault(o => o.Namekey == Utility.IllustrationStatus.DeclinedBySubscription.Code());
                var statusChangeTypeId = 0;

                //Si se somete y la linea es de vehiculo, pone el estado subscripción, de lo contrario pone el estado NewBusiness
                if (illustrationStatus == Utility.IllustrationStatus.Submitted)
                {
                    policyStatusId = policy.BussinessLineId == 2 && policy.BussinessLineType == 1 ? subscriptionStatusId.PolicyStatusId.GetValueOrDefault() : 0;
                    statusChangeTypeId = Utility.PolicyStatusChangeType.IllustrationToSubscription.ToInt();
                }
                else
                {
                    var policyStatus = GetDropDownByType(Utility.DropDownType.PolicyStatus).SingleOrDefault(o => o.Namekey == illustrationStatusCode);
                    if (policyStatus == null) throw new Exception(Resources.IllustrationCantChangeHisStatus);
                    policyStatusId = policyStatus.PolicyStatusId.GetValueOrDefault();
                    statusChangeTypeId = Utility.PolicyStatusChangeType.IllustrationChanges.ToInt();
                }

                //if (policy.PolicyStatusId != policyStatusId)
                //{
                var item = new Policy.Parameter
                {
                    CorpId = corpId,
                    RegionId = regionId,
                    CountryId = countryId,
                    DomesticregId = domesticregId,
                    StateProvId = stateProvId,
                    CityId = cityId,
                    OfficeId = officeId,
                    CaseSeqNo = caseSeqNo,
                    HistSeqNo = histSeqNo,
                    StatusChangeTypeId = statusChangeTypeId,
                    StatusId = policyStatusId,
                    UserId = userId
                };

                oPolicyManager.SetPolicyStatus(item);

                if (!string.IsNullOrEmpty(Comment))
                {
                    if (Comment == "Contact Information")
                    {
                        var data = GettingDropData(Utility.DropDownType.NotePredefinied, NameKey: "DeniedAutoIllustrationReason")
                                   .Select(p => new
                                   {
                                       Text = p.NotePredefiniedDesc,
                                       Value = p.ActionDesc
                                   }).FirstOrDefault(p => p.Value == "Contact Information");

                        if (data != null)
                            Comment = data.Text;

                        oPolicyManager.UpdatePolicyQuo(new Policy.UQuo
                        {
                            PolicyNo = this.Policy_Id,
                            MissingDocumentQuoReason = Comment,
                            UserId = this.UserID.GetValueOrDefault()
                        });
                    }
                    else
                    {
                        oPolicyManager.UpdatePolicyQuo(new Policy.UQuo
                        {
                            PolicyNo = this.Policy_Id,
                            DeclinedQuoReason = Comment,
                            UserId = this.UserID.GetValueOrDefault()
                        });
                    }
                }

                if (string.IsNullOrEmpty(note))
                    //Notificar por correo el cambio de estatus
                    SendMailFromStatusChangeOrNotes(illustrationStatusCode);
                else
                    //Notificar por correo el cambio de estatus
                    SendMailFromStatusChangeOrNotes(illustrationStatusCode, Note: note, isNoteAndStatusChange: true);
                // }

                if ((illustrationStatus == Utility.IllustrationStatus.DeclinedByClient ||
                     illustrationStatus == Utility.IllustrationStatus.PendingByClient ||
                     illustrationStatus == Utility.IllustrationStatus.Submitted ||
                     illustrationStatus == Utility.IllustrationStatus.Subscription ||
                     illustrationStatus == Utility.IllustrationStatus.MissingDocuments ||
                     illustrationStatus == Utility.IllustrationStatus.MissingInspection ||
                     illustrationStatus == Utility.IllustrationStatus.DeclinedBySubscription) && !note.SIsNullOrEmpty())
                {
                    SaveNotes
                    (
                        corpId,
                        regionId,
                        countryId,
                        domesticregId,
                        stateProvId,
                        cityId,
                        officeId,
                        caseSeqNo,
                        histSeqNo,
                        userId,
                        note
                    );
                }


                /*Asignacion automatica de Cotizaciones a un Suscriptor*/
                if (illustrationStatus == Utility.IllustrationStatus.Subscription && AssignedSubscriberId <= 0)
                {
                    Policy.Parameter p = new Policy.Parameter
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticregId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo,
                        AgentId = null,
                        UserId = userId
                    };

                    oPolicyManager.SetAssingQuotation(p);
                }

                //Actualizar la tabla temp
                UpdateTempTable(policy.PolicyNo, userId);
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="illustrationStatusCode"></param>
        /// <param name="isNote"></param>
        /// <param name="Note"></param>
        /// <param name="isNoteAndStatusChange"></param>
        public void SendMailFromStatusChangeOrNotes(string illustrationStatusCode, bool isNote = false, string Note = "", bool isNoteAndStatusChange = false)
        {
            bool vSendEmailToAgent = true;

            try
            {
                var vSendEmailToAgentkey = ConfigurationManager.AppSettings["SendEmailToAgent"];
                bool.TryParse(vSendEmailToAgentkey, out vSendEmailToAgent);
            }
            catch (Exception)
            {
                vSendEmailToAgent = false;
            }

            if (!vSendEmailToAgent)
                return;

            //Enviar correo de notificacion de cambio de estatus al agente
            try
            {

                var dataAgent = GettingDropData(Utility.DropDownType.AgentQuoEmail,
                                                corpId: this.Corp_Id,
                                                regionId: this.Region_Id,
                                                countryId: this.Country_Id,
                                                domesticregId: this.Domesticreg_Id,
                                                stateProvId: this.State_Prov_Id,
                                                cityId: this.City_Id,
                                                officeId: this.Office_Id,
                                                caseSeqNo: this.Case_Seq_No,
                                                histSeqNo: this.Hist_Seq_No
                                               );

                var dataPolicy = this.oPolicyManager.GetPolicy(
                                                               this.Corp_Id,
                                                               this.Region_Id,
                                                               this.Country_Id,
                                                               this.Domesticreg_Id,
                                                               this.State_Prov_Id,
                                                               this.City_Id,
                                                               this.Office_Id,
                                                               this.Case_Seq_No,
                                                               this.Hist_Seq_No
                                                              );


                var dataContact = this.oContactManager.GetContact(dataPolicy.CorpId, dataPolicy.ContactId, this.Language.ToInt());
                var CustomerName = dataContact.FullName.Capitalize();




                if (dataAgent.Any())
                {
                    #region Envio correo
                    var Correos = dataAgent.Count() > 1 ? string.Join(",", dataAgent.Select(v => v.ConfigurationValue).ToArray())
                                                        : dataAgent.Select(v => v.ConfigurationValue).FirstOrDefault();

                    var IsTestEmail = ConfigurationManager.AppSettings["SendEmail"] == "true";
                    var TestEmail = ConfigurationManager.AppSettings["TestEmails"];
                    var AgentCodigo = dataPolicy.AgentCode;
                    var AgentName = dataPolicy.Agent_Name.Capitalize(' ');
                    var EmailTo = IsTestEmail ? TestEmail : Correos;
                    var subject = string.Empty;
                    var msg = string.Empty;

                    var EmailFrom = ConfigurationManager.AppSettings["EmailFrom"];
                    var Cc = ConfigurationManager.AppSettings["EmailCc"];
                    var BCc = ConfigurationManager.AppSettings["EmailBCc"];

                    var ResourceKey = "Illustration_" + illustrationStatusCode;

                    var policyStatus = Resources.ResourceManager.GetString(ResourceKey, CultureInfo.CreateSpecificCulture("es"));

                    if (string.IsNullOrEmpty(EmailTo))
                        throw new Exception("Error - La direccion de correo esta vacia");

                    if (!isNoteAndStatusChange)
                    {
                        msg = isNote ? string.Format("Se ha generado una nota la para la cotización # : {0} - Agente \"{1}\", Cliente \"{2}\" <br/> Nota: <br/> {3}", this.Policy_Id, AgentName, CustomerName, Note)
                                     : string.Format("La cotización Numero {0} - Agente \"{1}\", Cliente \"{2}\" ha cambiado al estado {3}", this.Policy_Id, AgentName, CustomerName, policyStatus);

                        subject = isNote ? string.Format("Virtual Office - Bandejas - Cambio de estatus Cotización #: {0} - Agente \"{1}\", Cliente \"{2}\"", this.Policy_Id, AgentName, CustomerName)
                                         : string.Format("Virtual Office - Bandejas - Nota para la Cotización #: {0} - agente {1}, cliente {2}", this.Policy_Id, AgentName, CustomerName);
                    }
                    else
                    {
                        var strmsg = new StringBuilder();
                        strmsg.AppendLine(string.Format("La cotización Numero {0} - Agente \"{1}\", Cliente \"{2}\" ha cambiado al estado {3} <br/><br/>", this.Policy_Id, AgentName, CustomerName, policyStatus));
                        strmsg.AppendLine(string.Format("Se ha generado una nota la para la cotización # : {0} - Agente \"{1}\", Cliente \"{2}\" <br/> Nota: <br/> {3} <br/><br/>", this.Policy_Id, AgentName, CustomerName, Note));
                        msg = strmsg.ToString();

                        subject = string.Format("Virtual Office - Bandejas - Cambio de estatus Cotización/Nota #: {0}- Codigo del Agente ({1})", this.Policy_Id, AgentCodigo);
                    }

                    try
                    {
                        MailManager.SendMessage(
                                                EmailTo,
                                                Cc,
                                                BCc,
                                                msg,
                                                EmailFrom,
                                                subject,
                                                "",
                                                true
                                               );
                    }
                    catch (Exception ex)
                    {
                        //Loguear Error                      
                        oPolicyManager.InsertLog(new Policy.LogParameter
                        {
                            LogTypeId = Utility.LogTypeId.Exception.ToInt(),
                            CorpId = this.Corp_Id,
                            CompanyId = this.CompanyId,
                            ProjectId = this.ProjectId,
                            Identifier = Guid.NewGuid(),
                            LogValue = string.Format("Se ha generado un error al intentar enviar correo a la direccion {0}, Descripcion del error: {1}", EmailTo, ex.Message)
                        });
                    }


                    #endregion
                }

            }
            catch (Exception ex)
            {
                //Insertar en el log
                oPolicyManager.InsertLog(new Policy.LogParameter
                {
                    LogTypeId = Utility.LogTypeId.Exception.ToInt(),
                    CorpId = this.Corp_Id,
                    CompanyId = this.CompanyId,
                    ProjectId = this.ProjectId,
                    Identifier = Guid.NewGuid(),
                    LogValue = ex.GetLastInnerException().Message
                });
            }
        }

        public bool UpdateTempTable(string PolicyNo, int UserId)
        {
            //Actualizar la tabla temp
            var result = oPolicyManager.UpdateQuotationInfoTemp(new Policy.Quo.Temp
            {
                PolicyNo = PolicyNo,
                UserId = UserId,
                ReturnResultSet = true
            });

            return
                result > 0;
        }

        public void SaveNotes(
           int corpId,
           int regionId,
           int countryId,
           int domesticregId,
           int stateProvId,
           int cityId,
           int officeId,
           int caseSeqNo,
           int histSeqNo,
           int userId,
           string note)
        {
            oNote.Insert(new Note
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticregId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                NoteBody = note,
                NoteName = "NewBusiness",
                OriginatedById = userId,
                UserId = userId,
                ReferenceTypeId = Utility.PolicyNotesReferenceType.IllustrationNotes.ToInt()
            });
        }

        public bool SubmitIllustrationToGlobal(
            long customerPlanNo,
            int corpId,
            int regionId,
            int countryId,
            int domesticregId,
            int stateProvId,
            int cityId,
            int officeId,
            int caseSeqNo,
            int histSeqNo,
            int agentId,
            int contactId,
            int userId)
        {
            var customerPlan = idManager.IIllusDataManager.GetAllCustomerPlanDetail(new Entity.UnderWriting.IllusData.Illustrator.CustomerPlanDetailP
            {
                CustomerPlanNo = customerPlanNo
            }).FirstOrDefault();
            if (customerPlan == null || customerPlan.IllustrationStatusCode == WEB.NewBusiness.Common.Utility.IllustrationStatus.New.Code()) throw new Exception(RESOURCE.UnderWriting.NewBussiness.Resources.IllustrationIsntComplete);
            customerPlan.IllustrationStatusCode = WEB.NewBusiness.Common.Utility.IllustrationStatus.Submitted.Code();
            customerPlan.UserId = userId;

            var policy = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticregId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo);
            policy.PolicyStatusId = 0;
            policy.UserId = userId;

            var paymentFreqTypeId = 0;

            switch (customerPlan.FrequencyTypeCode)
            {
                case "A": //Annual
                    paymentFreqTypeId = 3;
                    break;
                case "H"://Semi Annual
                    paymentFreqTypeId = 4;
                    break;
                case "M"://Monthly
                    paymentFreqTypeId = 2;
                    break;
                case "Q"://Quarterly
                    paymentFreqTypeId = 1;
                    break;
                default:
                    var gFrequency = GetDropDownByType(Utility.DropDownType.PaymentFrequency, new DropDown.Parameter
                    {
                        CorpId = corpId,
                        RegionId = regionId,
                        CountryId = countryId,
                        DomesticregId = domesticregId,
                        StateProvId = stateProvId,
                        CityId = cityId,
                        OfficeId = officeId,
                        CaseSeqNo = caseSeqNo,
                        HistSeqNo = histSeqNo
                    }).FirstOrDefault(o => o.PaymentFreqTypeDesc == customerPlan.FrequencyType);
                    if (gFrequency != null)
                        paymentFreqTypeId = gFrequency.PaymentFreqTypeId.Value;
                    break;
            }

            oPolicyManager.InsertPaymentFrequency(new Entity.UnderWriting.Entities.Policy.PaymentFrequency
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticregId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                PaymentFreqTypeId = paymentFreqTypeId,
                UserId = userId
            });

            oPolicyManager.UpdatePolicy(policy);

            oContactManager.SetAgentContact(new Contact.AgentContact
            {
                AgentId = agentId,
                CorpId = corpId,
                UserId = userId,
                ContactId = contactId
            });

            oPolicyManager.ChangePolicyChain(new Policy.Parameter
            {
                AgentId = agentId,
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticregId = domesticregId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                UserId = userId
            });

            idManager.IIllusDataManager.UpdateCustomerPlanDetail(customerPlan);
            return true;
        }

        public void DeleteIllustration(
            long customerPlanNo,
            int corpId,
            int regionId,
            int countryId,
            int domesticregId,
            int stateProvId,
            int cityId,
            int officeId,
            int caseSeqNo,
            int histSeqNo,
            int userId)
        {
            var customerPlan = idManager.IIllusDataManager.GetAllCustomerPlanDetail(new Entity.UnderWriting.IllusData.Illustrator.CustomerPlanDetailP
            {
                CustomerPlanNo = customerPlanNo
            }).FirstOrDefault();
            customerPlan.IllustrationStatusCode = Utility.IllustrationStatus.Delete.Code();
            customerPlan.UserId = userId;
            idManager.IIllusDataManager.UpdateCustomerPlanDetail(customerPlan);

            oPolicyManager.DeletePolicy(corpId, regionId, countryId, domesticregId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, userId);
        }

        public void FillCaseSeqNoFromIllusdata(long customerPlanNo)
        {
            var policy = idManager.IIllusDataManager.GetCustomerPlanDetGlobalPolicy(new Entity.UnderWriting.IllusData.Illustrator.CustomerPlanDetGlobalPolicy
            {
                CustomerPlanNo = customerPlanNo
            });

            if (policy != null)
            {
                Case_Seq_No = policy.CaseSeqNo;
                Hist_Seq_No = policy.HistSeqNo;
            }
        }
        #endregion

        #region Auto
        public string DefaultImageCar
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.DefaultImageCar; }
            set
            {
                datos.ContactInfo.DefaultImageCar = value;
                datos.Save();
            }
        }

        public int AutoSectionInformacionesGeneralesCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionInformacionesGeneralesCount; }
            set
            {
                datos.ContactInfo.AutoSectionInformacionesGeneralesCount = value;
                datos.Save();
            }
        }

        public int AutoSectionVerificacionDatosGeneralesCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionVerificacionDatosGeneralesCount; }
            set
            {
                datos.ContactInfo.AutoSectionVerificacionDatosGeneralesCount = value;
                datos.Save();
            }
        }

        public int AutoSectionCombustibleCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionCombustibleCount; }
            set
            {
                datos.ContactInfo.AutoSectionCombustibleCount = value;
                datos.Save();
            }
        }

        public int AutoSectionFuncionamientoCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionFuncionamientoCount; }
            set
            {
                datos.ContactInfo.AutoSectionFuncionamientoCount = value;
                datos.Save();
            }
        }

        public int AutoSectionPartesFisicasCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionPartesFisicasCount; }
            set
            {
                datos.ContactInfo.AutoSectionPartesFisicasCount = value;
                datos.Save();
            }
        }

        public int AutoSectionAccesoriosTapiceriaCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionAccesoriosTapiceriaCount; }
            set
            {
                datos.ContactInfo.AutoSectionAccesoriosTapiceriaCount = value;
                datos.Save();
            }
        }

        public int AutoSectionSeguridadComplementosCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionSeguridadComplementosCount; }
            set
            {
                datos.ContactInfo.AutoSectionSeguridadComplementosCount = value;
                datos.Save();
            }
        }

        public int AutoSectionOtrasInformacionesCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionOtrasInformacionesCount; }
            set
            {
                datos.ContactInfo.AutoSectionOtrasInformacionesCount = value;
                datos.Save();
            }
        }

        public int AutoSectionPhotosCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.AutoSectionPhotosCount; }
            set
            {
                datos.ContactInfo.AutoSectionPhotosCount = value;
                datos.Save();
            }
        }
        #endregion

        #region Lineas Aliadas

        #region Property
        public int PropertySectionDatosGeneralesCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionDatosGeneralesCount; }
            set
            {
                datos.ContactInfo.PropertySectionDatosGeneralesCount = value;
                datos.Save();
            }
        }

        public int PropertySectionSumasAseguradasCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionSumasAseguradasCount; }
            set
            {
                datos.ContactInfo.PropertySectionSumasAseguradasCount = value;
                datos.Save();
            }
        }

        public int PropertySectionDescripcionCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionDescripcionCount; }
            set
            {
                datos.ContactInfo.PropertySectionDescripcionCount = value;
                datos.Save();
            }
        }

        public int PropertySectionHistorialPerdidasCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionHistorialPerdidasCount; }
            set
            {
                datos.ContactInfo.PropertySectionHistorialPerdidasCount = value;
                datos.Save();
            }
        }

        public int PropertySectionHistorialPerdidasNingunaAnterioresCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionHistorialPerdidasNingunaAnterioresCount; }
            set
            {
                datos.ContactInfo.PropertySectionHistorialPerdidasNingunaAnterioresCount = value;
                datos.Save();
            }
        }

        public int PropertySectionSiniestralidadZonaCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionSiniestralidadZonaCount; }
            set
            {
                datos.ContactInfo.PropertySectionSiniestralidadZonaCount = value;
                datos.Save();
            }
        }

        public int PropertySectionColindanciasCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionColindanciasCount; }
            set
            {
                datos.ContactInfo.PropertySectionColindanciasCount = value;
                datos.Save();
            }
        }

        public int PropertySectionLocalizacionRiesgoCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionLocalizacionRiesgoCount; }
            set
            {
                datos.ContactInfo.PropertySectionLocalizacionRiesgoCount = value;
                datos.Save();
            }
        }

        public int PropertySectionDescripcionProcesosCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionDescripcionProcesosCount; }
            set
            {
                datos.ContactInfo.PropertySectionDescripcionProcesosCount = value;
                datos.Save();
            }
        }

        public int PropertySectionDescripcionPeligrosCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionDescripcionPeligrosCount; }
            set
            {
                datos.ContactInfo.PropertySectionDescripcionPeligrosCount = value;
                datos.Save();
            }
        }

        public int PropertySectionPrevencionProteccionCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionPrevencionProteccionCount; }
            set
            {
                datos.ContactInfo.PropertySectionPrevencionProteccionCount = value;
                datos.Save();
            }
        }

        public int PropertySectionEstimacionPerdidasCoberturaIncendioCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionEstimacionPerdidasCoberturaIncendioCount; }
            set
            {
                datos.ContactInfo.PropertySectionEstimacionPerdidasCoberturaIncendioCount = value;
                datos.Save();
            }
        }

        public int PropertySectionExposicionRiesgosCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionExposicionRiesgosCount; }
            set
            {
                datos.ContactInfo.PropertySectionExposicionRiesgosCount = value;
                datos.Save();
            }
        }

        public int PropertySectionCategoriaRiesgoCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionCategoriaRiesgoCount; }
            set
            {
                datos.ContactInfo.PropertySectionCategoriaRiesgoCount = value;
                datos.Save();
            }
        }

        public int PropertySectionOpinionRiesgoCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionOpinionRiesgoCount; }
            set
            {
                datos.ContactInfo.PropertySectionOpinionRiesgoCount = value;
                datos.Save();
            }
        }

        public int PropertySectionRecomendacionesTecnicasCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionRecomendacionesTecnicasCount; }
            set
            {
                datos.ContactInfo.PropertySectionRecomendacionesTecnicasCount = value;
                datos.Save();
            }
        }

        public int PropertySectionRecomendacionesHechasEnviadasAseguradoCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionRecomendacionesHechasEnviadasAseguradoCount; }
            set
            {
                datos.ContactInfo.PropertySectionRecomendacionesHechasEnviadasAseguradoCount = value;
                datos.Save();
            }
        }

        public int PropertySectionFotografiasCount
        {
            get { return (HttpContext.Current.Session[key] as SessionList).Stored.ContactInfo.PropertySectionFotografiasCount; }
            set
            {
                datos.ContactInfo.PropertySectionFotografiasCount = value;
                datos.Save();
            }
        }
        #endregion

        #endregion

        /// <summary>
        /// Author: Marcos Perez
        /// </summary>
        /// <param name="policy"></param>
        /// <param name="productLine"></param>
        /// <returns></returns>
        public string InspectionCompleted(Utility.itemPolicy policy, Utility.ProductLine productLine)
        {
            string result = string.Empty;

            #region Auto
            if (productLine == Utility.ProductLine.Auto)
                result = InspectionVehicleCompleted(policy);
            #endregion

            #region Lineas Aliadas
            else if (productLine == Utility.ProductLine.AlliedLines)
            {
                switch (AlliedLinesProductBehavior)
                {
                    case Utility.AlliedLinesType.Airplane:
                        break;
                    case Utility.AlliedLinesType.Bail:
                        break;
                    case Utility.AlliedLinesType.Navy:
                        break;
                    case Utility.AlliedLinesType.Property:
                        #region Property
                        result = InspectionRiskCompleted(policy);
                        #endregion
                        break;
                    case Utility.AlliedLinesType.Transport:
                        break;
                    case Utility.AlliedLinesType.Vehicle:
                        break;
                }
            }
            #endregion

            return result;
        }

        private string InspectionVehicleCompleted(Utility.itemPolicy policy)
        {
            bool inspectionCompleted = false;

            string vehicleData = string.Empty,
                   result = string.Empty;

            int AccesoriosTapiceria = 0,
                Combustible = 0,
                Fotos = 0,
                Funcionamiento = 0,
                InformacionesGenerales = 0,
                OtrasInformaciones = 0,
                PartesFisicas = 0,
                SeguridadComplementos = 0,
                VerificacionDatosGenerales = 0;

            var vehicles = oPolicyManager.GetVehicleInsured(new Policy.Parameter
            {
                CorpId = policy.CorpId,
                RegionId = policy.RegionId,
                CountryId = policy.CountryId,
                DomesticregId = policy.DomesticregId,
                StateProvId = policy.StateProvId,
                CityId = policy.CityId,
                OfficeId = policy.OfficeId,
                CaseSeqNo = policy.CaseSeqNo,
                HistSeqNo = policy.HistSeqNo
            }).ToList();

            if (vehicles.Count > 0)
            {
                foreach (var vehicle in vehicles)
                {
                    if (!vehicle.Inspection.GetValueOrDefault() || (!vehicle.ProductTypeDesc.Trim().ToLower().Contains("ley") || !vehicle.ProductTypeDesc.Trim().ToLower().Contains("ultra")))
                    {
                        var sections = oDropDownManager.GetDropDownByType(new DropDown.Parameter
                        {
                            DropDownType = Utility.DropDownType.VIFSessionCount.ToString(),
                            CorpId = vehicle.CorpId,
                            RegionId = vehicle.RegionId,
                            CountryId = vehicle.CountryId,
                            DomesticregId = vehicle.DomesticregId,
                            StateProvId = vehicle.StateProvId,
                            CityId = vehicle.CityId,
                            OfficeId = vehicle.OfficeId,
                            CaseSeqNo = vehicle.CaseSeqNo,
                            HistSeqNo = vehicle.HistSeqNo,
                            RiskTypeId = vehicle.InsuredVehicleId
                        }).ToList();

                        if (sections.Count > 0)
                        {
                            foreach (var section in sections)
                            {
                                if (section.Namekey == Utility.VIFSessionCount.AccesoriosTapiceria.ToString())
                                    AccesoriosTapiceria = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.Combustible.ToString())
                                    Combustible = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.Fotos.ToString())
                                    Fotos = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.Funcionamiento.ToString())
                                    Funcionamiento = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.InformacionesGenerales.ToString())
                                    InformacionesGenerales = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.OtrasInformaciones.ToString())
                                    OtrasInformaciones = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.PartesFisicas.ToString())
                                    PartesFisicas = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.SeguridadComplementos.ToString())
                                    SeguridadComplementos = section.Counts.GetValueOrDefault();

                                if (section.Namekey == Utility.VIFSessionCount.VerificacionDatosGenerales.ToString())
                                    VerificacionDatosGenerales = section.Counts.GetValueOrDefault();
                            }

                            inspectionCompleted = (
                                                    (InformacionesGenerales >= AutoSectionInformacionesGeneralesCount) &&
                                                    (VerificacionDatosGenerales >= AutoSectionVerificacionDatosGeneralesCount) &&
                                                    (Combustible >= AutoSectionCombustibleCount) &&
                                                    (Funcionamiento >= AutoSectionFuncionamientoCount) &&
                                                    (PartesFisicas >= AutoSectionPartesFisicasCount) &&
                                                    (AccesoriosTapiceria >= AutoSectionAccesoriosTapiceriaCount) &&
                                                    (SeguridadComplementos >= AutoSectionSeguridadComplementosCount) &&
                                                    (OtrasInformaciones >= AutoSectionOtrasInformacionesCount) &&
                                                    (Fotos >= AutoSectionPhotosCount)
                                                  );
                        }

                        if (!inspectionCompleted)
                        {
                            var seccionesIncompletas = string.Format("{0}<br /><br />", Resources.VehicleIncompleteSections);
                            if (InformacionesGenerales < AutoSectionInformacionesGeneralesCount)
                                seccionesIncompletas += string.Format("- {0}<br />", Resources.VehicleGeneralInformation);

                            if (VerificacionDatosGenerales < AutoSectionVerificacionDatosGeneralesCount)
                                seccionesIncompletas += string.Format("- {0}<br />", Resources.VehicleVerificationOfGeneralInformation);

                            if (Combustible < AutoSectionCombustibleCount)
                                seccionesIncompletas += string.Format("- {0}<br />", Resources.VehicleFuelType);

                            if (Funcionamiento < AutoSectionFuncionamientoCount)
                                seccionesIncompletas += string.Format("- {0}<br />", Resources.VehicleOperationCheck);

                            if (PartesFisicas < AutoSectionPartesFisicasCount)
                                seccionesIncompletas += string.Format("- {0}<br />", Resources.VehicleCheckPhysicalParts);

                            if (AccesoriosTapiceria < AutoSectionAccesoriosTapiceriaCount)
                                seccionesIncompletas += string.Format("- {0} {1} {2}<br />", Resources.VehicleAccessories, Resources.And, Resources.VehicleUpholstery);

                            if (SeguridadComplementos < AutoSectionSeguridadComplementosCount)
                                seccionesIncompletas += string.Format("- {0} {1} {2}<br />", Resources.VehicleSecuritySystems, Resources.And, Resources.VehicleComplement);

                            if (Fotos < AutoSectionPhotosCount)
                                seccionesIncompletas += string.Format("- {0}<br />", Resources.VehiclePhotos);

                            if (OtrasInformaciones < AutoSectionOtrasInformacionesCount)
                                seccionesIncompletas += string.Format("- {0}<br />", Resources.OtherInformations);

                            seccionesIncompletas += "<br /><br />";

                            vehicleData += string.Format(Resources.VehicleBrandModelPlate + "{4}", vehicle.MakeDesc,
                                                                                                   vehicle.ModelDesc,
                                                                                                   vehicle.Registry,
                                                                                                   "<br />",
                                                                                                   seccionesIncompletas);
                        }
                        else
                        {
                            //Si esta completa la inspeccion, actualizar INSURED y REVIEW
                            #region Actualizar campo Inspection en [Policy].[PL_POLICY_VEHICLE_INSURED]
                            var setInspection = oPolicyManager.SetVehicleInsuredInspection(new Policy.VehicleInsured.InspectionV
                            {
                                CorpId = vehicle.CorpId,
                                RegionId = vehicle.RegionId,
                                CountryId = vehicle.CountryId,
                                DomesticRegId = vehicle.DomesticregId,
                                StateProvId = vehicle.StateProvId,
                                CityId = vehicle.CityId,
                                OfficeId = vehicle.OfficeId,
                                CaseSeqNo = vehicle.CaseSeqNo,
                                HistSeqNo = vehicle.HistSeqNo,
                                VehicleUniqueId = vehicle.VehicleUniqueId,
                                Inspection = true,
                                EndorsementClarifying = vehicle.EndorsementClarifying,
                                UserId = UserID.GetValueOrDefault()
                            });

                            var setStatus = oPolicyManager.SetVehicleInsuredInspectionStatus(new Policy.VehicleInsured.InspectionV
                            {
                                CorpId = vehicle.CorpId,
                                RegionId = vehicle.RegionId,
                                CountryId = vehicle.CountryId,
                                DomesticRegId = vehicle.DomesticregId,
                                StateProvId = vehicle.StateProvId,
                                CityId = vehicle.CityId,
                                OfficeId = vehicle.OfficeId,
                                CaseSeqNo = vehicle.CaseSeqNo,
                                HistSeqNo = vehicle.HistSeqNo,
                                InsuredVehicleId = vehicle.InsuredVehicleId.GetValueOrDefault(),
                                ReviewStatusId = 1,
                                ReviewStatus = true,
                                UserId = UserID.GetValueOrDefault()
                            });
                            #endregion
                        }

                        if (!inspectionCompleted)
                            result = string.Format(Resources.VehicleMustCompleteInspectionBeforeSendToSubscription, vehicleData, "<br/>");
                    }
                }
            }
            return result;
        }

        private string InspectionRiskCompleted(Utility.itemPolicy policy)
        {
            bool inspectionCompleted = false;
            string propertyData = string.Empty,
                   result = string.Empty;

            int DatosGenerales = 0,
                SumasAseguradas = 0,
                Descripcion = 0,
                HistorialPerdidas = 0,
                HistorialPerdidasNingunaAnteriores = 0,
                SiniestralidadZona = 0,
                Colindancias = 0,
                LocalizacionRiesgo = 0,
                DescripcionProcesos = 0,
                DescripcionPeligros = 0,
                PrevencionProteccion = 0,
                EstimacionPerdidasCoberturaIncendio = 0,
                ExposicionRiesgos = 0,
                CategoriaRiesgo = 0,
                OpinionRiesgo = 0,
                RecomendacionesTecnicas = 0,
                RecomendacionesHechasEnviadasAsegurado = 0;
            /*,Fotografias = 0;*/

            var properties = oPropertyManager.GetProperty(new Property.Key
            {
                CorpId = policy.CorpId,
                RegionId = policy.RegionId,
                CountryId = policy.CountryId,
                DomesticregId = policy.DomesticregId,
                StateProvId = policy.StateProvId,
                CityId = policy.CityId,
                OfficeId = policy.OfficeId,
                CaseSeqNo = policy.CaseSeqNo,
                HistSeqNo = policy.HistSeqNo
            }).Where(p => p.RequiresInspection).ToList();

            if (properties.Count > 0)
            {
                foreach (var property in properties)
                {
                    var reviews = oAlliedLinesReviewManager.GetAlliedLineReview(new AlliedLines.Review.Parameters.Get
                    {
                        CorpId = property.CorpId,
                        RegionId = property.RegionId,
                        CountryId = property.CountryId,
                        DomesticregId = property.DomesticregId,
                        StateProvId = property.StateProvId,
                        CityId = property.CityId,
                        OfficeId = property.OfficeId,
                        CaseSeqNo = property.CaseSeqNo,
                        HistSeqNo = property.HistSeqNo,
                        AlliedLineId = property.PropertyId,
                        UniqueAlliedLineId = property.UniquePropertyId,
                        AlliedLineTypeId = Utility.AlliedLinesType.Property.ToInt(),
                        ReviewId = null,
                        BlTypeId = property.BlTypeId,
                        BlId = property.BlId,
                        ProductId = property.ProductId
                    }).ToList();
                    if (reviews.Count > 0)
                    {
                        foreach (var review in reviews)
                        {
                            var sections = oAlliedLinesReviewManager.GetAlliedLineReviewSectionsCount(new AlliedLines.Review.Sections.Count.Parameters.Get
                            {
                                CorpId = review.CorpId,
                                RegionId = review.RegionId,
                                CountryId = review.CountryId,
                                DomesticregId = review.DomesticregId,
                                StateProvId = review.StateProvId,
                                CityId = review.CityId,
                                OfficeId = review.OfficeId,
                                CaseSeqNo = review.CaseSeqNo,
                                HistSeqNo = review.HistSeqNo,
                                AlliedLineId = review.PropertyId.GetValueOrDefault(),
                                UniqueAlliedLineId = review.UniqueAlliedLineId,
                                AlliedLineTypeId = review.AlliedLineTypeId,
                                ReviewId = review.ReviewId.GetValueOrDefault(),
                                DocTypeId = review.DocTypeId.GetValueOrDefault(),
                                DocCategoryId = review.DocCategoryId.GetValueOrDefault()
                            }).ToList();
                            if (sections.Count > 0)
                            {
                                foreach (var section in sections)
                                {
                                    if (section.Section == Utility.PropertyInspectionFormSections.DatosGenerales.ToString())
                                        DatosGenerales = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.SumasAseguradas.ToString())
                                        SumasAseguradas = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.Descripcion.ToString())
                                        Descripcion = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.HistorialPerdidas.ToString())
                                        HistorialPerdidas = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.HistorialPerdidasNingunaAnteriores.ToString())
                                        HistorialPerdidasNingunaAnteriores = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.SiniestralidadZona.ToString())
                                        SiniestralidadZona = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.Colindancias.ToString())
                                        Colindancias = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.LocalizacionRiesgo.ToString())
                                        LocalizacionRiesgo = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.DescripcionProcesos.ToString())
                                        DescripcionProcesos = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.DescripcionPeligros.ToString())
                                        DescripcionPeligros = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.PrevencionProteccion.ToString())
                                        PrevencionProteccion = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.EstimacionPerdidasCoberturaIncendio.ToString())
                                        EstimacionPerdidasCoberturaIncendio = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.ExposicionRiesgos.ToString())
                                        ExposicionRiesgos = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.CategoriaRiesgo.ToString())
                                        CategoriaRiesgo = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.OpinionRiesgo.ToString())
                                        OpinionRiesgo = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.RecomendacionesTecnicas.ToString())
                                        RecomendacionesTecnicas = section.Count.GetValueOrDefault();
                                    if (section.Section == Utility.PropertyInspectionFormSections.RecomendacionesHechasEnviadasAsegurado.ToString())
                                        RecomendacionesHechasEnviadasAsegurado = section.Count.GetValueOrDefault();
                                    //if (section.Section == Utility.PropertyInspectionFormSections.Fotografias.ToString())
                                    //    Fotografias = section.Count.GetValueOrDefault();
                                }

                                inspectionCompleted = (
                                                        (DatosGenerales >= PropertySectionDatosGeneralesCount) &&
                                                        (SumasAseguradas >= PropertySectionSumasAseguradasCount) &&
                                                        (Descripcion >= PropertySectionDescripcionCount) &&
                                                        (HistorialPerdidas >= PropertySectionHistorialPerdidasCount) &&
                                                        (SiniestralidadZona >= PropertySectionSiniestralidadZonaCount) &&
                                                        (Colindancias >= PropertySectionColindanciasCount) &&
                                                        (LocalizacionRiesgo >= PropertySectionLocalizacionRiesgoCount) &&
                                                        (DescripcionProcesos >= PropertySectionDescripcionProcesosCount) &&
                                                        (DescripcionPeligros >= PropertySectionDescripcionPeligrosCount) &&
                                                        (PrevencionProteccion >= PropertySectionPrevencionProteccionCount) &&
                                                        (EstimacionPerdidasCoberturaIncendio >= PropertySectionEstimacionPerdidasCoberturaIncendioCount) &&
                                                        (ExposicionRiesgos >= PropertySectionExposicionRiesgosCount) &&
                                                        (CategoriaRiesgo >= PropertySectionCategoriaRiesgoCount) &&
                                                        (OpinionRiesgo >= PropertySectionOpinionRiesgoCount) &&
                                                        (RecomendacionesTecnicas >= PropertySectionRecomendacionesTecnicasCount) &&
                                                        (RecomendacionesHechasEnviadasAsegurado >= PropertySectionRecomendacionesHechasEnviadasAseguradoCount)
                                                      /*(Fotografias >= PropertySectionFotografiasCount)*/
                                                      );
                            }
                            //-----------------------------------
                            if (!inspectionCompleted)
                            {
                                var seccionesIncompletas = "Secciones incompletas:<br /><br />";

                                if (DatosGenerales < PropertySectionDatosGeneralesCount)
                                    seccionesIncompletas += "1. DATOS GENERALES<br />";

                                if (SumasAseguradas < PropertySectionSumasAseguradasCount)
                                    seccionesIncompletas += string.Format("2. SUMAS ASEGURADAS EN {0}<br />", Country == Utility.Country.RepublicaDominicana ? Resources.FormularioRiesgoSimboloMonedaDO
                                                                                                                                                             : Resources.FormularioRiesgoSimboloMonedaSV);

                                if (Descripcion < PropertySectionDescripcionCount)
                                    seccionesIncompletas += "3. DESCRIPCIÓN<br />";

                                if (HistorialPerdidasNingunaAnteriores != PropertySectionHistorialPerdidasNingunaAnterioresCount)
                                    if (HistorialPerdidas < PropertySectionHistorialPerdidasCount)
                                        seccionesIncompletas += string.Format("4. HISTORIAL DE PÉRDIDAS<br />", Resources.VehicleOperationCheck);

                                if (SiniestralidadZona < PropertySectionSiniestralidadZonaCount)
                                    seccionesIncompletas += "5. SINIESTRALIDAD DE LA ZONA<br />";

                                if (Colindancias < PropertySectionColindanciasCount)
                                    seccionesIncompletas += "6. COLINDANCIAS<br />";

                                if (LocalizacionRiesgo < PropertySectionLocalizacionRiesgoCount)
                                    seccionesIncompletas += "7. LOCALIZACIÓN DEL RIESGO<br />";

                                if (DescripcionProcesos < PropertySectionDescripcionProcesosCount)
                                    seccionesIncompletas += "8. DESCRIPCIÓN DE LOS PROCESOS<br />";

                                if (DescripcionPeligros < PropertySectionDescripcionPeligrosCount)
                                    seccionesIncompletas += "9. DESCRIPCIÓN DE LOS PELIGROS<br />";

                                if (PrevencionProteccion < PropertySectionPrevencionProteccionCount)
                                    seccionesIncompletas += "10. PREVENCIÓN Y PROTECCIÓN<br />";

                                if (EstimacionPerdidasCoberturaIncendio < PropertySectionEstimacionPerdidasCoberturaIncendioCount)
                                    seccionesIncompletas += "11. ESTIMACIÓN DE PÉRDIDAS PARA LA COBERTURA DE INCENDIO<br />";

                                if (ExposicionRiesgos < PropertySectionExposicionRiesgosCount)
                                    seccionesIncompletas += "12. EXPOSICIÓN A RIESGOS<br />";

                                if (CategoriaRiesgo < PropertySectionCategoriaRiesgoCount)
                                    seccionesIncompletas += "13. CATEGORÍA DEL RIESGO<br />";

                                if (OpinionRiesgo < PropertySectionOpinionRiesgoCount)
                                    seccionesIncompletas += "14. OPINIÓN DEL RIESGO<br />";

                                if (RecomendacionesTecnicas < PropertySectionRecomendacionesTecnicasCount)
                                    seccionesIncompletas += "15. RECOMENDACIONES TÉCNICAS<br />";

                                if (RecomendacionesHechasEnviadasAsegurado < PropertySectionRecomendacionesHechasEnviadasAseguradoCount)
                                    seccionesIncompletas += "16. RECOMENDACIONES HECHAS Y ENVIADAS AL ASEGURADO<br />";

                                //if (Fotografias < PropertySectionFotografiasCount)
                                //    seccionesIncompletas += "17. FOTOGRAFÍAS<br />";

                                seccionesIncompletas += "<br /><br />";

                                string Address = string.Empty;
                                if (property.AddressStreet.Trim().Length > 0)
                                    Address = property.AddressStreet.Trim();
                                if (property.AddressNumber.Trim().Length > 0)
                                    Address += string.Concat((Address.Trim().Length > 0 ? ", " : string.Empty), property.AddressNumber.Trim());

                                propertyData += string.Format("PROPIEDAD: <b>{0}</b><br /><br />{1}", Address, seccionesIncompletas);
                            }
                            else
                            {
                                var update = oPropertyManager.UpdatePropertyInsuredDetail(new Property.Insured.Detail.key
                                {
                                    CorpId = Corp_Id,
                                    RegionId = Region_Id,
                                    CountryId = Country_Id,
                                    DomesticregId = Domesticreg_Id,
                                    StateProvId = State_Prov_Id,
                                    CityId = City_Id,
                                    OfficeId = Office_Id,
                                    CaseSeqNo = Case_Seq_No,
                                    HistSeqNo = Hist_Seq_No,
                                    PropertyId = property.PropertyId,
                                    SeqId = property.SeqId,
                                    UniquePropertyId = property.UniquePropertyId,
                                    Inspected = true,
                                    EndorsementClarifying = property.EndorsementClarifying,
                                    UserId = property.UserId != null ? property.UserId : UserID
                                });
                            }
                            //-----------------------------------
                        }
                    }
                    else
                    {
                        result = "Debe completar la Inspección antes de realizar esta operación";
                    }

                }

                if (!inspectionCompleted)
                {
                    if (string.IsNullOrEmpty(result))
                        result = string.Format("Debe completar la Inspección antes de realizar esta operación.<br /><br />Propiedad(es):<br /><br />{0}", propertyData);
                }
            }
            return result;
        }

        //Bmarroquin 25-03-2017 se crea metodo
        public string GetNewCotizacionNumber(int CountryId, string ProductCode)
        {
            string newNumberCotizacion = string.Empty;
            newNumberCotizacion = idManager.PolicyManager.GetNewCotizacionNumber(CountryId, ProductCode);
            return newNumberCotizacion;
        }

        //Bmarroquin 03-04-2017 se crea metodo por el tema de Compliance
        public IEnumerable<Requirement.Compliance> getContactForCompliance(int corpId,
                                                  int regionId,
                                                  int countryId,
                                                  int domesticRegId,
                                                  int stateProvId,
                                                  int cityId,
                                                  int officeId,
                                                  int caseSeqNo,
                                                  int histSeqNo, int languageId, int CompanyId)
        {

            IEnumerable<Requirement.Compliance> listObj;
            listObj = idManager.RequirementManager.GetComplianceContacts(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, languageId, CompanyId);
            return listObj;
        }

        //Bmarroquin 07-04-2017 Se crea metodo para el update del num de cotizacion
        public void updateCotizacionNumber(int corpId,
                                           int regionId,
                                           int countryId,
                                           int domesticRegId,
                                           int stateProvId,
                                           int cityId,
                                           int officeId,
                                           int caseSeqNo,
                                           int histSeqNo, int userID, string pStrNumCotizacion)
        {


            oPolicyManager.SetPolicyNo(new Policy.Number
            {
                CorpId = corpId,
                RegionId = regionId,
                CountryId = countryId,
                DomesticRegId = domesticRegId,
                StateProvId = stateProvId,
                CityId = cityId,
                OfficeId = officeId,
                CaseSeqNo = caseSeqNo,
                HistSeqNo = histSeqNo,
                PolicyNo = pStrNumCotizacion,
                UserId = UserID
            });
        }


        public string ValidacionBlackList(string PolicyNo, Contact ContactData, string pCedulaOrDriverLicense, Utility.BlackListAction blackListAction, ref bool hasProblem, ref bool _declinarPorBlackList)
        {

            var MensajeAMostrar = string.Empty;
            var RequestBlackList = new List<oSysFlexService.ExactMatch>(0);

            var PeopleSearchParam = new oSysFlexService.ExactMatch
            {
                AdditionalInfo = string.Empty,
                Compromised = false,
                Type = oSysFlexService.ConfigurationsCategoryType.People,
                SearchRequest = new oSysFlexService.SearchRequest
                {
                    Source = oSysFlexService.BaseCores.BLACKLIST,
                    RequestFields = new oSysFlexService.Fields[] {
                                                               new oSysFlexService.Fields{
                                                                   Display=true,
                                                                   Name = "Name",
                                                                   Value = ContactData.FullName,
                                                                   Type = oSysFlexService.SearchResultTypes.Name.ToString(),
                                                                   SearchType = oSysFlexService.SearchResultTypes.Name
                                                                 } ,
                                                                 new oSysFlexService.Fields{
                                                                   Display=false,
                                                                   Name = "IdentificationNum",
                                                                   Value = pCedulaOrDriverLicense,
                                                                   Type = oSysFlexService.SearchResultTypes.Text.ToString(),
                                                                   SearchType = oSysFlexService.SearchResultTypes.None
                                                                 },
                                                                 new oSysFlexService.Fields{
                                                                   CoreKey=true,
                                                                   Display=true,
                                                                   Name = "Source_Id",
                                                                   Value = ContactData.ContactId.ToString(),
                                                                   Type = oSysFlexService.SearchResultTypes.Text.ToString(),
                                                                   SearchType = oSysFlexService.SearchResultTypes.None
                                                                 }
                                                            }
                }
            };

            RequestBlackList.Add(PeopleSearchParam);

            switch (ProductLine)
            {
                case Utility.ProductLine.Auto:
                    var dataVehicles = oPolicyManager.GetVehicleInsured(new Policy.Parameter
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticregId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataVehicles.Any())
                    {
                        foreach (var item in dataVehicles)
                        {
                            var paramItem = new oSysFlexService.ExactMatch
                            {
                                AdditionalInfo = string.Empty,
                                Compromised = false,
                                Type = oSysFlexService.ConfigurationsCategoryType.Vehicle,
                                SearchRequest = new oSysFlexService.SearchRequest
                                {
                                    Source = oSysFlexService.BaseCores.BLACKLIST,
                                    RequestFields = new oSysFlexService.Fields[] {
                                                           new oSysFlexService.Fields{
                                                                   Display=true,
                                                                   Name = "Name",
                                                                   Value = item.Chassis,
                                                                   Type = oSysFlexService.SearchResultTypes.Name.ToString(),
                                                                   SearchType = oSysFlexService.SearchResultTypes.Name
                                                               },
                                                               new oSysFlexService.Fields{
                                                                   Display=false,
                                                                   Name = "VehicleChasisNum",
                                                                   Value = item.Chassis,
                                                                   Type = oSysFlexService.SearchResultTypes.Text.ToString(),
                                                                   SearchType = oSysFlexService.SearchResultTypes.None
                                                                 },
                                                                 new oSysFlexService.Fields{
                                                                   CoreKey=true,
                                                                   Display=true,
                                                                   Name = "Source_Id",
                                                                   Value = item.VehicleUniqueId.ToString(),
                                                                   Type = oSysFlexService.SearchResultTypes.Text.ToString(),
                                                                   SearchType = oSysFlexService.SearchResultTypes.None
                                                                 }
                                                            }
                                }
                            };

                            RequestBlackList.Add(paramItem);
                        }
                    }
                    break;
                case Utility.ProductLine.AlliedLines:

                    switch (AlliedLinesProductBehavior)
                    {
                        case Utility.AlliedLinesType.Airplane:
                            break;
                        case Utility.AlliedLinesType.Bail:
                            break;
                        case Utility.AlliedLinesType.Navy:
                            break;
                        case Utility.AlliedLinesType.Property:
                            break;
                        case Utility.AlliedLinesType.Transport:
                            break;
                    }
                    break;
                default:
                    break;
            }

            var resultExactMatchBlackList = oSFPolicyServiceClient.GetExactMatchBlackListBatch(RequestBlackList.ToArray());

            if (resultExactMatchBlackList.ExactMacthBatch != null)
            {
                var StrMessage = new List<string>(0);

                StrMessage.Add("<ul>");

                var ReasonsArray = resultExactMatchBlackList.ExactMacthBatch.Where(j => j.Reasons != null);

                foreach (var item in ReasonsArray)
                    for (int i = 0; i < item.Reasons.Count(); i++)
                        if (item.Reasons != null)
                            StrMessage.Add(string.Format("<li style=margin:15px>{0}</li>", string.Concat((i + 1).ToString(), "-", item.Reasons[i].Reason)));

                StrMessage.Add("</ul>");

                hasProblem = resultExactMatchBlackList.ExactMacthBatch.Where(b => b.Compromised).Any();
                _declinarPorBlackList = resultExactMatchBlackList.ExactMacthBatch.Where(b => b.Reject).Any();

                if (hasProblem)
                {
                    var itemMessage = ProductLine == Utility.ProductLine.Auto ? "y/o vehiculo(s)" : string.Empty;
                    var BodyMessage = string.Format("El cliente \"{0}\"  \"{1}\" esta en lista negra, a continuación estas son las razones: <br><br>", ContactData.FullName, itemMessage);

                    StrMessage.Insert(0, BodyMessage);

                    for (int i = 0; i < StrMessage.Count; i++)
                        MensajeAMostrar += StrMessage[i];

                    //Informar al usuario las razones de BlackList
                    MensajeAMostrar = MensajeAMostrar.Replace("\\r", "<br>");

                    if (_declinarPorBlackList && blackListAction == Utility.BlackListAction.Yes)
                        DeclineCase(Utility.DeclineType.BlackList);
                }

                if (blackListAction == Utility.BlackListAction.Yes)
                {
                    //Guardar el resultado del Match en la cabecera de la poliza
                    oPolicyManager.BlackListMember(new Policy.BlackListMember.Parameter
                    {
                        corpId = Corp_Id,
                        regionId = Region_Id,
                        countryId = Country_Id,
                        domesticregId = Domesticreg_Id,
                        stateProvId = State_Prov_Id,
                        cityId = City_Id,
                        officeId = Office_Id,
                        caseSeqNo = Case_Seq_No,
                        histSeqNo = Hist_Seq_No,
                        blacklistMember = hasProblem ? "MA" : "NM",
                        userId = UserID
                    });

                    //Actualizar la tabla plana de cotizaciones y/o polizas
                    UpdateTempTable(PolicyNo, UserID.GetValueOrDefault());
                }
            }

            return
                MensajeAMostrar;

        }

        #region Personal Document Validations
        public class ValidationCedula
        {
            public Boolean ValidCedula { get; set; }
            public Boolean InvalidCedula { get; set; }
        }
        public class ValidationRNC
        {
            public Boolean ValidRNC { get; set; }
            public Boolean InvalidRNC { get; set; }
        }
        /// <summary>
        /// Metodos para validar un Cedula RNC
        public ValidationCedula ValidationCedulaValid(string IDCedula)
        {
            var ExistsItem = new ValidationCedula { ValidCedula = false, InvalidCedula = false };

            var x = this.oContactManager.GetResultCedula(IDCedula);

            if ((x.Cedula == 0))
            {
                ExistsItem.InvalidCedula = true;
                return ExistsItem;
            }
            else if (x.Cedula == 1)
            {
                ExistsItem.InvalidCedula = false;
                return ExistsItem;
            }

            return ExistsItem;
        }
        public ValidationRNC ValidationRNCValid(string IDRNC)
        {
            var ExistsItem = new ValidationRNC { ValidRNC = false, InvalidRNC = false };

            var y = this.oContactManager.GetResultRNC(IDRNC);


            if (y.RNC == 0)
            {
                ExistsItem.InvalidRNC = true;
                return ExistsItem;
            }
            else if (y.RNC == 1)
            {
                ExistsItem.InvalidRNC = false;
                return ExistsItem;
            }

            return ExistsItem;
        }
        #endregion

        #region OnBase Document


        public void SendFileToOnBase(Entity.UnderWriting.Entities.Requirement.OnBaseAditionalInformation add, string IndexFileTemplateLocation, string DocumentType, int catid, int typeid, string path)
        {
            bool executeProcess;

            try
            {
                var vLifeOnBaseAvailable = ConfigurationManager.AppSettings["LifeOnBaseAvailable"];
                bool.TryParse(vLifeOnBaseAvailable, out executeProcess);
            }
            catch (Exception)
            {
                executeProcess = false;
            }

            if (executeProcess)
            {
                var DocumentRequirement = oRequirementManager.GetRequirementDocumentOnBase(DocumentType, Corp_Id, catid, typeid);

                if (DocumentRequirement.On_Base_Name_Key != null)
                {
                    OnBaseFile OBF = new OnBaseFile();

                    var plandata = oPolicyManager.GetPlanData(
                          Corp_Id,
                          Region_Id,
                          Country_Id,
                          Domesticreg_Id,
                          State_Prov_Id,
                          City_Id,
                          Office_Id,
                          Case_Seq_No,
                          Hist_Seq_No);

                    FileItem File = new FileItem();

                    File.DocTypeName = DocumentRequirement.On_Base_Name_Key;
                    File.CreatedDate = string.Format("{0:MM/dd/yyyy}", DateTime.Now.ToShortDateString());
                    File.OnBaseFileFormat = System.Configuration.ConfigurationManager.AppSettings["LifeOnBaseFileFormat"];
                    File.EsVersion = 1;
                    File.Plan = plandata.PlanName;
                    File.Product = string.Empty;
                    File.NUP = Case_Seq_No;
                    File.PolicyNo = plandata.PolicyNo;

                    if (catid == 2)
                    {
                        if (DocumentRequirement.Clasification == "Examen")
                        {
                            File.TypeMedicalExamination = DocumentRequirement.DescriptionName;
                        }

                        if (DocumentRequirement.Clasification == "Formulario")
                        {
                            File.TypeMedicalForm = DocumentRequirement.DescriptionName;
                        }
                    }

                    if (catid == 3)
                    {
                        File.TypeFinancialForm = DocumentRequirement.DescriptionName;
                    }

                    if (catid == 4)
                    {
                        File.TypeFormActivity = DocumentRequirement.DescriptionName;
                    }

                    if (catid == 5)
                    {
                        File.OccupationalFormType = DocumentRequirement.DescriptionName;
                    }

                    if (add.Contact_ID != null)
                    {
                        var contact = oContactManager.GetContact(Corp_Id, add.Contact_ID.Value, 2);

                        File.insured = contact.FullName;
                        File.InsuredNumber = contact.ContactId;
                        File.IdentificationNo = contact.Id;
                        File.RoleType = contact.ContactTypeId;

                        if (File.DocTypeName == "VIDSUS-Cedula")
                        {
                            if (contact.ContactIdType == 2)
                            {
                                File.DocTypeName = "VIDSUS-Pasaporte";
                            }
                            else if (contact.ContactIdType == 3)
                            {
                                File.DocTypeName = "VIDSUS-Licencia";
                            }
                            else if (contact.ContactIdType != 1)
                            {
                                File.DocTypeName = "VIDSUS-ID";
                            }
                        }
                    }
                    else
                    {
                        //Esto para los beneficiarios ya que todavia no estan generados los contact id de estos.

                        File.insured = add.InsuredName.Trim();
                        File.IdentificationNo = add.identification;
                        File.RoleType = add.Role_Type_ID.Value;

                        if (File.DocTypeName == "VIDSUS-Cedula")
                        {
                            if (add.ContactIdType == 2)
                            {
                                File.DocTypeName = "VIDSUS-Pasaporte";
                            }
                            else if (add.ContactIdType == 3)
                            {
                                File.DocTypeName = "VIDSUS-Licencia";
                            }
                            else if (add.ContactIdType != 1)
                            {
                                File.DocTypeName = "VIDSUS-ID";
                            }
                        }
                    }

                    File.EndDate = string.Empty;
                    File.BeginDate = string.Empty;
                    File.Source = "OIPA";
                    File.FullPath = path;

                    Guid FilesName = Guid.NewGuid();
                    //string IndexFileTemplateLocation = Server.MapPath(System.Configuration.ConfigurationManager.AppSettings["LifeOnBaseTemplatePath"]);
                    string IndexFileTemplate = System.Configuration.ConfigurationManager.AppSettings["LifeOnBaseTemplateFile"];
                    string OnBaseRemotePath = System.Configuration.ConfigurationManager.AppSettings["LifeOnBaseServerPath"];
                    string currentIdxFile = OBF.CreateIndexFile(FilesName, OnBaseRemotePath);

                    File.FullPath = OBF.CopyFileToServer(FilesName, File.FullPath, OnBaseRemotePath);
                    OBF.ReplaceIndexFileWithTemplate(IndexFileTemplateLocation, IndexFileTemplate, currentIdxFile, File);
                }
                else
                {
                    if (DocumentType == "R")
                    {
                        throw new ArgumentException(string.Format(@"No se encontro el On_Base_Name_Key en la tabla [Policy].[PL_REQUIREMENT_TYPE] 
                                              con los parametros Corp_id = {0}, Requirement_Cat_Id = {1}, Requirement_Type_Id = {2}, 
                                              se utilizo la subida del sistema original.", Corp_Id.ToString(), catid.ToString(), typeid.ToString()));

                    }
                    else
                    {
                        throw new ArgumentException(string.Format(@"No se encontro el On_Base_Name_Key en la tabla [Documents].[DOCUMENT_CATEGORY]
                                              con los parametros Cat_Id = {1}, Type_Id = {2}, 
                                              se utilizo la subida del sistema original.", catid.ToString(), typeid.ToString()));
                    }
                }
            }
        }

        public byte[] ViewFileFromOnBase(Entity.UnderWriting.Entities.Requirement.OnBaseAditionalInformation add, string DocumentType, int catid, int typeid)
        {

            byte[] pdfOnBase = null;

            bool executeProcess;

            try
            {
                var vLifeOnBaseAvailable = ConfigurationManager.AppSettings["LifeOnBaseAvailable"];
                bool.TryParse(vLifeOnBaseAvailable, out executeProcess);
            }
            catch (Exception)
            {
                executeProcess = false;
            }

            if (executeProcess)
            {
                var DocumentRequirement = oRequirementManager.GetRequirementDocumentOnBase(DocumentType, Corp_Id, catid, typeid);

                if (DocumentRequirement.On_Base_Name_Key != null)
                {
                    try
                    {
                        if (add.Contact_ID != null)
                        {
                            var plandata = oPolicyManager.GetPlanData(
                                           Corp_Id,
                                           Region_Id,
                                           Country_Id,
                                           Domesticreg_Id,
                                           State_Prov_Id,
                                           City_Id,
                                           Office_Id,
                                           Case_Seq_No,
                                           Hist_Seq_No);

                            var contact = oContactManager.GetContact(Corp_Id, add.Contact_ID.Value, 2);

                            OnBaseSearchDocument.CustomQueryKeywordsGetDocument ParametrosBusqueda = new OnBaseSearchDocument.CustomQueryKeywordsGetDocument();

                            ParametrosBusqueda.NombredelAsegurado = contact.FullName.Trim();
                            ParametrosBusqueda.NúmerodePóliza = plandata.PolicyNo;
                            ParametrosBusqueda.Plan = plandata.PlanName;
                            ParametrosBusqueda.NúmerodeAsegurado = add.Contact_ID.ToString();

                            if (DocumentRequirement.On_Base_Name_Key == "VIDSUS-Cedula")
                            {
                                if (contact.ContactIdType == 2)
                                {
                                    DocumentRequirement.On_Base_Name_Key = "VIDSUS-Pasaporte";
                                }
                                else if (contact.ContactIdType == 3)
                                {
                                    DocumentRequirement.On_Base_Name_Key = "VIDSUS-Licencia";
                                }
                                else if (contact.ContactIdType != 1)
                                {
                                    DocumentRequirement.On_Base_Name_Key = "VIDSUS-ID";
                                }
                            }

                            if (catid == 2 && DocumentType == "R")
                            {
                                if (DocumentRequirement.Clasification == "Examen")
                                {
                                    ParametrosBusqueda.TipodeExamenMedico = DocumentRequirement.DescriptionName;
                                }

                                if (DocumentRequirement.Clasification == "Formulario")
                                {
                                    ParametrosBusqueda.TipodeFormularioMedico = DocumentRequirement.DescriptionName;
                                }
                            }

                            if (catid == 3 && DocumentType == "R")
                            {
                                ParametrosBusqueda.TipodeFormularioFinanciero = DocumentRequirement.DescriptionName;
                            }

                            if (catid == 4 && DocumentType == "R")
                            {
                                ParametrosBusqueda.TipodeFormularioActividad = DocumentRequirement.DescriptionName;
                            }

                            if (catid == 5 && DocumentType == "R")
                            {
                                ParametrosBusqueda.TipodeFormularioOcupacional = DocumentRequirement.DescriptionName;
                            }

                            OnBaseSearchDocument.OBCustomQueryGetDocument querydata = new OnBaseSearchDocument.OBCustomQueryGetDocument()
                            {
                                Keywords = ParametrosBusqueda
                            };

                            OnBaseSearchDocument.HylandOutBoundContractClient service = new OnBaseSearchDocument.HylandOutBoundContractClient();
                            OnBaseSearchDocument.CustomQueryDispColResponseGetDocument datos = service.GetDocument(querydata);

                            OnBaseSearchDocument.Document[] doc = datos.DocumentResults;

                            var DocumentFilterByNameKey = doc.Where(x => x.docTypeName.ToLower() == DocumentRequirement.On_Base_Name_Key.ToLower() && x.DisplayColumns.NombredelAsegurado.ToLower() == contact.FullName.ToLower());

                            int cantDocument = DocumentFilterByNameKey.Count();

                            if (cantDocument > 0)
                            {
                                string dochandle = DocumentFilterByNameKey.LastOrDefault().documentHandle;

                                OnBaseDownloadDocument.DocumentBytesInput dquerydata = new OnBaseDownloadDocument.DocumentBytesInput()
                                {
                                    documentHandle = dochandle
                                };

                                OnBaseDownloadDocument.HylandOutBoundContractClient ServiceDownload = new OnBaseDownloadDocument.HylandOutBoundContractClient();
                                var Result = ServiceDownload.Get_document_data(dquerydata);

                                pdfOnBase = Convert.FromBase64String(Result.Base64FileStream);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        oPolicyManager.InsertLog(new Entity.UnderWriting.Entities.Policy.LogParameter
                        {
                            LogTypeId = WEB.NewBusiness.Common.Utility.LogTypeId.Exception.ToInt(),
                            CorpId = Corp_Id,
                            CompanyId = CompanyId,
                            ProjectId = ProjectId,
                            Identifier = Guid.NewGuid(),
                            LogValue = "Se encontro un problema con el proceso OnBaseTranfer al momento de ver el documento, Detalle: " + ex.Message.ToString()
                        });
                    }
                }
            }
            return pdfOnBase;
        }


        public List<string> validateChassisPlate(string Chassis, string Registry)
        {
            var ListError = new List<string>(0);

            var JSONResult = oSFPolicyServiceClient.CheckChassisOrRegistry(new oSysFlexService.PolicyVehicleKey
            {
                Chassis = Chassis,
                Registry = Registry
            }).JSONResult;

            if (JSONResult == null)
                JSONResult = "[]";

            var OldValue = "{}";
            var resultString = JSONResult.Replace(OldValue, "0");

            //Verificar si el o los vehiculos de esta poliza no esta ya registrado en sysflex
            var dataResult = Utility.deserializeJSON<IEnumerable<Utility.VehicleIdentification>>(resultString);

            if (dataResult.Any())
            {
                foreach (var item in dataResult)
                {
                    string MessageError = (item.Type == "Placa") ? string.Format(Resources.PlateValidation, item.Value.ToUpper(), item.Policy)
                                                          : string.Format(Resources.ChassisValidation, item.Value.ToUpper(), item.Policy);

                    ListError.Add(MessageError);
                }

                ListError.Insert(0, Resources.ChassisOrPlateValidation);
            }

            return ListError;
        }


        #endregion


        #region Coupon
        public Policy.CouponInfo getCouponInfo(string policyno = "")
        {
            if (!string.IsNullOrEmpty(policyno))
            {
                var couponData = oPolicyManager.GetCouponInfo(policyno);
                return
                    couponData;
            }
            else
            {
                var couponData = oPolicyManager.GetCouponInfo(this.Policy_Id);
                return
                    couponData;
            }
        }

        public void UpdateCouponProspect(GlobalServices.CouponsCouponProspect parameters)
        {
            try
            {
                var set = oPolicyGlobalService.SetCouponProspect(parameters);
            }
            catch (Exception ex)
            {

                //throw;
            }
        }
        #endregion

        #region Condiciones Particulares Propiedad
        /// <summary>
        /// Generar la Cotizacion de Property
        /// </summary>
        /// <param name="corpId"></param>
        /// <param name="regionId"></param>
        /// <param name="countryId"></param>
        /// <param name="domesticRegId"></param>
        /// <param name="stateProvId"></param>
        /// <param name="cityId"></param>
        /// <param name="officeId"></param>
        /// <param name="caseSeqNo"></param>
        /// <param name="histSeqNo"></param>
        /// <param name="ServerMapPath"></param>
        /// <param name="UniqueID"></param>
        /// <param name="templateType"></param>
        /// <returns></returns>
        public byte[] GenerateXMLParticularConditionPropertyAlliedLinesThuderhead(int corpId, int regionId, int countryId, int domesticRegId, int stateProvId, int cityId
                                                           , int officeId, int caseSeqNo, int histSeqNo, String ServerMapPath, long? UniqueID = null
                                                           , ThunderheadWrap.Service.TemplateType templateType = ThunderheadWrap.Service.TemplateType.CondicionesParticulares)
        {
            byte[] result = null;

            #region Consultas Varias

            var Email = string.Empty;
            var vRamo = "107"; // Incendio y Lineas aliadas

            //Objeto de la Data de la Poliza
            var PolicyData = oPolicyManager.GetPolicy(corpId, regionId, countryId, domesticRegId, stateProvId, cityId
             , officeId, caseSeqNo, histSeqNo);

            //Objeto de la data del Contacto
            var ContactData = oContactManager.GetContact(corpId, PolicyData.ContactId, Language.ToInt());

            if (ContactData == null)
                throw new Exception(Resources.QuotationDontHasContact);

            //Correo del contacto
            var DataEmail = oContactManager
                        .GetCommunicatonEmail(Corp_Id, ContactData.ContactId, Language.ToInt());


            var EmailResult = DataEmail
                             .FirstOrDefault(x => x.IsPrimary);

            if (EmailResult == null)
                EmailResult = DataEmail.FirstOrDefault();

            if (EmailResult != null)
                Email = EmailResult.EmailAdress;

            //Direccion del Contacto
            var oAddress = oContactManager
                          .GetCommunicatonAdress(corpId, ContactData.ContactId, Language.ToInt())
                          .FirstOrDefault(x => x.DirectoryTypeId == 5);

            var Direccion = (oAddress != null) ? string.Concat(oAddress.StreetAddress, ", ", oAddress.MunicipioDesc, ", ", oAddress.CityDesc) : "-";

            //Telefonos del contacto
            var oPhones = oContactManager
                          .GetCommunicatonPhone(corpId, ContactData.ContactId, Language.ToInt());

            //Id Doc
            var dataId = oContactManager.GetAllIdDocumentInformation(PolicyData.ContactId, Language.ToInt());
            var RecordId = dataId.FirstOrDefault();
            var dataPhonePrimary = oPhones.FirstOrDefault(x => x.IsPrimary);

            var PhoneNumber = dataPhonePrimary != null ?
                              string.Format("{0}{1}{2}", dataPhonePrimary.CountryCode, dataPhonePrimary.AreaCode, dataPhonePrimary.PhoneNumber)
                              : default(string);
            #endregion

            var oDataSet = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Dataset();
            var oTransaction = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Transaction();
            oTransaction.DocumentId = ConfigurationManager.AppSettings["DocumentIDCondicionesParticularesLineasAliadas"];//"1335506546"


            var oPolicyInfo = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.PolicyInfo();

            oPolicyInfo.NoPoliza = PolicyData.PolicyNo;
            //oPolicyInfo.Ramo = vRamo;
            oPolicyInfo.Ramo = "Incendio Y Lineas Aliadas";
            oPolicyInfo.AgenteComercial = PolicyData.Agent_Name + " (" + PolicyData.AgentCode + ")";
            var agentSupervisor = oPolicyManager.GetAgentSupervisor(corpId, PolicyData.Agent_Id);
            oPolicyInfo.Branch = PolicyOffice;

            var oCotizacionFire = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CotizacionFire>(0);
            WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Cliente oCliente;
            List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages> oCoverages = new List<Thunderhead.LineasAliadas.Coverages>();
            var oAdditionals = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Additionals>(0);

            var oPaymentDetail = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.PaymentDetail();

            oTransaction.Username = this.UserFullName;

            //Datos del Cliente
            oCliente = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Cliente
            {
                FullName = ContactData.FullName,
                IdNumber = RecordId.Id,
                TelephoneNumber = PhoneNumber,
                Email = Email,
                Direccion = Direccion,
                ShippingAddress = Direccion,
            };

            string currencyDesc = "";

            switch (PolicyData.CurrencyId.Value)
            {
                case 1:
                    currencyDesc = RESOURCE.UnderWriting.NewBussiness.Resources.CurrencyLabelDolar;// "Dolar";
                    break;
                case 2:
                    currencyDesc = RESOURCE.UnderWriting.NewBussiness.Resources.CurrencyLabelEur; //"Euros";
                    break;
                case 3:
                    currencyDesc = RESOURCE.UnderWriting.NewBussiness.Resources.CurrencyLabelDop; //"Pesos";
                    break;
            }

            DateTime? BeginDate = null;
            DateTime? EndDate = null;

            var isEfective = (StatusNameKey == "EFECT");

            BeginDate = PolicyData.PolicyEffectiveDate.HasValue || isEfective ? PolicyData.PolicyEffectiveDate.GetValueOrDefault() : DateTime.Now;
            EndDate = PolicyData.ExpirationDate.HasValue || isEfective ? PolicyData.ExpirationDate.Value : BeginDate.Value.AddYears(1);
            oPolicyInfo.PolicyPeriodStart = BeginDate.Value.ToString("dd/MM/yyyy"); //Esta parte es obligatorio enviarla para que funcione el Condicionado de Todo Riesgo De Propiedades
            oPolicyInfo.PolicyPeriodEnd = EndDate.Value.ToString("dd/MM/yyyy"); //Esta parte es obligatorio enviarla para que funcione el Condicionado de Todo Riesgo De Propiedades
            oPolicyInfo.InsuredAmount = InsuranceAmount;

            var oCoInsurance = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CoInsurance();

            oPaymentDetail.Currency = currencyDesc;
            oPaymentDetail.NoFactura = PolicyData.InvoiceNumber;


            var oEndorsementsClauses = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.EndorsementsClauses>();
            var oEndorsement = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Endorsement();
            bool HasEndorsement = false;
            #region Procesando clausulas de endosos
            var DataClausulas = oDropDownManager.GetDropDownByType(new DropDown.Parameter
            {
                DropDownType = "EndosoClausulas"
            }).ToList();

            if (DataClausulas.Any())
            {
                foreach (var item in DataClausulas)
                {
                    oEndorsementsClauses.Add(new Thunderhead.LineasAliadas.EndorsementsClauses
                    {
                        Description = item.ElementDesc
                    });
                }
            }

            #endregion


            switch (AlliedLinesProductBehavior)
            {
                #region Propiedad
                case Utility.AlliedLinesType.Property:
                    var dataProperty = oPropertyManager.GetProperty(new Entity.UnderWriting.Entities.Property.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticregId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    }).ToList();

                    if (dataProperty != null && dataProperty.Count() > 0)
                    {
                        var setCotizacionFire = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CotizacionFire();
                        oPolicyInfo.Product = dataProperty.Count() == 1 ? dataProperty.FirstOrDefault().ProductDesc : "Varios";
                        oPolicyInfo.InsuredAmount = oPolicyInfo.InsuredAmount;

                        //oTransaction.Plan = dataProperty.FirstOrDefault().ProductDesc;
                        oEndorsement.Beneficiary = string.IsNullOrEmpty(dataProperty[0].EndorsementBeneficiary) ? "-" : dataProperty[0].EndorsementBeneficiary;
                        oEndorsement.AmountCeded = dataProperty[0].EndorsementAmount.GetValueOrDefault();

                        var Property = GetDataProperty(dataProperty[0].UniquePropertyId.ToInt()).ToList();
                        if (Property.Any())
                        {
                            setCotizacionFire.TipoNegocio = Property[0].BusinessTypeDesc;
                            setCotizacionFire.Actividad = Property[0].ActivfityTypeDesc;
                            setCotizacionFire.TipoConstruccion = Property[0].PropertyBuildTypeDesc;
                            setCotizacionFire.Location = string.Concat(Property[0].AddressStreetFull, !string.IsNullOrEmpty(Property[0].StateProvDesc) ? ", " + Property[0].StateProvDesc : "", !string.IsNullOrEmpty(Property[0].MunicipDesc) ? ", " + Property[0].MunicipDesc : "", !string.IsNullOrEmpty(Property[0].citydesc) ? ", " + Property[0].citydesc : "");
                        }

                        foreach (var dp in dataProperty)
                        {
                            oCoverages = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages>();
                            if (dp.Endorsement)
                                HasEndorsement = true;

                            string Producto = dp.ProductDesc.ToUpper();

                            //if (Producto.ToLower().Contains("todo riesgo propiedades"))
                            //{
                            //    oTransaction.DocumentId = ConfigurationManager.AppSettings["DocumentIDConditionedAllRiskProperty"];//"1335506528"
                            //}

                            /*Coberturas*/
                            var dataCoverageProperty = oPropertyManager.GetPropertyInsuredDetailCoverage(new Property.Insured.Detail.Coverage.GetDetailCoverageResult.Key
                            {
                                corpId = Corp_Id,
                                uniquePropertyId = dp.UniquePropertyId
                            }).Select(c => new
                            {
                                CurrencyId = c.CurrencyId,
                                UnitaryPrice = c.UnitaryPrice,
                                PackagePrice = c.PackagePrice,
                                DeductibleAmount = c.DeductibleAmount,
                                DeductiblePercentage = c.DeductiblePercentage.Value,
                                ManualDeductibleAmount = c.ManualDeductibleAmount,
                                ManualDeductiblePercentage = c.ManualDeductiblePercentage,
                                CoverageLimit = c.CoverageLimit.HasValue && c.CoverageLimit.Value > 0 ? c.CoverageLimit.Value.ToFormatNumeric() : "0",
                                CoverageStatus = c.CoverageStatus,
                                CorpId = c.CorpId,
                                UniquePropertyId = c.UniquePropertyId,
                                RegionId = c.RegionId,
                                CountryId = c.CountryId,
                                BlTypeId = c.BlTypeId,
                                BlId = c.BlId,
                                ProductId = c.ProductId,
                                VehicleTypeId = c.VehicleTypeId,
                                GroupId = c.GroupId,
                                CoverageTypeId = c.CoverageTypeId,
                                CoverageId = c.CoverageId,
                                CoverageTypeDesc = c.CoverageTypeDesc,
                                GroupDesc = c.GroupDesc,
                                CoverageDesc = c.CoverageDesc,
                                CoinsurancePercentage = c.CoinsurancePercentage.HasValue && c.CoinsurancePercentage.Value > 0 ? c.CoinsurancePercentage.Value.Truncate() + "%" : "-",
                                DeductibleInDay = c.DeductibleInDay,
                                BaseDeducible = c.BaseDeducible,
                                CoveragePercentage = c.CoveragePercentage

                            }).ToList();

                            if (dataCoverageProperty.Any())
                            {
                                var BasicCoverages = dataCoverageProperty.Where(o => o.CoverageTypeId == 6).ToList(); //obteniendo el listado de coberturas basicas para tomar el Coverage_Percentage
                                if (BasicCoverages.Any())
                                {
                                    oCoInsurance.ParticipationP = BasicCoverages[0].CoinsurancePercentage.Replace("%", "").ToDecimal();
                                    oCoInsurance.CoInsurers = "ATLANTICA SEGUROS S.A.";
                                }
                                var CoverageToProcess = dataCoverageProperty.Where(o => o.CoverageTypeId != 7).ToList(); // hago otro query para excluir e la lista las coberturas adicionales
                                foreach (var cp in CoverageToProcess)
                                {
                                    var setCoverages = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages();

                                    setCoverages.Description = cp.CoverageDesc.Capitalize(' ');
                                    setCoverages.Percentage = cp.CoveragePercentage.GetValueOrDefault().ToString("#,0.00", CultureInfo.InvariantCulture).Replace(",", "");//.ToString("N2");
                                    setCoverages.DeducibleP = cp.DeductiblePercentage.ToDecimal();
                                    setCoverages.Maximo = cp.CoverageLimit.ToDecimal();
                                    setCoverages.Minimo = cp.DeductibleAmount.HasValue ? cp.DeductibleAmount.Value.ToDecimal() : 0;
                                    setCoverages.Base = string.IsNullOrEmpty(cp.BaseDeducible) ? "" : cp.BaseDeducible;
                                    setCoverages.Limit = string.Format(cp.CoverageLimit, "N2");
                                    setCoverages.Type = cp.CoverageTypeDesc;

                                    oCoverages.Add(setCoverages);
                                }

                                //proceso las coberturas adicionales
                                var AditionalCoverage = dataCoverageProperty.Where(o => o.CoverageTypeId == 7).ToList();
                                foreach (var cp in AditionalCoverage)
                                {
                                    oAdditionals.Add(new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Additionals()
                                    {
                                        Description = cp.CoverageDesc.Capitalize(' '),
                                        Limit = cp.CoverageLimit.ToDecimal()
                                        //Percentage = "0"
                                    });
                                }
                            }

                            setCotizacionFire.ElementoAsegurado = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado>();

                            oPolicyInfo.Product = Producto;


                            /*Interés Asegurado*/
                            var setElementoAsegurado = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Edificacion";
                            setElementoAsegurado.Valor = dp.EdificationValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Maquinarias";
                            setElementoAsegurado.Valor = dp.MachineryValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Mobiliario y Equipos";
                            setElementoAsegurado.Valor = dp.FurnitureAndEquipmentValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Mejoras";
                            setElementoAsegurado.Valor = dp.RemodelingAndFittingValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado();

                            setElementoAsegurado.Descripcion = "Existencias";
                            setElementoAsegurado.Valor = dp.StockValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado();
                            setElementoAsegurado.Descripcion = "Otros";
                            setElementoAsegurado.Valor = dp.ValueObjectAndArtValue.ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);

                            setElementoAsegurado = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.ElementoAsegurado();
                            setElementoAsegurado.Descripcion = "Total";
                            setElementoAsegurado.Valor = (dp.EdificationValue + dp.MachineryValue + dp.FurnitureAndEquipmentValue + dp.RemodelingAndFittingValue + dp.StockValue + dp.ValueObjectAndArtValue).ToFormatNumeric().Replace(",", "");
                            setCotizacionFire.ElementoAsegurado.Add(setElementoAsegurado);
                            /**/

                            //Acuerdo de pago
                            var setCondicionesPago = GetPaymentAgreementQuotsAlliedLines(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());


                            //setCotizacionFire.Construccion.Add(setConstruccion);
                            setCotizacionFire.CondicionesPago = setCondicionesPago;

                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }
                    break;
                #endregion
                #region Cascos Maritimos
                case Utility.AlliedLinesType.Navy:
                    var dataNavy = oNavyManager.GetNavyInsured(new Entity.UnderWriting.Entities.Navy.Insured.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticRegId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataNavy != null && dataNavy.Count() > 0)
                    {
                        oPolicyInfo.Product = dataNavy.Count() == 1 ? dataNavy.FirstOrDefault().ProductDesc : "Varios";

                        foreach (var dp in dataNavy)
                        {
                            oCoverages = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages>();

                            var dataCoverages = oNavyManager.GetNavyInsuredCoverage(new Navy.Insured.Coverage.Key
                            {
                                CorpId = Corp_Id,
                                UniqueNavyId = (int)dp.UniqueNavyId
                            });

                            foreach (var itemCoverages in dataCoverages)
                            {
                                var setCoverages = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages
                                {
                                    Description = itemCoverages.CoverageDesc.Capitalize(' '),
                                    Percentage = itemCoverages.CoveragePercentage.ToDecimal().ToString("0.##"),
                                    DeducibleP = itemCoverages.DeductiblePercentage.GetValueOrDefault().Truncate(),
                                    Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                    Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,
                                    Base = string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? "" : itemCoverages.BaseDeducible,
                                    Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                    Type = itemCoverages.CoverageTypeDesc
                                };

                                oCoverages.Add(setCoverages);
                            }

                            //Acuerdo de pago
                            var setCondicionesPago = GetPaymentAgreementQuotsAlliedLines(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());

                            var setCotizacionFire = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CotizacionFire
                            {
                                CondicionesPago = setCondicionesPago
                            };



                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }
                    break;
                #endregion
                #region Cascos Aereos
                case Utility.AlliedLinesType.Airplane:
                    var dataAirplane = oAirPlaneManager.GetAirplaneInsured(new Entity.UnderWriting.Entities.Airplane.Insured.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticRegId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataAirplane != null && dataAirplane.Count() > 0)
                    {
                        oPolicyInfo.Product = dataAirplane.Count() == 1 ? dataAirplane.FirstOrDefault().ProductDesc : "Varios";

                        foreach (var dp in dataAirplane)
                        {
                            oCoverages = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages>();

                            var dataCoverages = oAirPlaneManager.GetAirPlaneInsuredCoverage(new Airplane.Insured.Coverage.Key
                            {
                                CorpId = Corp_Id,
                                UniqueAirplaneId = (int)dp.UniqueAirplaneId
                            });

                            foreach (var itemCoverages in dataCoverages)
                            {
                                var setCoverages = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages
                                {
                                    Description = itemCoverages.CoverageDesc.Capitalize(' '),
                                    Percentage = itemCoverages.CoveragePercentage.GetValueOrDefault().ToDecimal().ToString("0.##"),
                                    DeducibleP = itemCoverages.DeductiblePercentage.GetValueOrDefault().Truncate(),
                                    Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                    Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,
                                    Base = string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? "" : itemCoverages.BaseDeducible,
                                    Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                    Type = itemCoverages.CoverageTypeDesc
                                };

                                oCoverages.Add(setCoverages);
                            }

                            /*Condiciones Pago*/
                            var setCondicionesPago = GetPaymentAgreementQuotsAlliedLines(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());

                            var setCotizacionFire = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CotizacionFire
                            {
                                CondicionesPago = setCondicionesPago,

                            };

                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }

                    break;
                #endregion
                #region Transporte
                case Utility.AlliedLinesType.Transport:
                    var dataTransport = oTransportManager.GetTransportInsured(new Entity.UnderWriting.Entities.Transport.Insured.Key
                    {
                        CorpId = Corp_Id,
                        RegionId = Region_Id,
                        CountryId = Country_Id,
                        DomesticregId = Domesticreg_Id,
                        StateProvId = State_Prov_Id,
                        CityId = City_Id,
                        OfficeId = Office_Id,
                        CaseSeqNo = Case_Seq_No,
                        HistSeqNo = Hist_Seq_No
                    });

                    if (dataTransport != null && dataTransport.Count() > 0)
                    {
                        oPolicyInfo.Product = dataTransport.Count() == 1 ? dataTransport.FirstOrDefault().ProductDesc : "Varios";
                        oPolicyInfo.InsuredAmount = oPolicyInfo.InsuredAmount == null ? 0 : oPolicyInfo.InsuredAmount;

                        foreach (var dp in dataTransport)
                        {
                            oCoverages = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages>();

                            var dataCoverages = oTransportManager.GetTransportInsuredCoverage(new Transport.Insured.Coverage.Key
                            {
                                CorpId = Corp_Id,
                                UniqueTransportId = (int)dp.UniqueTransportId
                            });

                            foreach (var itemCoverages in dataCoverages)
                            {
                                var setCoverages = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages
                                {
                                    Description = itemCoverages.CoverageDesc.Capitalize(' '),
                                    Percentage = itemCoverages.CoveragePercentage.GetValueOrDefault().ToDecimal().ToString("0.##"),
                                    DeducibleP = itemCoverages.DeductiblePercentage.GetValueOrDefault().Truncate(),
                                    Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                    Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,
                                    Base = !string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? itemCoverages.BaseDeducible : "",
                                    Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                    Type = itemCoverages.CoverageTypeDesc
                                };

                                oCoverages.Add(setCoverages);
                            }

                            var setCotizacionFire = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CotizacionFire();

                            /*Condiciones Pago*/
                            var setCondicionesPago = GetPaymentAgreementQuotsAlliedLines(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());
                            setCotizacionFire.CondicionesPago = setCondicionesPago;
                            oCotizacionFire.Add(setCotizacionFire);
                        }
                    }
                    break;
                #endregion
                #region Fianzas
                case Utility.AlliedLinesType.Bail:
                    var dataBail = oBailManager.GetBailInsured(new Entity.UnderWriting.Entities.Bail.Insured.Key
                    {
                        CorpId = this.Corp_Id,
                        RegionId = this.Region_Id,
                        CountryId = this.Country_Id,
                        DomesticRegId = this.Domesticreg_Id,
                        StateProvId = this.State_Prov_Id,
                        CityId = this.City_Id,
                        OfficeId = this.Office_Id,
                        CaseSeqNo = this.Case_Seq_No,
                        HistSeqNo = this.Hist_Seq_No,
                        BailId = null,
                        BlTypeId = PolicyData.BussinessLineType.GetValueOrDefault(),
                        BlId = PolicyData.BussinessLineId.GetValueOrDefault(),
                        ProductId = PolicyData.ProductId.GetValueOrDefault()
                    });

                    if (!dataBail.Any())
                        throw new Exception("Esta cotización no tiene ningun item");

                    oPolicyInfo.Product = dataBail.Count() == 1 ? dataBail.FirstOrDefault().ProductDesc : "Varios";


                    var Start = BeginDate.GetValueOrDefault().Date.ToString("dd/MM/yyyy hh:mm tt");
                    var End = EndDate.GetValueOrDefault().Date.ToString("dd/MM/yyyy hh:mm tt");

                    foreach (var item in dataBail)
                    {
                        oCoverages = new List<WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages>();

                        var BailCoverages = oBailManager.GetBailInsuredCoverage(new Entity.UnderWriting.Entities.Bail.Insured.Coverage.Key
                        {
                            CorpId = this.Corp_Id,
                            UniqueBailId = item.UniqueBailId
                        });

                        if (!BailCoverages.Any())
                            throw new Exception("Esta cotización no tiene coberturas");

                        foreach (var itemCoverages in BailCoverages)
                        {
                            var setCoverages = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.Coverages
                            {
                                Description = itemCoverages.CoverageDesc.Capitalize(' '),
                                Percentage = itemCoverages.CoveragePercentage.GetValueOrDefault().ToDecimal().ToString("0.##"),
                                DeducibleP = itemCoverages.DeductiblePercentage.GetValueOrDefault().Truncate(),
                                Maximo = itemCoverages.CoverageLimit.HasValue ? itemCoverages.CoverageLimit.Value : 0,
                                Minimo = itemCoverages.DeductibleAmount.HasValue ? itemCoverages.DeductibleAmount.Value : 0,
                                Base = !string.IsNullOrEmpty(itemCoverages.BaseDeducible) ? itemCoverages.BaseDeducible : "",
                                Limit = itemCoverages.CoverageLimit.HasValue && itemCoverages.CoverageLimit.Value > 0 ? itemCoverages.CoverageLimit.ToFormatNumeric() : "-",
                                Type = itemCoverages.CoverageTypeDesc
                            };

                            oCoverages.Add(setCoverages);
                        }

                        var setCondicionesPago = GetPaymentAgreementQuotsAlliedLines(corpId, regionId, countryId, domesticRegId, stateProvId, cityId, officeId, caseSeqNo, histSeqNo, PolicyData.AnnualPremium.GetValueOrDefault(), PolicyData.TaxPremium.GetValueOrDefault());

                        string Producto = item.ProductDesc;
                        if (Producto.ToLower().Contains("fianzas"))
                        { Producto = "Fianzas"; }

                        var vCotizationFire = new WEB.NewBusiness.Common.Thunderhead.LineasAliadas.CotizacionFire
                        {
                            //Location = string.Format("{0} {1} {2} , {3} , {4}", item.AddressStreet, item.AddressNumber, item.CityDescLoc, dp.StateProvDescLoc, dp.CountryDescLoc), //dp.Address + " " + dp.addressNumber;,
                            Location = item.AddressStreet + " " + item.AddressNumber,
                            CondicionesPago = setCondicionesPago
                        };

                        oCotizacionFire.Add(vCotizationFire);
                    }

                    oDataSet.CotizacionFire = oCotizacionFire;

                    break;
                    #endregion
            }

            if (!HasEndorsement)
            {
                oEndorsementsClauses = oEndorsementsClauses.Where(o => o.Description != "I-017- Endoso Cesión de Derechos").ToList();
            }
            //Seteo del objeto DataSet
            oDataSet.Transaction = oTransaction;
            oDataSet.PolicyInfo = oPolicyInfo;
            oDataSet.Cliente = oCliente;
            oDataSet.CoInsurance = oCoInsurance;
            oDataSet.Coverages = oCoverages;
            oDataSet.Additionals = oAdditionals;

            oDataSet.EndorsementsClauses = oEndorsementsClauses;
            oDataSet.CotizacionFire = oCotizacionFire;
            oDataSet.PaymentDetail = oPaymentDetail;
            oDataSet.Endorsement = oEndorsement;

            var DocXML = SerializeToXMLString(oDataSet);

            result = Encoding.UTF8.GetBytes(DocXML);

            return
                result;
        }

        #endregion
    }
}