using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using WEB.NewBusiness.Common;
using WEB.NewBusiness.NewBusiness.Pages;
using RESOURCE.UnderWriting.NewBussiness;
using System.Globalization;

namespace WEB.NewBusiness.NewBusiness.UserControls
{
    public partial class WUCPersonalInformation : UC, IUC
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
        public String PrefixSession33
        {
            get { return hdnCurrentSession.Value; }
            set { hdnCurrentSession.Value = value; }
        }
        /// <summary>
        ///   DataBinding de los DropDownList
        /// </summary>
        public void FillDrops()
        {
            //Llenar el dropDpown de Generos
            ObjServices.GettingAllDrops(ref ddl_WUC_PI_Gender,
                                    Utility.DropDownType.Gender,
                                    "GenderDesc",
                                    "GenderId",
                                    GenerateItemSelect: true
                                   );

            //Llenar el dropDpown de Smoker
            ObjServices.GettingAllDrops(ref ddl_WUC_PI_Smoker,
                                    Utility.DropDownType.Smoker,
                                    "SmokerDesc",
                                    "SmokerId",
                                    GenerateItemSelect: true
                                   );

            //Llenar el dropDpown de Country Birth
            ObjServices.GettingAllDrops(ref ddl_WUC_PI_CountryBirth,
                                    Utility.DropDownType.Country,
                                    "GlobalCountryDesc",
                                    "CountryId",
                                    GenerateItemSelect: true
                                   );

            //Llenar el dropDpown de Country Citizenship
            ObjServices.GettingAllDrops(ref ddl_WUC_PI_CountryCitizenship,
                                    Utility.DropDownType.Country,
                                    "GlobalCountryDesc",
                                    "CountryId",
                                    GenerateItemSelect: true
                                   );

            //Llenar el dropDpown de  Marital status
            ObjServices.GettingAllDrops(ref ddl_WUC_PI_MaritalStatus,
                                    Utility.DropDownType.MaritalStatus,
                                    "MaritalStatusDesc", "MaritalStatId",
                                    GenerateItemSelect: true
                                   );

            //Llenar el dropDpown de LengOfWork
            ObjServices.GettingAllDrops(ref ddl_WUC_PI_LengthWorkFrom,
                                    Utility.DropDownType.LengthatWork,
                                    GenerateItemSelect: true
                                   );

            //Llenar el dropDpown de Months 
            ObjServices.GettingAllDrops(ref ddl_WUC_PI_LengthWorkTo,
                                    Utility.DropDownType.Months,
                                    GenerateItemSelect: true
                                   );

            //Llenar el dropDpown de Country Of Residence
            ObjServices.GettingAllDrops(ref ddlCountryOfResidence,
                                    Utility.DropDownType.CountryOfResidence,
                                    "GlobalCountryDesc",
                                    "CountryId",
                                    GenerateItemSelect: true
                                   );

        }
        protected override void OnPreRender(EventArgs e)
        {
            Translator("");
        }

        public void Translator(string Lang)
        {
            FirstName.InnerHtml = Resources.FirstNameLabel;
            MiddleName.InnerHtml = Resources.MiddleNameLabel;
            LastName.InnerHtml = Resources.LastNameLabel;
            SecondLastName.InnerHtml = Resources.SecondLastNameLabel;
            Gender.InnerHtml = Resources.GenderLabel;
            Smoker.InnerHtml = Resources.SmokerLabel;
            CountryOfBirth.InnerHtml = Resources.CountryofBirthLabel;
            CountryOfCitizenship.InnerHtml = Resources.CountryofCitizenshipLabel;
            CountryofResidence.InnerHtml = Resources.CountryOfResidenceLabel;
            DateOfBirth.InnerHtml = Resources.DateofBirthLabel;
            Age.InnerHtml = Resources.AgeLabel;
            MaritalStatus.InnerHtml = Resources.MaritalStatusLabel;
            YearlyFamilyIncome.InnerHtml = Resources.YearlyFamilyIncomeLabel;
            YearlyPersonalIncome.InnerHtml = Resources.YearlyPersonalIncomeLabel;
            OccupationType.InnerHtml = Resources.OccupationTypeLabel;
            Occupation.InnerHtml = Resources.OccupationLabel;
            CompanyName.InnerHtml = Resources.CompanyNameLabel;
            LineOfBusiness1.InnerHtml = Resources.LineofBusinessLabel + " 1";
            LineOfBusiness2.InnerHtml = Resources.LineofBusinessLabel + " 2";
            TaskPerformed.InnerHtml = Resources.TasksPerformedLabel;
            YearsatWork.InnerHtml = Resources.YearsatWorkLabel;
            Months.InnerHtml = Resources.MonthsLabel;
            ltPersonalInformation.Text = Resources.PersonalInformationLabel;

            if (isChangingLang)
                FillDrops();

            if (!hdnOccupationGroupId.Value.SIsNullOrEmpty() && !hdnOccupationId.Value.SIsNullOrEmpty())
            {
                var data = ObjServices.GettingDropData(Utility.DropDownType.Occupation);

                if (data != null)
                {
                    var dataOccup = data.FirstOrDefault(y => y.OccupGroupTypeId == hdnOccupationGroupId.ToInt() && y.OccupationId == hdnOccupationId.ToInt());

                    if (dataOccup != null)
                    {
                        txtOccupation.Text = dataOccup.OccupationDesc;
                        txtProfession.Text = dataOccup.OccupationGroupDesc;
                    }
                }
            }
        }

        public void SetDataAndUpdate(Entity.UnderWriting.Entities.Contact oContact, Utility.ContactRoleIDType Role, bool UpdateRelationShip = false)
        {
            if (oContact != null)
            {
                //Setear los datos del contacto para actualizar
                oContact.RelationshiptoAgent = Role == Utility.ContactRoleIDType.Client ? this.ObjServices.Relationship_With_Insured_Id :
                                                                                          this.ObjServices.Relationship_With_Owner_ToAgentId;
                oContact.FirstName = tb_WUC_PI_FirstName.Text;
                oContact.MiddleName = tb_WUC_PI_MiddleName.Text;
                oContact.FirstLastName = tb_WUC_PI_FirstLastName.Text;
                oContact.SecondLastName = tb_WUC_PI_SecondLastName.Text;
                oContact.Gender = ddl_WUC_PI_Gender.SelectedValue;
                oContact.Smoker = (ddl_WUC_PI_Smoker.SelectedValue == "1");
                oContact.CountryOfBirthId = ddl_WUC_PI_CountryBirth.ToInt();
                oContact.CountryOfResidenceId = ddlCountryOfResidence.ToInt();
                oContact.Dob = tb_WUC_PI_DateBirth.ToDateTime();
                oContact.Age = hdnAge.ToInt();
                oContact.MaritalStatId = ddl_WUC_PI_MaritalStatus.ToInt() == -1 ? DBNull.Value.ToInt() : ddl_WUC_PI_MaritalStatus.ToInt();
                oContact.AnnualPersonalIncome = tb_WUC_PI_PersonalIncome.ToDecimal();
                oContact.AnnualFamilyIncome = tb_WUC_PI_YearLyFamilyIncome.ToDecimal();
                oContact.OccupGroupTypeId = !string.IsNullOrEmpty(hdnOccupationGroupId.Value) ? hdnOccupationGroupId.ToInt() : (int?)null;
                oContact.OccupationId = !string.IsNullOrEmpty(hdnOccupationId.Value) ? hdnOccupationId.ToInt() : (int?)null;
                oContact.CompanyName = tb_WUC_PI_CompanyName.Text;
                oContact.LineOfBusiness = tb_WUC_PI_FirstLineBusinnes.Text;
                oContact.LineOfBusiness2 = tb_WUC_PI_SecondLineBusiness.Text;
                oContact.LaborTasks = tb_WUC_PI_TaskPerformed.Text;
                oContact.LengthWorkYear = ddl_WUC_PI_LengthWorkFrom.ToInt();
                oContact.LengthWorkMonth = ddl_WUC_PI_LengthWorkTo.ToInt();

                var WUCAddress = this.Parent.FindControl("WUCAddress");
                var ddl_WUC_A_HomeState = (DropDownList)WUCAddress.FindControl("ddl_WUC_A_HomeState");
                var ddl_WUC_A_HomeCountry = (DropDownList)WUCAddress.FindControl("ddl_WUC_A_HomeCountry");
                var ddl_WUC_A_HomeCity = (DropDownList)WUCAddress.FindControl("ddl_WUC_A_HomeCity");

                if (ddl_WUC_A_HomeCountry.SelectedValue != "-1" &&
                       ddl_WUC_A_HomeState.SelectedValue != "-1" &&
                       (ddl_WUC_A_HomeCity.SelectedValue != "-1" && ddl_WUC_A_HomeCity.Items.Count > 0)
                    )
                {
                    var HomeState = Utility.deserializeJSON<Utility.StateProvince>(ddl_WUC_A_HomeState.SelectedValue);
                    var DocRegHome = HomeState.DomesticregId;
                    var StateHome = HomeState.StateProvId;
                    var RegionID = HomeState.RegionId;


                    oContact.RegionOfResidenceId = RegionID;
                    oContact.CountryOfResidenceId = (!string.IsNullOrEmpty(ddl_WUC_A_HomeCountry.SelectedValue) ? Convert.ToInt32(ddl_WUC_A_HomeCountry.SelectedValue) : 0);
                    oContact.DomesticRegOfResidenceId = DocRegHome;
                    oContact.StateOfResidenceId = StateHome;
                    oContact.CityOfResidenceId = int.Parse(ddl_WUC_A_HomeCity.SelectedValue);

                }



                if (UpdateRelationShip)
                {
                    Control WUCBackgroundInformation = null;

                    var bodyContent = this.Page.Master.FindControl("bodyContent");

                    WUCBackgroundInformation = (!ObjServices.IsDataReviewMode) ?
                                               bodyContent.FindControl("ContactsInfoContainer").FindControl("WUCBackgroundInformation")
                                             : bodyContent.FindControl("DReviewContainer").FindControl("WUCBackgroundInformation");

                    var RelationshiptoOwner = -1;

                    if (WUCBackgroundInformation != null)
                    {
                        var cbxRelationshipwithinsured = WUCBackgroundInformation.FindControl("cbxRelationshipwithinsured");
                        if (cbxRelationshipwithinsured != null)
                        {
                            if (!string.IsNullOrEmpty((cbxRelationshipwithinsured as DropDownList).SelectedValue))
                                RelationshiptoOwner = int.Parse((cbxRelationshipwithinsured as DropDownList).SelectedValue);
                        }
                    }

                    oContact.RelationshiptoOwner = RelationshiptoOwner;
                }

                try
                {
                    //Actualizar el contacto
                    ObjServices.oContactManager.UpdateContact(oContact);
                }
                catch (Exception) { }


                //Borrar
                var ContactCitizenship = ObjServices.GetContactCitizenship();
                if (!ContactCitizenship.isNullReferenceObject())
                {
                    ObjServices.oContactManager.InsertContactCitizenship(
                        new Entity.UnderWriting.Entities.Contact.Citizenship
                        {
                            ContactId = oContact.ContactId,
                            GlobalCountryId = ContactCitizenship.GlobalCountryId,
                            Status = false,
                            CreateUser = ObjServices.UserID.Value,
                            ModifyUser = ObjServices.UserID.Value
                        });
                }

                if (ddl_WUC_PI_CountryCitizenship.SelectedValue != "-1")
                {
                    ObjServices.oContactManager.InsertContactCitizenship(
                        new Entity.UnderWriting.Entities.Contact.Citizenship
                        {
                            ContactId = oContact.ContactId,
                            GlobalCountryId = ddl_WUC_PI_CountryCitizenship.ToInt(),
                            Status = true,
                            CreateUser = ObjServices.UserID.Value,
                            ModifyUser = ObjServices.UserID.Value
                        });
                }
            }
        }

        public bool validateData()
        {
            bool isValid = true;
            String message = "";

            if (String.IsNullOrWhiteSpace(tb_WUC_PI_FirstName.Text))
            {
                isValid = false;
                message = RESOURCE.UnderWriting.NewBussiness.Resources.FirstNameRequired + "\n";
            }

            if (String.IsNullOrWhiteSpace(tb_WUC_PI_FirstLastName.Text))
            {
                isValid = false;
                message += RESOURCE.UnderWriting.NewBussiness.Resources.LastNameRequired + "\n";
            }

            if (ddl_WUC_PI_Gender.SelectedValue == "-1")
            {
                isValid = false;
                message += RESOURCE.UnderWriting.NewBussiness.Resources.GenderRequired + "\n";
            }

            if (ddl_WUC_PI_Smoker.SelectedValue == "-1")
            {
                isValid = false;
                message += RESOURCE.UnderWriting.NewBussiness.Resources.SmokerRequired + "\n";
            }

            if (ddl_WUC_PI_CountryBirth.SelectedValue == "-1")
            {
                isValid = false;
                message += RESOURCE.UnderWriting.NewBussiness.Resources.CountryOfBirthRequired + "\n";
            }

            if (ddl_WUC_PI_CountryCitizenship.SelectedValue == "-1")
            {
                isValid = false;
                message += RESOURCE.UnderWriting.NewBussiness.Resources.CountryOfCitizenshipRequired + "\n";
            }

            if (String.IsNullOrWhiteSpace(tb_WUC_PI_DateBirth.Text))
            {
                isValid = false;
                message += RESOURCE.UnderWriting.NewBussiness.Resources.DateOfBirthRequired + "\n";
            }

            if (String.IsNullOrWhiteSpace(tb_WUC_PI_YearLyFamilyIncome.Text))
            {
                isValid = false;
                message += RESOURCE.UnderWriting.NewBussiness.Resources.YearlyFamilyIncomeRequired + "\n";
            }

            if (!isValid)
                this.MessageBox(message, null, null, true, "Warning");

            return isValid;
        }

        public void save()
        {
            object WUCSearch = null;
            CheckBox chkchkOwnerIsSameAsInsured = null;
            CheckBox chkIsCompany = null;

            if (!ObjServices.IsDataReviewMode)
            {
                WUCSearch = this.Page.Master.FindControl("bodyContent").FindControl("WUCSearchContacts");
                //Buscar el checkboxes
                chkchkOwnerIsSameAsInsured = (CheckBox)(WUCSearch as WEB.NewBusiness.NewBusiness.UserControls.ContactsInfo.WUCSearch).FindControl("chkOwnerIsSameAsInsured");
                chkIsCompany = (CheckBox)(WUCSearch as WEB.NewBusiness.NewBusiness.UserControls.ContactsInfo.WUCSearch).FindControl("chkIsCompany");
            }
            else//Esto solo debe suceder si se guarda desde datareview
            {
                //Si no es un Owner
                if (!ObjServices.isOwnerContact)
                {
                    chkchkOwnerIsSameAsInsured = new CheckBox();
                    chkchkOwnerIsSameAsInsured.Checked = false;
                    chkIsCompany = new CheckBox();
                    chkIsCompany.Checked = false;
                }
                else // Si es un owner
                {
                    //Si es un compañia
                    if (ObjServices.isCompanyOwner)
                    {
                        chkchkOwnerIsSameAsInsured = new CheckBox();
                        chkchkOwnerIsSameAsInsured.Checked = false;
                        chkIsCompany = new CheckBox();
                        chkIsCompany.Checked = true;
                    }
                    else
                    {
                        chkchkOwnerIsSameAsInsured = new CheckBox();
                        chkchkOwnerIsSameAsInsured.Checked = false;
                        chkIsCompany = new CheckBox();
                        chkIsCompany.Checked = false;
                    }
                }

            }

            /*
             Si es un cliente y se hizo un busqueda por el seearch y no es un nuevo caso
             
             */
            if (!ObjServices.isOwnerContact && ObjServices.IsDataSearch && !ObjServices.isNewCase)
                SetDataAndUpdate(ObjServices.GetContact(ObjServices.AddInsuredToPolicy(ObjServices.Contact_Id.Value)), Utility.ContactRoleIDType.Client);
            else
                /*
                 si es un cliente y no es el mismo que el asegurado y no es una compañia                 
                 */
                if (!ObjServices.isOwnerContact && (!chkchkOwnerIsSameAsInsured.Checked && !chkIsCompany.Checked))
                {
                    var oContact = ObjServices.SaveNewContact();
                    SetDataAndUpdate(oContact, Utility.ContactRoleIDType.Client);
                    ObjServices.isNewCase = false;
                    ObjServices.IsDataSearch = false;
                }
                else
                {
                    /*  Salvar Owner de la poliza  */
                    var OwnerID = 0;

                    OwnerID = (ObjServices.Owner_Id < 0 || ObjServices.IsDataSearch) ? ObjServices.AddOwnerToPolicy(chkIsCompany.Checked, chkchkOwnerIsSameAsInsured.Checked)
                                                      : ObjServices.Owner_Id.Value;
                    ObjServices.Owner_Id = OwnerID;
                    ObjServices.ContactEntityID = ObjServices.Owner_Id;

                    var OwnerContact = ObjServices.GetContact(OwnerID);

                    if (!chkIsCompany.Checked)
                    {
                        if (chkchkOwnerIsSameAsInsured.Checked)
                            ObjServices.oContactManager.UpdateContact(OwnerContact);
                        else
                            SetDataAndUpdate(OwnerContact, Utility.ContactRoleIDType.Owner, true);
                    }
                    else
                    {
                        //Declaro las variables para capturar los datos
                        var InstitutionalName = string.Empty;
                        var InstitutionalCountryId = string.Empty;
                        var InstitutionalPositionAtCompany = string.Empty;
                        var InstitutionalPrincipal = string.Empty;
                        var RegistrationNumber = string.Empty;
                        var RegistrationDate = string.Empty;
                        Control WUCCompanyInfo = null;

                        var Container = (!ObjServices.IsDataReviewMode) ? "ContactsInfoContainer" : "DReviewContainer";
                        WUCCompanyInfo = this.Page.Master.FindControl("bodyContent").FindControl(Container).FindControl("WUCCompanyInfo");

                        //Llenar las variables con los controles del formulario
                        if (WUCCompanyInfo != null)
                        {
                            InstitutionalName = (WUCCompanyInfo.FindControl("txtCompanyName") as TextBox).Text;
                            InstitutionalCountryId = (WUCCompanyInfo.FindControl("ddlCountry") as DropDownList).SelectedValue;
                            InstitutionalPositionAtCompany = (WUCCompanyInfo.FindControl("txtPositionHeld") as TextBox).Text;
                            InstitutionalPrincipal = (WUCCompanyInfo.FindControl("txtContactPerson") as TextBox).Text;
                            RegistrationNumber = (WUCCompanyInfo.FindControl("txtRegistrationNumber") as TextBox).Text;
                            RegistrationDate = (WUCCompanyInfo.FindControl("txtRegistrationDate") as TextBox).Text;
                        }

                        //Actualizar la compañia
                        if (!string.IsNullOrWhiteSpace(InstitutionalName))
                            OwnerContact.InstitutionalName = InstitutionalName;

                        if (!string.IsNullOrWhiteSpace(InstitutionalCountryId))
                            OwnerContact.InstitutionalCountryId = int.Parse(InstitutionalCountryId);

                        if (!string.IsNullOrWhiteSpace(InstitutionalPositionAtCompany))
                            OwnerContact.InstitutionalPositionAtCompany = InstitutionalPositionAtCompany;

                        if (!string.IsNullOrWhiteSpace(InstitutionalPrincipal))
                            OwnerContact.InstitutionalPrincipal = InstitutionalPrincipal;

                        if (this.ObjServices.Relationship_With_Owner_ToAgentId.HasValue)
                            OwnerContact.RelationshiptoAgent = this.ObjServices.Relationship_With_Owner_ToAgentId;

                        OwnerContact.Dob = Utility.IsDate(RegistrationDate) ? RegistrationDate.ParseFormat() : (DateTime?)null;

                        //Guardar la informacion de la compañia
                        ObjServices.oContactManager.UpdateContact(OwnerContact);

                        var vSeqNo = -1;

                        var IdDataList = ObjServices.GetAllIdDocumentInformation();

                        var IdDataItem = IdDataList.Any() ? IdDataList.FirstOrDefault() : null;

                        if (IdDataItem != null)
                            vSeqNo = IdDataItem.SeqNo;

                        //Item IDdocument
                        var objIDDoc = new Entity.UnderWriting.Entities.Contact.IdDocument()
                        {
                            //Key
                            ContactId = OwnerID,
                            SeqNo = vSeqNo,
                            //Campos 
                            ContactIdType = 5,//Company Registration
                            ContactIdTypeDescription = string.Empty,
                            Id = RegistrationNumber,
                            MainIdentity = true,
                            ValidDate = Utility.IsDate(RegistrationDate) ? RegistrationDate.ParseFormat() : (DateTime?)null,
                            IssuedBy = null,
                            CountryIssuedBy = null,
                            //Información Usuario
                            UserId = ObjServices.UserID.Value
                        };

                        //Actualizar el id de la compañia RNC             
                        ObjServices.oContactManager.SetIdDocument(objIDDoc);
                        ObjServices.Owner_Id = OwnerID;
                        ObjServices.ContactEntityID = ObjServices.Owner_Id;
                    }
                }

            ObjServices.IsDataSearch = false;
            //El Tab esta completo            
            ObjServices.saveSetValidTab(currentTab == "ClientInfo" ? Utility.Tab.ClientInfo : Utility.Tab.OwnerInfo);
        }

        public void edit()
        {

        }

        public void LoadSameDataFromInsured(Entity.UnderWriting.Entities.Contact nContact)
        {
            FillDrops();

            if (nContact != null)
            {
                tb_WUC_PI_FirstName.Text = nContact.FirstName;
                tb_WUC_PI_MiddleName.Text = nContact.MiddleName;
                tb_WUC_PI_FirstLastName.Text = nContact.FirstLastName;
                tb_WUC_PI_SecondLastName.Text = nContact.SecondLastName;
                ddl_WUC_PI_Gender.SelectIndexByValue((string.IsNullOrEmpty(nContact.Gender)) ? "-1" : nContact.Gender);
                ddl_WUC_PI_Smoker.SelectIndexByValue(!nContact.Smoker.HasValue ? "-1" : (nContact.Smoker.Value ? "1" : "0"));
                ddl_WUC_PI_CountryBirth.SelectIndexByValue(nContact.CountryOfBirthId.ToString());
                tb_WUC_PI_DateBirth.Text = !nContact.Dob.HasValue ? "" : nContact.Dob.Value.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);
                tb_WUC_PI_Age.Text = !nContact.Age.HasValue ? "" : nContact.Age.Value.ToString();
                hdnAge.Value = !nContact.Age.HasValue ? "" : nContact.Age.Value.ToString();
                ddlCountryOfResidence.SelectIndexByValue(nContact.CountryOfResidenceId.ToString(), true);

                ddl_WUC_PI_MaritalStatus.SelectIndexByValue(nContact.MaritalStatId.ToString());
                tb_WUC_PI_PersonalIncome.Text = !nContact.AnnualPersonalIncome.HasValue ? ""
                    : nContact.AnnualPersonalIncome.Value.ToString(NumberFormatInfo.InvariantInfo);
                tb_WUC_PI_YearLyFamilyIncome.Text = !nContact.AnnualFamilyIncome.HasValue ? ""
                    : nContact.AnnualFamilyIncome.Value.ToString(NumberFormatInfo.InvariantInfo);

                if (nContact.OccupGroupTypeId.HasValue)
                {
                    txtOccupation.Text = nContact.Occupation_Desc;
                    hdnOccupationGroupId.Value = nContact.OccupGroupTypeId.Value.ToString();
                }

                if (nContact.OccupationId.HasValue)
                {
                    txtProfession.Text = nContact.Occupation_Group_Desc;
                    hdnOccupationId.Value = nContact.OccupationId.Value.ToString();
                }

                tb_WUC_PI_CompanyName.Text = nContact.CompanyName;
                tb_WUC_PI_FirstLineBusinnes.Text = nContact.LineOfBusiness;
                tb_WUC_PI_SecondLineBusiness.Text = nContact.LineOfBusiness2;
                tb_WUC_PI_TaskPerformed.Text = nContact.LaborTasks;
                ddl_WUC_PI_LengthWorkFrom.SelectIndexByValue(!nContact.LengthWorkYear.HasValue ? "-1"
                    : nContact.LengthWorkYear.Value.ToString());
                ddl_WUC_PI_LengthWorkTo.SelectIndexByValue(!nContact.LengthWorkMonth.HasValue ? "-1"
                    : nContact.LengthWorkMonth.Value.ToString());
                var GlobalCountryId = ObjServices.oContactManager.GetContactCitizenshipByContact(nContact.ContactId).LastOrDefault().GlobalCountryId.ToString();
                ddl_WUC_PI_CountryCitizenship.SelectIndexByValue(GlobalCountryId);
            }
            else
                ClearControls();

            udpPersonalInformation.Update();

        }

        public void FillData()
        {
            var nContact = ObjServices.GetContact(ObjServices.ContactEntityID.Value);

            if (nContact != null)
            {
                tb_WUC_PI_FirstName.Text = nContact.FirstName;
                tb_WUC_PI_MiddleName.Text = nContact.MiddleName;
                tb_WUC_PI_FirstLastName.Text = nContact.FirstLastName;
                tb_WUC_PI_SecondLastName.Text = nContact.SecondLastName;
                ddl_WUC_PI_Gender.SelectIndexByValue((string.IsNullOrEmpty(nContact.Gender)) ? "-1" : nContact.Gender);
                ddl_WUC_PI_Smoker.SelectIndexByValue(!nContact.Smoker.HasValue ? "-1" : (nContact.Smoker.Value ? "1" : "0"));

                ddl_WUC_PI_CountryBirth.SelectIndexByValue(nContact.CountryOfBirthId.ToString(), true);
                ddlCountryOfResidence.SelectIndexByValue(nContact.CountryOfResidenceId.ToString(), true);

                tb_WUC_PI_DateBirth.Text = !nContact.Dob.HasValue ? "" :
                                           nContact.Dob.Value.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture);

                hdnAge.Value = !nContact.Age.HasValue ? "" : nContact.Age.Value.ToString();

                if (nContact.MaritalStatId.HasValue)
                    ddl_WUC_PI_MaritalStatus.SelectIndexByValue(nContact.MaritalStatId.ToString(), true);

                tb_WUC_PI_PersonalIncome.Text = !nContact.AnnualPersonalIncome.HasValue ? ""
                                                                                        : nContact.AnnualPersonalIncome.Value.ToString(NumberFormatInfo.InvariantInfo);

                tb_WUC_PI_YearLyFamilyIncome.Text = !nContact.AnnualFamilyIncome.HasValue ? ""
                                                                                          : nContact.AnnualFamilyIncome.Value.ToString(NumberFormatInfo.InvariantInfo);

                if (nContact.OccupGroupTypeId.HasValue)
                {
                    txtOccupation.Text = nContact.Occupation_Desc;
                    hdnOccupationGroupId.Value = nContact.OccupGroupTypeId.Value.ToString();
                }

                if (nContact.OccupationId.HasValue)
                {
                    txtProfession.Text = nContact.Occupation_Group_Desc;
                    hdnOccupationId.Value = nContact.OccupationId.Value.ToString();
                }

                tb_WUC_PI_CompanyName.Text = nContact.CompanyName;
                tb_WUC_PI_FirstLineBusinnes.Text = nContact.LineOfBusiness;
                tb_WUC_PI_SecondLineBusiness.Text = nContact.LineOfBusiness2;
                tb_WUC_PI_TaskPerformed.Text = nContact.LaborTasks;

                if (nContact.LengthWorkYear.HasValue)
                    ddl_WUC_PI_LengthWorkFrom.SelectIndexByValue(nContact.LengthWorkYear.Value.ToString(), true);

                if (nContact.LengthWorkMonth.HasValue)
                    ddl_WUC_PI_LengthWorkTo.SelectIndexByValue(nContact.LengthWorkMonth.Value.ToString(), true);

                var ContactCitizenship = ObjServices.GetContactCitizenship();

                if (ContactCitizenship != null)
                    ddl_WUC_PI_CountryCitizenship.SelectIndexByValue(ContactCitizenship.GlobalCountryId.ToString());
            }

            udpPersonalInformation.Update();
        }

        public void Initialize(String value = "")
        {
            hdnCurrentSession.Value = String.IsNullOrEmpty(value) ? "" : value;
            Initialize();
        }

        public void Initialize()
        {
            ClearData();
            FillDrops();
            FillData();

            if (ObjServices.IsDataReviewMode)
                EnabledControls(!(currentTab == "OwnerInfo" && ObjServices.Contact_Id == ObjServices.Owner_Id));
        }

        public void ClearData()
        {
            hdnOccupationGroupId.Value = string.Empty;
            hdnOccupationId.Value = string.Empty;
            ClearControls(this);
        }

        public void EnabledControls(bool x)
        {
            EnabledControls(frmPersonalInformation.Controls, x);
            udpPersonalInformation.Update();
        }

        public void ReadOnlyControls(bool isReadOnly)
        {
            Utility.ReadOnlyControls(frmPersonalInformation.Controls, isReadOnly);
            udpPersonalInformation.Update();
        }
    }
}