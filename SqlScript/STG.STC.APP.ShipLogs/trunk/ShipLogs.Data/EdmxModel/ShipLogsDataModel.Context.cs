//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShipLogs.Data.EdmxModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShipLogs_Entities : DbContext
    {
        public ShipLogs_Entities()
            : base("name=ShipLogs_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssigneToPersonal> AssigneToPersonals { get; set; }
        public virtual DbSet<Carrier> Carriers { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<ShipmentDetail> ShipmentDetails { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<AddressBook> AddressBooks { get; set; }
        public virtual DbSet<ShipmentFile> ShipmentFiles { get; set; }
    
        public virtual ObjectResult<SP_FILL_DROPDOWN_Result> SP_FILL_DROPDOWN(string dropDownType)
        {
            var dropDownTypeParameter = dropDownType != null ?
                new ObjectParameter("DropDownType", dropDownType) :
                new ObjectParameter("DropDownType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FILL_DROPDOWN_Result>("SP_FILL_DROPDOWN", dropDownTypeParameter);
        }
    
        public virtual ObjectResult<SP_FROM_Shipment_Result> SP_FROM_Shipment(string shipmentNumberParameter)
        {
            var shipmentNumberParameterParameter = shipmentNumberParameter != null ?
                new ObjectParameter("ShipmentNumberParameter", shipmentNumberParameter) :
                new ObjectParameter("ShipmentNumberParameter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FROM_Shipment_Result>("SP_FROM_Shipment", shipmentNumberParameterParameter);
        }
    
        public virtual int SP_SET_SHIPMENT_DETAIL_SAVE(Nullable<int> shipUniqueID, string assignedTo, string itemDetail, string operation, Nullable<int> detailUniqueID)
        {
            var shipUniqueIDParameter = shipUniqueID.HasValue ?
                new ObjectParameter("ShipUniqueID", shipUniqueID) :
                new ObjectParameter("ShipUniqueID", typeof(int));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var itemDetailParameter = itemDetail != null ?
                new ObjectParameter("ItemDetail", itemDetail) :
                new ObjectParameter("ItemDetail", typeof(string));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var detailUniqueIDParameter = detailUniqueID.HasValue ?
                new ObjectParameter("DetailUniqueID", detailUniqueID) :
                new ObjectParameter("DetailUniqueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_SHIPMENT_DETAIL_SAVE", shipUniqueIDParameter, assignedToParameter, itemDetailParameter, operationParameter, detailUniqueIDParameter);
        }

        
        public virtual int SP_SET_SHIPMENT_DETAIL_UPDATE(Nullable<int> shipUniqueID, string assignedTo, string itemDetail, string operation, Nullable<int> detailUniqueID)
        {
            var shipUniqueIDParameter = shipUniqueID.HasValue ?
                new ObjectParameter("ShipUniqueID", shipUniqueID) :
                new ObjectParameter("ShipUniqueID", typeof(int));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var itemDetailParameter = itemDetail != null ?
                new ObjectParameter("ItemDetail", itemDetail) :
                new ObjectParameter("ItemDetail", typeof(string));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var detailUniqueIDParameter = detailUniqueID.HasValue ?
                new ObjectParameter("DetailUniqueID", detailUniqueID) :
                new ObjectParameter("DetailUniqueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SET_SHIPMENT_DETAIL_UPDATE", shipUniqueIDParameter, assignedToParameter, itemDetailParameter, operationParameter, detailUniqueIDParameter);
        }
    
        public virtual ObjectResult<SP_SET_SHIPMENTS_UPDATE_INSERT_Result> SP_SET_SHIPMENTS_UPDATE_INSERT(Nullable<int> shipUniqueID, string carrierName, string accountNumber, string shipmentNumber, Nullable<System.DateTime> shipmentDate, Nullable<decimal> shipmentWeight, Nullable<int> shipmentQTY, string shipPackageType, string @operator, string sender, string receiver, string receiverAttn, string receiverAddress, string receiverCity, string receiverState, string receiverZipCode, string receiverCountry, string receiverPhoneNumber, string shipmentComments, Nullable<bool> transit, Nullable<bool> incoming, Nullable<bool> commissionChecks, Nullable<bool> materials, Nullable<bool> otherContents)
        {
            var shipUniqueIDParameter = shipUniqueID.HasValue ?
                new ObjectParameter("ShipUniqueID", shipUniqueID) :
                new ObjectParameter("ShipUniqueID", typeof(int));
    
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var shipmentNumberParameter = shipmentNumber != null ?
                new ObjectParameter("ShipmentNumber", shipmentNumber) :
                new ObjectParameter("ShipmentNumber", typeof(string));
    
            var shipmentDateParameter = shipmentDate.HasValue ?
                new ObjectParameter("ShipmentDate", shipmentDate) :
                new ObjectParameter("ShipmentDate", typeof(System.DateTime));
    
            var shipmentWeightParameter = shipmentWeight.HasValue ?
                new ObjectParameter("ShipmentWeight", shipmentWeight) :
                new ObjectParameter("ShipmentWeight", typeof(decimal));
    
            var shipmentQTYParameter = shipmentQTY.HasValue ?
                new ObjectParameter("ShipmentQTY", shipmentQTY) :
                new ObjectParameter("ShipmentQTY", typeof(int));
    
            var shipPackageTypeParameter = shipPackageType != null ?
                new ObjectParameter("ShipPackageType", shipPackageType) :
                new ObjectParameter("ShipPackageType", typeof(string));
    
            var operatorParameter = @operator != null ?
                new ObjectParameter("Operator", @operator) :
                new ObjectParameter("Operator", typeof(string));
    
            var senderParameter = sender != null ?
                new ObjectParameter("Sender", sender) :
                new ObjectParameter("Sender", typeof(string));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var receiverAttnParameter = receiverAttn != null ?
                new ObjectParameter("ReceiverAttn", receiverAttn) :
                new ObjectParameter("ReceiverAttn", typeof(string));
    
            var receiverAddressParameter = receiverAddress != null ?
                new ObjectParameter("ReceiverAddress", receiverAddress) :
                new ObjectParameter("ReceiverAddress", typeof(string));
    
            var receiverCityParameter = receiverCity != null ?
                new ObjectParameter("ReceiverCity", receiverCity) :
                new ObjectParameter("ReceiverCity", typeof(string));
    
            var receiverStateParameter = receiverState != null ?
                new ObjectParameter("ReceiverState", receiverState) :
                new ObjectParameter("ReceiverState", typeof(string));
    
            var receiverZipCodeParameter = receiverZipCode != null ?
                new ObjectParameter("ReceiverZipCode", receiverZipCode) :
                new ObjectParameter("ReceiverZipCode", typeof(string));
    
            var receiverCountryParameter = receiverCountry != null ?
                new ObjectParameter("ReceiverCountry", receiverCountry) :
                new ObjectParameter("ReceiverCountry", typeof(string));
    
            var receiverPhoneNumberParameter = receiverPhoneNumber != null ?
                new ObjectParameter("ReceiverPhoneNumber", receiverPhoneNumber) :
                new ObjectParameter("ReceiverPhoneNumber", typeof(string));
    
            var shipmentCommentsParameter = shipmentComments != null ?
                new ObjectParameter("ShipmentComments", shipmentComments) :
                new ObjectParameter("ShipmentComments", typeof(string));
    
            var transitParameter = transit.HasValue ?
                new ObjectParameter("Transit", transit) :
                new ObjectParameter("Transit", typeof(bool));
    
            var incomingParameter = incoming.HasValue ?
                new ObjectParameter("Incoming", incoming) :
                new ObjectParameter("Incoming", typeof(bool));
    
            var commissionChecksParameter = commissionChecks.HasValue ?
                new ObjectParameter("CommissionChecks", commissionChecks) :
                new ObjectParameter("CommissionChecks", typeof(bool));
    
            var materialsParameter = materials.HasValue ?
                new ObjectParameter("Materials", materials) :
                new ObjectParameter("Materials", typeof(bool));
    
            var otherContentsParameter = otherContents.HasValue ?
                new ObjectParameter("OtherContents", otherContents) :
                new ObjectParameter("OtherContents", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_SHIPMENTS_UPDATE_INSERT_Result>("SP_SET_SHIPMENTS_UPDATE_INSERT", shipUniqueIDParameter, carrierNameParameter, accountNumberParameter, shipmentNumberParameter, shipmentDateParameter, shipmentWeightParameter, shipmentQTYParameter, shipPackageTypeParameter, operatorParameter, senderParameter, receiverParameter, receiverAttnParameter, receiverAddressParameter, receiverCityParameter, receiverStateParameter, receiverZipCodeParameter, receiverCountryParameter, receiverPhoneNumberParameter, shipmentCommentsParameter, transitParameter, incomingParameter, commissionChecksParameter, materialsParameter, otherContentsParameter);
        }
    
        public virtual int sp_ShipmentErrorsFile(string carrierCompany, string office, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var carrierCompanyParameter = carrierCompany != null ?
                new ObjectParameter("carrierCompany", carrierCompany) :
                new ObjectParameter("carrierCompany", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ShipmentErrorsFile", carrierCompanyParameter, officeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_ShipmentMatch(string carrierCompany, string office, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var carrierCompanyParameter = carrierCompany != null ?
                new ObjectParameter("carrierCompany", carrierCompany) :
                new ObjectParameter("carrierCompany", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ShipmentMatch", carrierCompanyParameter, officeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_ShipmentMatchTotal(string carrierCompany, string office, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var carrierCompanyParameter = carrierCompany != null ?
                new ObjectParameter("carrierCompany", carrierCompany) :
                new ObjectParameter("carrierCompany", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ShipmentMatchTotal", carrierCompanyParameter, officeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_ShipmentMismatch(string carrierCompany, string office, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var carrierCompanyParameter = carrierCompany != null ?
                new ObjectParameter("carrierCompany", carrierCompany) :
                new ObjectParameter("carrierCompany", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ShipmentMismatch", carrierCompanyParameter, officeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_ShipmentMismatchTotal(string carrierCompany, string office, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var carrierCompanyParameter = carrierCompany != null ?
                new ObjectParameter("carrierCompany", carrierCompany) :
                new ObjectParameter("carrierCompany", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ShipmentMismatchTotal", carrierCompanyParameter, officeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_ShipmentOfficeSender_Result> sp_ShipmentOfficeSender()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShipmentOfficeSender_Result>("sp_ShipmentOfficeSender");
        }
    
        public virtual ObjectResult<sp_ShipmentQuantityGreaterThan_Result> sp_ShipmentQuantityGreaterThan(string carrierCompany, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> quantity)
        {
            var carrierCompanyParameter = carrierCompany != null ?
                new ObjectParameter("carrierCompany", carrierCompany) :
                new ObjectParameter("carrierCompany", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShipmentQuantityGreaterThan_Result>("sp_ShipmentQuantityGreaterThan", carrierCompanyParameter, dateFromParameter, dateToParameter, quantityParameter);
        }
    
        public virtual int sp_ShipmentSaveFile(string carrierName, string accountNumber, string loginID, string shipmentNumber, Nullable<System.DateTime> shipmentDate, string receiverCompany, string receiverDepartment, string receiverAddress, string receiverCity, string receiverState, string receiverZipCode, string receiverCountry, string receiverPhoneNumber, string receiverAttentionTo, string billToAccountNumber, string packageWeight, string packageDescription, string customsValue, string pieceCount, string serviceDescription, string estFreightChgs, string estOtherChgs, string estTotalChgs, string sentBy)
        {
            var carrierNameParameter = carrierName != null ?
                new ObjectParameter("CarrierName", carrierName) :
                new ObjectParameter("CarrierName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var shipmentNumberParameter = shipmentNumber != null ?
                new ObjectParameter("ShipmentNumber", shipmentNumber) :
                new ObjectParameter("ShipmentNumber", typeof(string));
    
            var shipmentDateParameter = shipmentDate.HasValue ?
                new ObjectParameter("ShipmentDate", shipmentDate) :
                new ObjectParameter("ShipmentDate", typeof(System.DateTime));
    
            var receiverCompanyParameter = receiverCompany != null ?
                new ObjectParameter("ReceiverCompany", receiverCompany) :
                new ObjectParameter("ReceiverCompany", typeof(string));
    
            var receiverDepartmentParameter = receiverDepartment != null ?
                new ObjectParameter("ReceiverDepartment", receiverDepartment) :
                new ObjectParameter("ReceiverDepartment", typeof(string));
    
            var receiverAddressParameter = receiverAddress != null ?
                new ObjectParameter("ReceiverAddress", receiverAddress) :
                new ObjectParameter("ReceiverAddress", typeof(string));
    
            var receiverCityParameter = receiverCity != null ?
                new ObjectParameter("ReceiverCity", receiverCity) :
                new ObjectParameter("ReceiverCity", typeof(string));
    
            var receiverStateParameter = receiverState != null ?
                new ObjectParameter("ReceiverState", receiverState) :
                new ObjectParameter("ReceiverState", typeof(string));
    
            var receiverZipCodeParameter = receiverZipCode != null ?
                new ObjectParameter("ReceiverZipCode", receiverZipCode) :
                new ObjectParameter("ReceiverZipCode", typeof(string));
    
            var receiverCountryParameter = receiverCountry != null ?
                new ObjectParameter("ReceiverCountry", receiverCountry) :
                new ObjectParameter("ReceiverCountry", typeof(string));
    
            var receiverPhoneNumberParameter = receiverPhoneNumber != null ?
                new ObjectParameter("ReceiverPhoneNumber", receiverPhoneNumber) :
                new ObjectParameter("ReceiverPhoneNumber", typeof(string));
    
            var receiverAttentionToParameter = receiverAttentionTo != null ?
                new ObjectParameter("ReceiverAttentionTo", receiverAttentionTo) :
                new ObjectParameter("ReceiverAttentionTo", typeof(string));
    
            var billToAccountNumberParameter = billToAccountNumber != null ?
                new ObjectParameter("BillToAccountNumber", billToAccountNumber) :
                new ObjectParameter("BillToAccountNumber", typeof(string));
    
            var packageWeightParameter = packageWeight != null ?
                new ObjectParameter("PackageWeight", packageWeight) :
                new ObjectParameter("PackageWeight", typeof(string));
    
            var packageDescriptionParameter = packageDescription != null ?
                new ObjectParameter("PackageDescription", packageDescription) :
                new ObjectParameter("PackageDescription", typeof(string));
    
            var customsValueParameter = customsValue != null ?
                new ObjectParameter("CustomsValue", customsValue) :
                new ObjectParameter("CustomsValue", typeof(string));
    
            var pieceCountParameter = pieceCount != null ?
                new ObjectParameter("PieceCount", pieceCount) :
                new ObjectParameter("PieceCount", typeof(string));
    
            var serviceDescriptionParameter = serviceDescription != null ?
                new ObjectParameter("ServiceDescription", serviceDescription) :
                new ObjectParameter("ServiceDescription", typeof(string));
    
            var estFreightChgsParameter = estFreightChgs != null ?
                new ObjectParameter("EstFreightChgs", estFreightChgs) :
                new ObjectParameter("EstFreightChgs", typeof(string));
    
            var estOtherChgsParameter = estOtherChgs != null ?
                new ObjectParameter("EstOtherChgs", estOtherChgs) :
                new ObjectParameter("EstOtherChgs", typeof(string));
    
            var estTotalChgsParameter = estTotalChgs != null ?
                new ObjectParameter("EstTotalChgs", estTotalChgs) :
                new ObjectParameter("EstTotalChgs", typeof(string));
    
            var sentByParameter = sentBy != null ?
                new ObjectParameter("SentBy", sentBy) :
                new ObjectParameter("SentBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ShipmentSaveFile", carrierNameParameter, accountNumberParameter, loginIDParameter, shipmentNumberParameter, shipmentDateParameter, receiverCompanyParameter, receiverDepartmentParameter, receiverAddressParameter, receiverCityParameter, receiverStateParameter, receiverZipCodeParameter, receiverCountryParameter, receiverPhoneNumberParameter, receiverAttentionToParameter, billToAccountNumberParameter, packageWeightParameter, packageDescriptionParameter, customsValueParameter, pieceCountParameter, serviceDescriptionParameter, estFreightChgsParameter, estOtherChgsParameter, estTotalChgsParameter, sentByParameter);
        }
    
        public virtual int sp_ShipmentTotalShipments(string carrierCompany, string office, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> quantity)
        {
            var carrierCompanyParameter = carrierCompany != null ?
                new ObjectParameter("carrierCompany", carrierCompany) :
                new ObjectParameter("carrierCompany", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ShipmentTotalShipments", carrierCompanyParameter, officeParameter, dateFromParameter, dateToParameter, quantityParameter);
        }
    }
}
