//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ATL.PdfNotification.WebToken {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TokenSoap", Namespace="http://tempuri.org/")]
    public partial class Token : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GenerateAndSendTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutentificationTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SettingCookieOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCookieOperationCompleted;
        
        private System.Threading.SendOrPostCallback DencryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Token() {
            this.Url = global::ATL.PdfNotification.Properties.Settings.Default.ATL_PdfNotification_WebToken_Token;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GenerateAndSendTokenCompletedEventHandler GenerateAndSendTokenCompleted;
        
        /// <remarks/>
        public event AutentificationTokenCompletedEventHandler AutentificationTokenCompleted;
        
        /// <remarks/>
        public event SettingCookieCompletedEventHandler SettingCookieCompleted;
        
        /// <remarks/>
        public event ValidateCookieCompletedEventHandler ValidateCookieCompleted;
        
        /// <remarks/>
        public event DencryptCompletedEventHandler DencryptCompleted;
        
        /// <remarks/>
        public event EncryptCompletedEventHandler EncryptCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateAndSendToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseWS GenerateAndSendToken(string ApplicationID, string userID, string CountryCode, string AreaCode, string Phone, string Lang, string UserName, string BrowserName, string ClientIP, string BrowserVersion, string ServerIP, string ServerIPOrNameIISRequest, bool ISUsa, bool SendSMS, bool ISCardApplication) {
            object[] results = this.Invoke("GenerateAndSendToken", new object[] {
                        ApplicationID,
                        userID,
                        CountryCode,
                        AreaCode,
                        Phone,
                        Lang,
                        UserName,
                        BrowserName,
                        ClientIP,
                        BrowserVersion,
                        ServerIP,
                        ServerIPOrNameIISRequest,
                        ISUsa,
                        SendSMS,
                        ISCardApplication});
            return ((ResponseWS)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateAndSendTokenAsync(string ApplicationID, string userID, string CountryCode, string AreaCode, string Phone, string Lang, string UserName, string BrowserName, string ClientIP, string BrowserVersion, string ServerIP, string ServerIPOrNameIISRequest, bool ISUsa, bool SendSMS, bool ISCardApplication) {
            this.GenerateAndSendTokenAsync(ApplicationID, userID, CountryCode, AreaCode, Phone, Lang, UserName, BrowserName, ClientIP, BrowserVersion, ServerIP, ServerIPOrNameIISRequest, ISUsa, SendSMS, ISCardApplication, null);
        }
        
        /// <remarks/>
        public void GenerateAndSendTokenAsync(
                    string ApplicationID, 
                    string userID, 
                    string CountryCode, 
                    string AreaCode, 
                    string Phone, 
                    string Lang, 
                    string UserName, 
                    string BrowserName, 
                    string ClientIP, 
                    string BrowserVersion, 
                    string ServerIP, 
                    string ServerIPOrNameIISRequest, 
                    bool ISUsa, 
                    bool SendSMS, 
                    bool ISCardApplication, 
                    object userState) {
            if ((this.GenerateAndSendTokenOperationCompleted == null)) {
                this.GenerateAndSendTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateAndSendTokenOperationCompleted);
            }
            this.InvokeAsync("GenerateAndSendToken", new object[] {
                        ApplicationID,
                        userID,
                        CountryCode,
                        AreaCode,
                        Phone,
                        Lang,
                        UserName,
                        BrowserName,
                        ClientIP,
                        BrowserVersion,
                        ServerIP,
                        ServerIPOrNameIISRequest,
                        ISUsa,
                        SendSMS,
                        ISCardApplication}, this.GenerateAndSendTokenOperationCompleted, userState);
        }
        
        private void OnGenerateAndSendTokenOperationCompleted(object arg) {
            if ((this.GenerateAndSendTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateAndSendTokenCompleted(this, new GenerateAndSendTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AutentificationToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseWS AutentificationToken(string ApplicationID, string TokenNumber, string UserId, string ServerIPOrNameIISRequest) {
            object[] results = this.Invoke("AutentificationToken", new object[] {
                        ApplicationID,
                        TokenNumber,
                        UserId,
                        ServerIPOrNameIISRequest});
            return ((ResponseWS)(results[0]));
        }
        
        /// <remarks/>
        public void AutentificationTokenAsync(string ApplicationID, string TokenNumber, string UserId, string ServerIPOrNameIISRequest) {
            this.AutentificationTokenAsync(ApplicationID, TokenNumber, UserId, ServerIPOrNameIISRequest, null);
        }
        
        /// <remarks/>
        public void AutentificationTokenAsync(string ApplicationID, string TokenNumber, string UserId, string ServerIPOrNameIISRequest, object userState) {
            if ((this.AutentificationTokenOperationCompleted == null)) {
                this.AutentificationTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutentificationTokenOperationCompleted);
            }
            this.InvokeAsync("AutentificationToken", new object[] {
                        ApplicationID,
                        TokenNumber,
                        UserId,
                        ServerIPOrNameIISRequest}, this.AutentificationTokenOperationCompleted, userState);
        }
        
        private void OnAutentificationTokenOperationCompleted(object arg) {
            if ((this.AutentificationTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutentificationTokenCompleted(this, new AutentificationTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SettingCookie", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseWS SettingCookie(string CookieKey, string ApplicationID, string UserName, string UserID, string BrowserName, string ClientIP, string BrowserVersion, string ServerIPRequest, string ServerIPOrNameIISRequest) {
            object[] results = this.Invoke("SettingCookie", new object[] {
                        CookieKey,
                        ApplicationID,
                        UserName,
                        UserID,
                        BrowserName,
                        ClientIP,
                        BrowserVersion,
                        ServerIPRequest,
                        ServerIPOrNameIISRequest});
            return ((ResponseWS)(results[0]));
        }
        
        /// <remarks/>
        public void SettingCookieAsync(string CookieKey, string ApplicationID, string UserName, string UserID, string BrowserName, string ClientIP, string BrowserVersion, string ServerIPRequest, string ServerIPOrNameIISRequest) {
            this.SettingCookieAsync(CookieKey, ApplicationID, UserName, UserID, BrowserName, ClientIP, BrowserVersion, ServerIPRequest, ServerIPOrNameIISRequest, null);
        }
        
        /// <remarks/>
        public void SettingCookieAsync(string CookieKey, string ApplicationID, string UserName, string UserID, string BrowserName, string ClientIP, string BrowserVersion, string ServerIPRequest, string ServerIPOrNameIISRequest, object userState) {
            if ((this.SettingCookieOperationCompleted == null)) {
                this.SettingCookieOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSettingCookieOperationCompleted);
            }
            this.InvokeAsync("SettingCookie", new object[] {
                        CookieKey,
                        ApplicationID,
                        UserName,
                        UserID,
                        BrowserName,
                        ClientIP,
                        BrowserVersion,
                        ServerIPRequest,
                        ServerIPOrNameIISRequest}, this.SettingCookieOperationCompleted, userState);
        }
        
        private void OnSettingCookieOperationCompleted(object arg) {
            if ((this.SettingCookieCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SettingCookieCompleted(this, new SettingCookieCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateCookie", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseWS ValidateCookie(string ApplicationID, string ServerIPOrNameIISRequest, string CookieKeyEncrypty) {
            object[] results = this.Invoke("ValidateCookie", new object[] {
                        ApplicationID,
                        ServerIPOrNameIISRequest,
                        CookieKeyEncrypty});
            return ((ResponseWS)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCookieAsync(string ApplicationID, string ServerIPOrNameIISRequest, string CookieKeyEncrypty) {
            this.ValidateCookieAsync(ApplicationID, ServerIPOrNameIISRequest, CookieKeyEncrypty, null);
        }
        
        /// <remarks/>
        public void ValidateCookieAsync(string ApplicationID, string ServerIPOrNameIISRequest, string CookieKeyEncrypty, object userState) {
            if ((this.ValidateCookieOperationCompleted == null)) {
                this.ValidateCookieOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCookieOperationCompleted);
            }
            this.InvokeAsync("ValidateCookie", new object[] {
                        ApplicationID,
                        ServerIPOrNameIISRequest,
                        CookieKeyEncrypty}, this.ValidateCookieOperationCompleted, userState);
        }
        
        private void OnValidateCookieOperationCompleted(object arg) {
            if ((this.ValidateCookieCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCookieCompleted(this, new ValidateCookieCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Dencrypt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseWS Dencrypt(string ToEncrypt, string ApplicationID) {
            object[] results = this.Invoke("Dencrypt", new object[] {
                        ToEncrypt,
                        ApplicationID});
            return ((ResponseWS)(results[0]));
        }
        
        /// <remarks/>
        public void DencryptAsync(string ToEncrypt, string ApplicationID) {
            this.DencryptAsync(ToEncrypt, ApplicationID, null);
        }
        
        /// <remarks/>
        public void DencryptAsync(string ToEncrypt, string ApplicationID, object userState) {
            if ((this.DencryptOperationCompleted == null)) {
                this.DencryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDencryptOperationCompleted);
            }
            this.InvokeAsync("Dencrypt", new object[] {
                        ToEncrypt,
                        ApplicationID}, this.DencryptOperationCompleted, userState);
        }
        
        private void OnDencryptOperationCompleted(object arg) {
            if ((this.DencryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DencryptCompleted(this, new DencryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Encrypt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResponseWS Encrypt(string ToEncrypt, string ApplicationID) {
            object[] results = this.Invoke("Encrypt", new object[] {
                        ToEncrypt,
                        ApplicationID});
            return ((ResponseWS)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptAsync(string ToEncrypt, string ApplicationID) {
            this.EncryptAsync(ToEncrypt, ApplicationID, null);
        }
        
        /// <remarks/>
        public void EncryptAsync(string ToEncrypt, string ApplicationID, object userState) {
            if ((this.EncryptOperationCompleted == null)) {
                this.EncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptOperationCompleted);
            }
            this.InvokeAsync("Encrypt", new object[] {
                        ToEncrypt,
                        ApplicationID}, this.EncryptOperationCompleted, userState);
        }
        
        private void OnEncryptOperationCompleted(object arg) {
            if ((this.EncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptCompleted(this, new EncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ResponseWS {
        
        private string keyField;
        
        private string messageField;
        
        private bool statusField;
        
        /// <remarks/>
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GenerateAndSendTokenCompletedEventHandler(object sender, GenerateAndSendTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateAndSendTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateAndSendTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseWS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseWS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void AutentificationTokenCompletedEventHandler(object sender, AutentificationTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AutentificationTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AutentificationTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseWS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseWS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SettingCookieCompletedEventHandler(object sender, SettingCookieCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SettingCookieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SettingCookieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseWS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseWS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ValidateCookieCompletedEventHandler(object sender, ValidateCookieCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCookieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCookieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseWS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseWS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void DencryptCompletedEventHandler(object sender, DencryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DencryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DencryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseWS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseWS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void EncryptCompletedEventHandler(object sender, EncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResponseWS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResponseWS)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591