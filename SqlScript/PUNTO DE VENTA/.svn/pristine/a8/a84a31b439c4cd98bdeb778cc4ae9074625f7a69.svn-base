var GlobalData = null;
var GlobalDataUsages = null;
var GlobalDataProductsByUsage = null;
var GlobalAllProducts = null;
var GlobalDataCoverages = null;
var GlobalDataProductLimits = null;
var GlobalDataDeductibleList = null;
var GlobalDataXVehicle = null;
var GlobalDataPopupSelectedServices = null;
var GLobalPopupAnnualTotal = null;
var GlobalpercentageToInsure = 100;
var AllVehicleDataToSave = null;
var GlobalSecuenciaVehicleSysflex = 0;
var vehicleRandomID = null;
var isEditingVehicle = false;
var firstTime = true;
var GlobalCurrentIsc = 16;
var hasServices = true;
var PercentByQtyVehicle = 0;
var isFlotilla = false;
var changedDateBirth = false;
var changedSex = false;
var changedForeingLicenceDriver = false;
var LoadVehicle = false;
var LoadVehicleCurrentID = 0;
var LoadVehicleCurrentSecuenciaVehicleSysflex = 0;
var LoadVehicleQuantity = 1;
var GlobalcurrentStartDateSelected = null;
var GlobalcurrentEndDateSelected = null;
var wasLoadVehicle = false;
var GlobalServicesSelected = null;

//-----------
var PaymentStatus = '';
var PaymentFromCardnet = '';
var PaymentSuccess = '';
var failInsentingQuotationOnSysFlexOrVO = '';
var PaymentMessage = '';
var PolicyNumber = '';
var AuthorizationCode = '';
var PolicyNumberPayment = '';

$(document).ready(function () {

    $('#headCober').addClass('disabledAccordionTab');
    $('#headVH').addClass('disabledAccordionTab');

    InitializeCustom();
    getMainOptions();
    $(document).on('change', '#filtroHistorico', function () {
        InizitializeControls();
        InitializeChosen();

        window.history.replaceState({}, document.title, "/Home/Index");

        var selected = $(this).val();
        switch (selected) {
            case "2"://Historico de cotizaciones
                if ($('#IsCustomer').val() == 'false')
                    LoadQuotationSearch();
                else
                    $('#ppCustomerFilter').modal('show');
                break;
            case "3":
                LoadInclusion();
                break;
            default://Nueva Cotizacin
                window.location.reload();
                break;
        }
    });

    $('#headVH').click(function (event) {
        var d = $(this);
        if (d.hasClass('disabledAccordionTab')) {
            showWarning(['Debe guardar las informaciones del Conductor Principal dando click al boton Siguiente.'], 'Guardar información conductor principal');
            $("#hdnChangedSomethingClient").val("S");
            return false;
        }
    });

    $('#headCober').click(function (event) {
        var d = $(this);
        if (d.hasClass('disabledAccordionTab')) {

            var headVH = $('#headVH').hasClass("disabledAccordionTab");

            if (isEditingVehicle) {
                showWarning(['Debe guardar los cambios realizados al Vehículo dando click al boton Editar Vehículo.'], 'Cambios Vehículo');
                return false;
            }
            else if (!headVH) {
                showWarning(['Debe agregar un Vehículo para poder ver esta sección.'], 'Agregar Vehículo');
                return false;
            } else {
                showWarning(['Debe guardar las informaciones del Conductor Principal dando click al boton Siguiente.'], 'Guardar información conductor principal');
            }
            $("#hdnChangedSomethingClient").val("S");
            return false;
        }
    });

    $(".continueWithAgent").hide();
});

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

function InizitializeControls() {

    $('.normalDatepicker').datepicker({
        changeMonth: true,
        changeYear: true,
        minDate: new Date(),
        onSelect: function (dateText) {
            var $parent = $(this).parent();
            $parent.addClass("is-dirty");
            $parent.removeClass('requerido');
            $parent.removeClass('erarequerido');
            $parent.addClass('erarequerido');
        }
    });

    //Edad maxima para poder asegurar un Vehículo (18 anos)
    var currDate = moment(new Date());
    var minDate = currDate.add(18 * -1, 'years');
    //

    $('.dateOfBirth.datepicker').datepicker({
        changeMonth: true,
        changeYear: true,
        yearRange: "-80:+0",
        maxDate: new Date(minDate),
        onSelect: function (dateText) {
            var $parent = $(this).parent();
            $parent.addClass("is-dirty");
            $parent.removeClass('requerido');
            $parent.removeClass('erarequerido');
            $parent.addClass('erarequerido');

            if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
                changedDateBirth = true;
                disableAccordionsSections(true);
            }
        }
    });

    /*Mascara para los telefonos*/
    $("[phonenumber = 'PhoneNumber10']").inputmask("(999)-999-9999");

    /*Mascara para valores decimales*/
    $("[decimal='decimal']").inputmask({ alias: 'decimal', groupSeparator: ',', autoGroup: true, repeat: 9, digits: 2, allowMinus: false, allowPlus: false, rightAlign: true });
}

function InitializeChosen() {
    $(".chosen-select-deselect").chosen({
        disable_search_threshold: 10,
        no_results_text: "Oops, nothing found!",
        allow_single_deselect: true,
        width: "95%"
    });
}

function InitializeCustom() {

    InizitializeControls();

    $(document).ajaxStart(function () {
        BeginRequestHandler();
    });

    $(document).ajaxStop(function () {
        EndRequestHandler();
    });

    InitializeChosen();

    $.datepicker.setDefaults($.datepicker.regional["en"]);
    $.datepicker.setDefaults({
        dateFormat: getCurrentDateFormat()
    });
    //#EndRegion

    var currentStartDateSelected = moment(new Date()).format(getCurrentDateTimeMomentFormat());
    GlobalcurrentStartDateSelected = currentStartDateSelected;
    var endDate = moment(currentStartDateSelected, getCurrentDateTimeMomentFormat()).add(12, 'months').startOf('day');
    var currentEndDateSelected = (endDate.format(getCurrentDateTimeMomentFormat()));
    GlobalcurrentEndDateSelected = currentEndDateSelected;

    //#Region Jquery Validate
    $.validator.setDefaults({
        showErrors: function (errorMap, errorList) {
            if (errorList.length > 0) {
                var messages = $.map(errorList, function (item) { return item.message; });
                showError(messages, "Se han producido los siguientes errores:");
            }
        },
        ignore: ":hidden:not(.chosen-select-deselect)",//Le digo que no ignore los campos ocultos que tenga esa clase
        //ignore: [":not([readonly='readonly'])"], //Le digo que no ignore los campos ocultos que tenga esa clase
        onfocusout: false,
        onkeyup: false,
        onclick: false,
        onsubmit: true,
        focusInvalid: false
    });

    customValidationsMethods();

    frmClientInfoBasicValidations();
    frmVehicleInfoBasicValidations();
    //#EndRegion

    //Agregando clase requerido(que pone un borde rojo) a los campos que son requeridos
    $('.putErrorBorder').addClass('requerido');
    applyEventsRequiredFields();
    //

    getAgentsList();
    getStorages();
    getRecargos();
    AllDropsChanges();

    /*Mascara para los tipo de identificaciones*/
    $(".optionLicence").change(function () {
        var opt = $(this);
        var numberLic = $("#IdentificationNumber");

        if (opt.is(":checked")) {
            switch (opt.attr("id")) {

                case "IdentificationTypeCed":
                case "IdentificationTypeCedLic":
                    numberLic.inputmask("999-9999999-9");
                    if ($("#Sex").val() == "Empresa") {
                        $("#Sex").val("");
                        $("#ForeignLicense").val("");
                    }
                    $("#Sex").removeAttr("disabled");
                    $("#Sex").trigger("chosen:updated");
                    $("#Sex").trigger("change");

                    $("#ForeignLicense").removeAttr("disabled");
                    if ($("#ForeignLicense").val() == "") {
                        $("#ForeignLicense").parent().removeClass("is-dirty");
                    }
                    $("#ForeignLicense").trigger("change");

                    resetDateOfBirth(false);
                    break;
                case "IdentificationTypeCedRnc":
                    numberLic.inputmask("999-99999-9");
                    $("#Sex").val("Empresa");
                    $("#Sex").attr("disabled", "disabled");
                    $("#Sex").trigger("chosen:updated");
                    $("#Sex").trigger("change");

                    $("#ForeignLicense").val("No");
                    $("#ForeignLicense").attr("disabled", "disabled");
                    $("#ForeignLicense").parent().addClass("is-dirty");
                    $("#ForeignLicense").trigger("change");

                    resetDateOfBirth(true);
                    break;
                case "IdentificationTypeCedPasaport":
                    numberLic.inputmask("remove");
                    if ($("#Sex").val() == "Empresa") {
                        $("#Sex").val("");
                        $("#ForeignLicense").val("");
                    }
                    $("#Sex").removeAttr("disabled");
                    $("#Sex").trigger("chosen:updated");
                    $("#Sex").trigger("change");

                    $("#ForeignLicense").removeAttr("disabled");
                    if ($("#ForeignLicense").val() == "") {
                        $("#ForeignLicense").parent().removeClass("is-dirty");
                    }
                    $("#ForeignLicense").trigger("change");

                    resetDateOfBirth(false);
                    break;
                default:
            }
        }
    });
    /**/

    $("#PhoneNumber").focusout(function () {
        $this = $(this);
        var parentDiv = $(this).parent();

        if ($this.val() != "") {
            parentDiv.addClass('is-dirty');
        } else {
            parentDiv.removeClass('is-dirty');
        }
    });

    $("#IdentificationNumber").focusout(function () {
        $this = $(this);
        var parentDiv = $(this).parent();

        if ($this.val() != "") {
            parentDiv.addClass('is-dirty');
        } else {
            parentDiv.removeClass('is-dirty');
        }
    });

    $(".btnSaveClientBasic").click(function () {
        var agentSelected = $("#AgentList").val();

        if (agentSelected !== '') {
            var dob = $("#DateOfBirth").val();
            if (dob == '') {
                showError(['La Fecha de Nacimiento es requerida.']);
                return false;
            }

            SaveBasicClientData();
            return false;
        } else {
            showError(['Debe seleccionar un Representante para poder continuar.'], 'Debe Seleccionar un Representante');
            return false;
        }
    });

    $("#AgentList").change(function () {
        var drop = $(this);

        $("#AgentSelected").val(drop.val());

        //Setiando el anterior agente seleccionado
        if ($("#oldAgentSelected").val() == '') {
            $("#oldAgentSelected").val(drop.val());
        }

        if (drop.val() != '') {
            UpdateVehiclesByAgentChange();
        }
    });

    $("#vehiclePrice").inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'autoGroup': true, 'digits': 2, 'digitsOptional': false, 'prefix': '' });

    $("#vehiclePrice").focusout(function () {
        var $this = $(this);
        var parent = $($this.parent());

        if (parseFloat($this.val()) >= 0) {

            if (!parent.hasClass('is-dirty')) {
                parent.addClass("is-dirty");
            }
        } else {
            parent.removeClass("is-dirty");
        }

        if (isEditingVehicle) {
            updateGlobalDataProductLimits(vehicleRandomID);
        } else {
            // updateGlobalDataProductLimits();
        }
    });

    removeErrorBorderClass($("#vehiclePrice"));

    $(".qtyVehicles").focusout(function () {
        var v = $(this);
        var randomID = v.attr("data-vehiclerandomid");

        getRates(randomID);

        var parentDiv = v.parent().parent();
        if (v.val() == "") {
            if (parentDiv.hasClass('erarequerido')) {
                parentDiv.addClass('requerido');
                parentDiv.removeClass('erarequerido');
            }
        } else {
            parentDiv.removeClass('requerido');
            parentDiv.addClass('erarequerido');
        }
    });

    GetCurrentIsc();

    $(".deleteVehicle").click(function () {
        var randomid = $(this).attr("data-vehiclerandomid");
        removeVehicle(randomid);
    });

    $(".editVehicle").click(function () {
        var randomid = $(this).attr("data-vehiclerandomid");
        SetEditVehicle(randomid);
    });

    $(".servicesPopUp").click(function () {
        var $this = $(this);
        var randomID = $this.attr("data-vehiclerandomid");

        SetAdditionals(randomID);
        //mostrarpopup
        $("#addServicios").modal({ backdrop: 'static', keyboard: false, show: true });
        $(".saveServices").attr("data-vehiclerandomid", randomID);

        return false;
    });

    $(".optionLicence").trigger('change');

    var msg = getParameterByName("msg", window.location.href);

    var pass = true;
    if (msg !== '' && msg !== undefined && msg !== null) {
        showError(['La cotización solicitada no existe.'], 'Cotización');
        pass = false;
    }

    var quotationID = GetURLParameter();
    if (pass) {
        loadQuotation(quotationID);
    }

    var QuotationNumber = $("#QuotationNumber").val();
    $("#spQuotationNumber").text(QuotationNumber);

    addVehicle();

    $(".RedirectToOtherApp").on("click", function () {

        var $this = $(this);
        var path = $this.data("path");
        var appname = $this.data("appname");
        var tab = "";

        $.ajax({
            url: "/Login/RedirectToOtherApp",
            data: { path: path, appname: appname, tab: tab },
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data.Status) {
                    location.href = data.UrlPath;
                } else {
                    showError([data.errormessage]);
                    return false;
                }
            }
        });
    });

    getCountriesByBl();
    getBlByCountry();
    redirectByBl();

    //fillDdlActions();

    componentHandler.upgradeAllRegistered();

    $("#btnCloseSection").click(function () {
        $('#headVH').find('a').trigger('click');
        return false;
    });
}

function getCurrentDateFormat() {
    return 'dd-M-yy';
}

function showError(errorList, title) {

    var errorContainer = $("#ppError");
    var errorTitle = $("#errorTitle");
    var errorListContainer = $("#errorListContainer");

    if (title) {
        errorTitle.html(title);
    }

    errorListContainer.empty();
    if (errorList) {
        $.each(errorList, function (item, i) {
            errorListContainer.append('<li class="text-left">' + i + '</li>');
        });
    }
    errorContainer.modal({ backdrop: 'static', keyboard: false, show: true });
}

function showWarning(warningList, title) {

    var warningContainer = $("#ppWarning");
    var warningTitle = $("#warningTitle");
    var warningListContainer = $("#warningListContainer");

    if (title) {
        warningTitle.html(title);
    }

    warningListContainer.empty();
    if (warningList) {
        $.each(warningList, function (item, i) {
            warningListContainer.append('<li class="text-left">' + i + '</li>');
        });
    }
    //warningContainer.modal('show');
    warningContainer.modal({ backdrop: 'static', keyboard: false, show: true });
}

function showSucess(sucessList, title, okCallback, OcultarBoton) {

    var sucessContainer = $("#ppSucess");
    var sucessTitle = $("#sucessTitle");
    var sucessListContainer = $("#sucessListContainer");
    var okButton = $('#btnSucessOk');

    if (title) {
        sucessTitle.html(title);
    }

    sucessListContainer.empty();
    if (sucessList) {
        $.each(sucessList, function (item, i) {
            sucessListContainer.append('<li class="text-left">' + i + '</li>');
        });
    }

    if (OcultarBoton == false) {
        $("#RedirectToOtherApp").css("display", "block");
    } else {
        $("#RedirectToOtherApp").css("display", "none");
    }


    okButton.focus();

    if (okCallback) {
        okButton.unbind('click');
        okButton.click(function () {
            sucessContainer.modal('hide');
            okCallback();
        });
    }

    //sucessContainer.modal('show');
    sucessContainer.modal({ backdrop: 'static', keyboard: false, show: true });
}

function showInfo(infoList, title) {

    var infoContainer = $("#ppInfo");
    var infoTitle = $("#infoTitle");
    var infoListContainer = $("#infoListContainer");

    if (title) {
        infoTitle.html(title);
    }

    infoListContainer.empty();
    if (infoList) {
        $.each(infoList, function (item, i) {
            infoListContainer.append('<li class="text-left">' + i + '</li>');
        });
    }
    //infoContainer.modal('show');
    infoContainer.modal({ backdrop: 'static', keyboard: false, show: true });
}

function showQuestion(question, title, acceptAction, CancelAction) {

    var questionModalContainer = $("#ppQuestion");
    var questionTitle = $("#questionTitle");
    var questionContainer = $("#questionContainer");
    var okButton = $('#btnQuestionOk');
    var cancelButton = $('#btnQuestionCancel');

    if (title) {
        questionTitle.html(title);
    }

    questionContainer.empty();
    if (question) {
        questionContainer.html(question);
    }

    okButton.off("click");
    okButton.click(function () { questionModalContainer.modal('hide'); acceptAction(); });

    if (typeof CancelAction === "function") {
        cancelButton.off("click");
        cancelButton.click(function () { questionModalContainer.modal('hide'); CancelAction(); });
    } else {
        cancelButton.click(function () { questionModalContainer.modal('hide'); });
    }

    //questionModalContainer.modal('show');
    questionModalContainer.modal({ backdrop: 'static', keyboard: false, show: true });
}

function applyEventsRequiredFields() {
    var form = $("#frmClientInfoBasic, #frmVehicleInfoBasic, #frmVehicle,#frmVehicleInclusion");

    var allDivsRequired = form.find('.putErrorBorder.requerido , .input-group.putErrorBorder.requeridoB');

    $.each(allDivsRequired, function (i, div) {

        var realDiv = $(div);
        var actualInputsInDiv = realDiv.find('input[type="text"], select, input[type="radio"]');

        $.each(actualInputsInDiv, function (i, element) {

            var realElement = $(element);

            if (realElement.is(':input[type="text"]')) {
                putClassRequeridoInputs(realElement);
            } else if (realElement.is('select')) {
                putClassRequeridoSelects(realElement);
            } else if (realElement.is(':input[type="radio"]')) {
                putClassRequeridoRadios(realElement);
            }
        });
    });
}

function putClassRequeridoInputs(input) {

    $(input).focusout(function () {
        $this = $(this);
        var parentDiv = $(this).parent();

        if ($this.val() == "") {

            if (parentDiv.hasClass('erarequerido')) {

                if (parentDiv.hasClass('requeridoB')) {
                    parentDiv.addClass('requeridoB');
                } else {
                    parentDiv.addClass('requerido');
                }
                parentDiv.removeClass('erarequerido');
            }

        } else {
            parentDiv.removeClass('requerido');
            parentDiv.removeClass('requeridoB');
            parentDiv.addClass('erarequerido');
        }
    });
}

function putClassRequeridoSelects(input) {

    $(input).change(function () {
        $this = $(this);
        var parentDiv = $(this).parent().parent();

        if (!parentDiv.hasClass('putErrorBorder')) {
            parentDiv = $(this).parent();
        }

        if ($this.val() == "" || $this.val() == "-1") {
            if (parentDiv.hasClass('erarequerido')) {
                parentDiv.addClass('requerido');
                parentDiv.removeClass('erarequerido');
            }
        } else {
            parentDiv.removeClass('requerido');
            parentDiv.addClass('erarequerido');
        }
    });
}

function putClassRequeridoRadios(input) {

    $(input).click(function () {
        $this = $(this);
        var parentDiv = $(this).parent().parent();

        if (!$this.is(":checked")) {
            if (parentDiv.hasClass('erarequerido')) {
                parentDiv.addClass('requerido');
                parentDiv.removeClass('erarequerido');
            }
        } else {
            parentDiv.removeClass('requerido');
            parentDiv.addClass('erarequerido');
        }
    });
}

function removeErrorBorderClass(input, isChosenSelect, isRadio) {

    var element = $(input);

    var parentDiv = isChosenSelect ? element.parent().parent() : isRadio ? element.parent().parent() : element.parent();

    if (element.val() == "") {
        if (parentDiv.hasClass('erarequerido')) {
            parentDiv.addClass('requerido');
            parentDiv.removeClass('erarequerido');
        }
    } else {
        parentDiv.removeClass('requerido');
        parentDiv.addClass('erarequerido');
    }
}

function frmClientInfoBasicValidations() {

    $("#frmClientInfoBasic").validate(
        {
            rules: {
                FirstName: {
                    required: true,
                    maxlength: 50
                },
                DateOfBirth: {
                    required: true,
                    dateFormat: true
                },
                Sex: {
                    required: true
                },
                ForeignLicense: {
                    required: true
                },
                Email: {
                    email: true
                },
                IdentificationType: {
                    required: true
                },
            },
            messages: {
                FirstName: {
                    required: 'El Nombre es requerido.',
                },
                DateOfBirth: {
                    required: 'La Fecha de Nacimiento es requerida',
                    dateFormat: 'Debe ingresar una Fecha de Nacimiento válida',
                }, Sex: {
                    required: 'El Sexo es requerido.',
                }, ForeignLicense: {
                    required: 'La Licencia Extranjera es requerida.',
                },
                Email: {
                    email: 'El Email debe ser una dirección de correo electrónico válida'
                },
                IdentificationType: {
                    required: 'El Tipo de Identificación es requerida.',
                },
            }
        });
}

function frmVehicleInfoBasicValidations() {

    $("#frmVehicleInfoBasic").validate(
        {
            rules: {
                VehicleDriver_Id: {
                    required: true
                },
                VehicleModel_Make_Id: {
                    required: true
                },
                VehicleModel_Model_Id: {
                    required: true
                },
                yearsAvaibles: {
                    required: true
                },
                VehicleType: {
                    required: true
                },
                VehicleYearsOld: {
                    required: true
                },
                Usages: {
                    required: true
                },
                StoreCar: {
                    required: true
                },
                vehiclePrice: {
                    required: true
                }
            },
            messages: {
                VehicleDriver_Id: {
                    required: 'El Conductor Principal es requerido.',
                },
                VehicleModel_Make_Id: {
                    required: 'La Marca es requerida.'
                },
                VehicleModel_Model_Id: {
                    required: 'El Modelo es requerido.',
                },
                yearsAvaibles: {
                    required: 'El Año es requerido.',
                },
                VehicleType: {
                    required: 'El Tipo Vehículo es requerido.'
                },
                VehicleYearsOld: {
                    required: 'El campo Nuevo / 0KM es requerido.'
                },
                Usages: {
                    required: 'El Uso Principal es requerido.'
                },
                StoreCar: {
                    required: 'El Estacionamiento es requerido.'
                },
                vehiclePrice: {
                    required: 'El Valor es requerido.'
                }
            }
        });
}

function AllDropsChanges() {

    $("#VehicleModel_Make_Id").change(function (data) {
        var $this = $(this);
        getVehicleModels($this.val());

        if (isEditingVehicle) {

            $("#Usages").empty();
            $("#Usages").trigger("chosen:updated");

            var element = $(".ddlAllProducts");
            if (element.length > 1) {
                $.each(element, function (idx, obj) {
                    var randomid = $(obj).attr("data-vehiclerandomid");
                    if (randomid == vehicleRandomID) {
                        element = $(obj);
                    }
                });
            }
            element.empty();
            element.append('<option value="">Seleccionar</option>');
            element.trigger("chosen:updated");
            element.trigger("change");

            element = $(".Coverages");
            if (element.length > 1) {
                $.each(element, function (idx, obj) {
                    var randomid = $(obj).attr("data-vehiclerandomid");
                    if (randomid == vehicleRandomID) {
                        element = $(obj);
                    }
                });
            }
            element.trigger("change");

            element = $(".Deducible");
            if (element.length > 1) {
                $.each(element, function (idx, obj) {
                    var randomid = $(obj).attr("data-vehiclerandomid");
                    if (randomid == vehicleRandomID) {
                        element = $(obj);
                    }
                });
            }
            element.trigger("change");
        }
    });

    $("#VehicleModel_Model_Id").change(function () {
        var $this = $(this);

        var lastModelSelected = parseInt($("#lastModelSelected").val());
        lastModelSelected = isNaN(lastModelSelected) ? 1 : lastModelSelected;
        var modelIdActual = $this.val();

        if (lastModelSelected > 0) {

            if (lastModelSelected != modelIdActual) {

                if (modelIdActual == null) {
                    modelIdActual = lastModelSelected;
                }

                $("#lastModelSelected").val(modelIdActual);

                var brand = $("#VehicleModel_Make_Id").val();
                var year = $("#yearsAvaibles").val();

                if (isEditingVehicle) {

                    $("#Usages").empty();
                    $("#Usages").trigger("chosen:updated");

                    var element = $(".ddlAllProducts");
                    if (element.length > 1) {
                        $.each(element, function (idx, obj) {
                            var randomid = $(obj).attr("data-vehiclerandomid");
                            if (randomid == vehicleRandomID) {
                                element = $(obj);
                            }
                        });
                    }
                    element.empty();
                    element.append('<option value="">Seleccionar</option>');
                    element.trigger("chosen:updated");
                    element.trigger("change");

                    element = $(".Coverages");
                    if (element.length > 1) {
                        $.each(element, function (idx, obj) {
                            var randomid = $(obj).attr("data-vehiclerandomid");
                            if (randomid == vehicleRandomID) {
                                element = $(obj);
                            }
                        });
                    }
                    element.trigger("change");

                    element = $(".Deducible");
                    if (element.length > 1) {
                        $.each(element, function (idx, obj) {
                            var randomid = $(obj).attr("data-vehiclerandomid");
                            if (randomid == vehicleRandomID) {
                                element = $(obj);
                            }
                        });
                    }
                    element.trigger("change");
                }

                GetProductsFromSysflex(brand, modelIdActual, year);
            }
        }
    });

    $("#yearsAvaibles").change(function () {
        var $this = $(this);

        var year = $this.val();
        var brand = $("#VehicleModel_Make_Id").val();
        var model = $("#VehicleModel_Model_Id").val();

        if (isEditingVehicle) {

            var lastMakeSelected = $("#lastMakeSelected").val();
            if (lastMakeSelected == brand) {
                model = $("#lastModelSelected").val();
            }
        }

        GlobalDataProductLimits = null;

        //llamar metodo que me trae los productos de sysflex
        GetProductsFromSysflex(brand, model, year);
        enableVehicleOldCombo(year);
    });

    $("#VehicleType").change(function () {
        var $this = $(this);

        var selectedVehicleType = $this.val();

        UsagesListByVehicleType(selectedVehicleType);
    });

    $("#Usages").change(function () {

        var $this = $(this);

        var usageSelected = $this.val();

        $("#AddVehicle").removeAttr('disabled');
        $("#hdnInvalidUsage").val("N");

        var usage = GlobalDataUsages.filter(function (item) {
            return item.idUso == usageSelected;
        });

        if (usage.length > 0) {
            var UsageFound = usage[0];

            var allowed = UsageFound.allowed;
            var message = UsageFound.message;

            if (allowed == 2) {
                //mensaje error
                showError([message], 'Uso Principal');

                $("#AddVehicle").attr('disabled', 'disabled');

                $("#hdnInvalidUsage").val("S");
                return;
            }
            else if (allowed == 3) {
                //mensaje advertencia
                showWarning([message], 'Uso Principal');
                return;
            }

            ProductListByUsages(usageSelected);

            if (isEditingVehicle) {
                updateGlobalDataProductLimits(vehicleRandomID);
            } else {
                updateGlobalDataProductLimits();
            }
        }
    });

    $("#StoreCar").change(function () {
        var $this = $(this);
        if (isEditingVehicle) {
            getRates(vehicleRandomID);
        }
    });

    $(".ddlAllProducts").change(function () {
        var $this = $(this);
        var i = $this.attr('id');
        var selectedProductName = $("#" + i + " option:selected").text();
        var randomID = $this.attr("data-vehiclerandomid");

        if (ApplyToZero(randomID) == false && ($this.val() !== "")) {
            SetFieldsApplyToZero(false, randomID);
            return false;
        } else {
            SetFieldsApplyToZero(true, randomID);
        }

        currentCoveragesByUsage(selectedProductName, randomID);

        var parentDiv = $this.parent();
        if ($this.val() == "") {
            if (parentDiv.hasClass('erarequerido')) {
                parentDiv.addClass('requerido');
                parentDiv.removeClass('erarequerido');
            }
        } else {
            parentDiv.removeClass('requerido');
            parentDiv.addClass('erarequerido');
        }
    });

    $(".SurchargePercent").change(function () {
        var $this = $(this);
        var randomID = $this.attr("data-vehiclerandomid");

        getRates(randomID);
    });

    $("#Sex").change(function () {
        var s = $(this);

        if (s.val() != '') {
            if (s.val() == "Empresa" && !$("#IdentificationTypeCedRnc").is(":checked")) {
                s.val("");
                s.trigger("chosen:updated");
                s.trigger("change");
            }

            if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
                changedSex = true;
                disableAccordionsSections(true);
            } else {
                //disableAccordionsSections(false);
            }
        } else {
            if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
                disableAccordionsSections(true);
            } else {
                //disableAccordionsSections(false);
            }
        }
    });

    $("#ForeignLicense").change(function () {
        var s = $(this);
        if (s.val() != '') {

            if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
                changedForeingLicenceDriver = true;
                disableAccordionsSections(true);
            } else {
                //disableAccordionsSections(false);
            }
        } else {
            if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
                disableAccordionsSections(true);
            } else {
                //disableAccordionsSections(false);
            }
        }
    });
}

function getAgentsList() {

    $.ajax({
        url: "/Home/GetAgents",
        type: "POST",
        data: {},
        cache: false,
        async: false,
        success: function (json, textStatus, jqXHR) {

            var $select_elem = $("#AgentList");
            $select_elem.empty();
            $select_elem.append('<option value=""></option>');

            $.each(json.agents, function (idx, obj) {
                var toJson = obj.jsonAgentTree;
                $select_elem.append("<option value='" + toJson + "'>" + obj.FullNameAll + "</option>");
            });
            $select_elem.trigger("chosen:updated");

        },
        error: function (data, textStatus, jqXHR) {
            if (data.messageError) {
                showError([data.messageError]);
            } else {
                var textError = data + " " + textStatus + " " + jqXHR;
                showError([textError]);
            }
        }
    });
}

function addVehicle() {

    $("#AddVehicle").click(function () {

        var va = $("#frmVehicleInfoBasic").valid();
        if (va) {

            if (isEditingVehicle) {
                $('#headCober').removeClass('disabledAccordionTab');
            }

            $('#headCober').removeClass('disabledAccordionTab');
            $('#selecCober').addClass("collapse show");
        } else {
            return false;
        }

        var newVehicle = null;
        var SecuenciaVehicleSysflex = 1;

        if (AllVehicleDataToSave != null && LoadVehicle == false) {

            newVehicle = altFind(AllVehicleDataToSave, function (item) {
                return item.randomId == vehicleRandomID;
            });

            //newVehicle = AllVehicleDataToSave.find(function (item) {
            //    return item.randomId == vehicleRandomID;
            //});

            var arr = AllVehicleDataToSave.sort(function (a, b) { return (a.SecuenciaVehicleSysflex > b.SecuenciaVehicleSysflex) ? 1 : ((b.SecuenciaVehicleSysflex > a.SecuenciaVehicleSysflex) ? -1 : 0); })
            var lastVeh = arr[arr.length - 1];

            if (lastVeh) {
                SecuenciaVehicleSysflex = (lastVeh.SecuenciaVehicleSysflex + 1);
            }
        }

        var qtyVehicles = LoadVehicleQuantity;

        if ($("#qtyVehicles").val() == "") {
            $("#qtyVehicles").val(qtyVehicles);
        }
        $("#qtyVehicles").parent().addClass("is-dirty");

        var $qtyVehicles_elem = $('.qtyVehicles');

        if ($qtyVehicles_elem.length > 1) {
            $.each($qtyVehicles_elem, function (idx, obj) {

                var randomid = $(obj).attr("data-vehiclerandomid");

                if (randomid == vehicleRandomID) {
                    $qtyVehicles_elem = $(obj);
                    qtyVehicles = $qtyVehicles_elem.val();
                } else {
                    qtyVehicles = $qtyVehicles_elem.val();
                }
            });
        } else {
            var randomid = $qtyVehicles_elem.attr("data-vehiclerandomid");
            if (randomid == vehicleRandomID) {
                qtyVehicles = $qtyVehicles_elem.val();
            } else {
                qtyVehicles = $qtyVehicles_elem.val();
            }
        }
        $qtyVehicles_elem.parent().addClass("is-dirty");

        var parentDiv = $qtyVehicles_elem.parent().parent();

        if ($qtyVehicles_elem.val() == "") {

            if (parentDiv.hasClass('erarequerido')) {
                parentDiv.addClass('requerido');
                parentDiv.removeClass('erarequerido');
            }
        } else {
            parentDiv.removeClass('requerido');
            parentDiv.addClass('erarequerido');
        }


        var usage = $("#Usages").val();
        var selectedVehicleType = $("#VehicleType").val();

        var brand = $("#VehicleModel_Make_Id").val();
        var model = $("#VehicleModel_Model_Id").val();
        var year = $("#yearsAvaibles").val();
        var vehiclePrice = parseFloat($("#vehiclePrice").val().replace(/,/g, ''));
        var selectedCoverage = $("#Coverages").val();
        var VehicleDriver = $("#VehicleDriver_Id").val();
        var VehicleYearsOld = $("#VehicleYearsOld").val();

        var makeName = $("#VehicleModel_Make_Id option:selected").text();
        var modelName = $("#VehicleModel_Model_Id option:selected").text();
        var store = $("#StoreCar").val();
        var StoreName = $("#StoreCar option:selected").text();
        var VehicleQuantity = LoadVehicle ? LoadVehicleQuantity : qtyVehicles;

        if (newVehicle == null || newVehicle == undefined) {

            vehicleRandomID = Math.floor((Math.random() * -20000) + (-1));
            hasServices = false;

            var newVehicle = {};
            newVehicle.randomId = vehicleRandomID;
            newVehicle.Id = LoadVehicle ? LoadVehicleCurrentID : null;
            newVehicle.SecuenciaVehicleSysflex = LoadVehicle ? LoadVehicleCurrentSecuenciaVehicleSysflex : SecuenciaVehicleSysflex;

            newVehicle.Year = year;
            newVehicle.VehiclePrice = vehiclePrice;
            newVehicle.SelectedVehicleTypeId = selectedVehicleType;
            newVehicle.SelectedVehicleTypeName = selectedVehicleType;
            newVehicle.UsageId = usage;
            newVehicle.VehicleModel_Make_Id = brand;
            newVehicle.VehicleMakeName = makeName;
            newVehicle.VehicleModel_Model_Id = model;
            newVehicle.VehicleModelName = modelName;
            newVehicle.VehicleDescription = makeName + " " + modelName;
            newVehicle.StoreId = store;
            newVehicle.StoreName = StoreName;
            newVehicle.Driver_Id = VehicleDriver;
            newVehicle.VehicleYearOld = VehicleYearsOld;
            newVehicle.VehicleQuantity = VehicleQuantity;

            newVehicle.GlobalDataUsages = GlobalDataUsages;
            newVehicle.GlobalData = GlobalData;
            newVehicle.GlobalDataProductsByUsage = GlobalDataProductsByUsage;
            newVehicle.GlobalAllProducts = GlobalAllProducts;

            var realVehicle = setVehicle(newVehicle);

            setAllVehicleDataToSave(realVehicle);


            if (firstTime) {

                //setiando randomid a los campos existentes
                var desc = realVehicle.VehicleDescription + " " + realVehicle.Year;
                $("#vehicleTitle").html(desc);
                $("#vehicleTitle").attr("data-vehiclerandomid", realVehicle.randomId);
                /*$("#vehicleDescription").html(desc);
                 $("#vehicleDescription").attr("data-vehiclerandomid", realVehicle.randomId);*/

                var apply = ApplyToZero(realVehicle.randomId);

                $("#VehicleValue").attr("data-vehiclerandomid", realVehicle.randomId);

                //Si aplica a 0 como valor, entonces mostrar 0 en el campo VehicleValue
                if (apply && vehiclePrice <= 1) {
                    $("#VehicleValue").html("$" + number_format("0", 2));
                }
                else if (!apply && vehiclePrice <= 1) {
                    vehiclePrice = "0";
                    $("#VehicleValue").html("$" + number_format(vehiclePrice, 2));
                }
                else {
                    $("#VehicleValue").html("$" + number_format(vehiclePrice, 2));
                }

                $("#ddlAllProducts").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#Coverages").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#Deducible").attr("data-vehiclerandomid", realVehicle.randomId);

                $("#SurchargePercent").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#qtyVehicles").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#btnDeleteVehicle").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#btnEditVehicle").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#servicesPopUp").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#dvparentSectionVehicle").attr("data-vehiclerandomid", realVehicle.randomId);

                $("#totalPrime").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#liflotillaDiscount").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#flotillaDiscountAmount").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#liPrimeFlotillaDiscount").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#PrimeFlotillaDiscountAmount").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#ISC").attr("data-vehiclerandomid", realVehicle.randomId);
                $("#totalToPay").attr("data-vehiclerandomid", realVehicle.randomId);

                firstTime = false;
            }
        } else {
            //Actualizando
            newVehicle.Year = year;
            newVehicle.VehiclePrice = vehiclePrice;
            newVehicle.SelectedVehicleTypeId = selectedVehicleType;
            newVehicle.SelectedVehicleTypeName = selectedVehicleType;
            newVehicle.UsageId = usage;
            newVehicle.VehicleModel_Make_Id = brand;
            newVehicle.VehicleMakeName = makeName;
            newVehicle.VehicleModel_Model_Id = model;
            newVehicle.VehicleModelName = modelName;
            newVehicle.VehicleDescription = makeName + " " + modelName;
            newVehicle.StoreId = store;
            newVehicle.StoreName = StoreName;
            newVehicle.Driver_Id = VehicleDriver;
            newVehicle.VehicleYearOld = VehicleYearsOld;
            newVehicle.VehicleQuantity = VehicleQuantity;

            newVehicle.GlobalDataUsages = GlobalDataUsages;
            newVehicle.GlobalData = GlobalData;
            newVehicle.GlobalDataProductsByUsage = GlobalDataProductsByUsage;
            newVehicle.GlobalAllProducts = GlobalAllProducts;

            var realVehicle = setVehicle(newVehicle);

            setAllVehicleDataToSave(realVehicle, "UPDATE");

            updateHtmlValueFromVehicle(newVehicle.randomId);
        }

        resetVehicleInfo();

        if (isEditingVehicle == false) {
            paintVehicles(AllVehicleDataToSave);
        }

        remove0kmIfIsNotNew(vehicleRandomID);

        if (LoadVehicle == false) {
            vehicleRandomID = 0;
        }

        if (isEditingVehicle) {
            isEditingVehicle = false;
            $('#headCober').removeClass('disabledAccordionTab');
            $("#AddVehicle").html('<i class="material-icons">add</i> Agregar Vehículo');
            $("#lastDeducibleSelected").val("");
        }

        //Poniendole el marco de requerdo luego de agregar el Vehículo
        var elm = $(".addAgain");
        $.each(elm, function (idx, obj) {
            var l = $(this);

            if (!l.hasClass("vprice")) {
                if (l.hasClass('erarequerido')) {
                    l.removeClass("erarequerido");
                    l.addClass("requerido");
                }
            }
        });

        return false;
    });

}

function getYearAvaiblesList() {

    $.getJSON('/Home/GetVehicleAvailableYearsList', function (json) {
        var $select_elem = $("#yearsAvaibles");
        $select_elem.empty();
        $select_elem.append('<option value=""></option>');

        $.each(json.agents, function (idx, obj) {
            $select_elem.append('<option value="' + obj.NameId + '">' + obj.FullNameAll + '</option>');
        });
        $select_elem.trigger("chosen:updated");
    });
}

function getVehicleModels(brandID) {

    $.ajax({
        url: "/Home/getVehiclesModelsByBrands",
        dataType: 'json',
        async: isEditingVehicle,
        cache: false,
        data: {
            BrandID: brandID
        },
        success: function (json) {

            var $select_elem = $("#VehicleModel_Model_Id");
            $select_elem.empty();
            $select_elem.append('<option value=""></option>');

            $.each(json, function (idx, obj) {
                $select_elem.append('<option value="' + obj.Id + '">' + obj.Name + '</option>');
            });

            if (isEditingVehicle) {

                var lastMakeSelected = $("#lastMakeSelected").val();
                if (lastMakeSelected == brandID) {

                    var last = $("#lastModelSelected").val();
                    $select_elem.val(last);
                }

            }
            $select_elem.trigger("chosen:updated");
        }
    });
}

function loadQuotation(quotationID) {

    var isNumber = parseInt(quotationID);
    if (!isNaN(isNumber)) {
        return false;
    }

    $.getJSON('/Home/loadQuotatoin', {
        QuotationID: quotationID
    },
        function (data) {

            if (data.error) {
                showError([data.error], 'Cotización no existe');
                window.history.replaceState({}, document.title, "/Home/Index");
                return false;
            }

            var quotData = data.quotData;

            if (quotData.QuotationNumber != null) {
                var lasQuotationStep = parseInt(quotData.LastStepVisited);

                
                var actualDate = moment(new Date());
                var selectedDat = moment(quotData.StartDate);

                var result = getNewDateYear(actualDate);

                var isbefore = moment(actualDate).isBefore(selectedDat);
                var isSameYear = moment(actualDate).isSame(selectedDat, "year");
                var isSameMonth = moment(actualDate).isSame(selectedDat, "month");
                var isSameDay = moment(actualDate).isSame(selectedDat, "day");

                if (isbefore) {
                    GlobalcurrentStartDateSelected = (moment(quotData.StartDate ? quotData.StartDate : new Date()).format(getCurrentDateTimeMomentFormat()));
                    GlobalcurrentEndDateSelected = (moment(quotData.EndDate ? quotData.EndDate : result).format(getCurrentDateTimeMomentFormat()));
                }
                else if (isSameDay && isSameMonth && isSameYear) {
                    GlobalcurrentStartDateSelected = (moment(quotData.StartDate ? quotData.StartDate : new Date()).format(getCurrentDateTimeMomentFormat()));
                    GlobalcurrentEndDateSelected = (moment(quotData.EndDate ? quotData.EndDate : result).format(getCurrentDateTimeMomentFormat()));
                } else {
                    GlobalcurrentStartDateSelected = (moment(new Date()).format(getCurrentDateTimeMomentFormat()));
                    GlobalcurrentEndDateSelected = (moment(result).format(getCurrentDateTimeMomentFormat()));
                }


                $("#spQuotationNumber").html(quotData.QuotationNumber);

                //Hidden fields Cotizacion
                $("#quotationID").val(quotData.Id);
                $("#QuotationNumber").val(quotData.QuotationNumber);
                $("#QuotationCoreNumber").val(quotData.QuotationCoreNumber);
                $("#Financed").val(quotData.Financed);
                //
                var agent = (quotData._agentQuotation != undefined || quotData._agentQuotation != null) ? quotData._agentQuotation.Username : "";
                $("#AgentList option").each(function () {
                    var act = $(this).val();
                    if (act != "") {

                        var tojson = JSON.parse(act);
                        //en esto me quesde
                        if (tojson != null) {

                            if (tojson.NameId == agent) {
                                $("#AgentList").val(act);
                                $("#oldAgentSelected").val(act);
                                return false;
                            }
                        }
                    }
                });
                $("#AgentList").trigger("chosen:updated");

                //Driver Basic Info
                $.each(quotData._drivers, function (i, dri) {

                    if (dri.IsPrincipal) {

                        $("#driver").val(dri.Id);

                        $("#FirstName").val(dri.FirstName);
                        $("#FirstName").parent().addClass("is-dirty");
                        removeErrorBorderClass($("#FirstName"));

                        $("#FirstSurname").val(dri.FirstSurname);
                        $("#FirstSurname").parent().addClass("is-dirty");

                        $("#Sex").val(dri.Sex);
                        $("#Sex").trigger("chosen:updated");
                        removeErrorBorderClass($("#Sex"), true);

                        if (dri.ForeignLicense) {
                            $("#ForeignLicense").val("Si");
                        } else {
                            $("#ForeignLicense").val("No");
                        }
                        $("#ForeignLicense").parent().addClass("is-dirty");
                        removeErrorBorderClass($("#ForeignLicense"));

                        if (dri.IdentificationNumber !== '') {
                            $("#IdentificationNumber").val(dri.IdentificationNumber);
                            $("#IdentificationNumber").parent().addClass("is-dirty");
                        }

                        if (dri.PhoneNumber !== '') {
                            $("#PhoneNumber").val(dri.PhoneNumber);
                            $("#PhoneNumber").parent().addClass("is-dirty");
                        }

                        if (dri.Email !== '') {
                            $("#Email").val(dri.Email);
                            $("#Email").parent().addClass("is-dirty");
                        }

                        var check = $("input[name='IdentificationType']");
                        $.each(check, function (i, iden) {
                            var objCheck = $(iden);
                            if (objCheck.val() == dri.IdentificationType) {
                                objCheck.parent().addClass('is-checked');
                                objCheck.trigger('click');
                                removeErrorBorderClass(objCheck, false, true);
                            }
                        });

                        var realDob = moment(dri.DateOfBirth).format("DD-MMM-YYYY");
                        if (dri.IdentificationType !== "RNC") {
                            $("#DateOfBirth").val(realDob);
                            $("#DateOfBirth").parent().addClass("is-dirty");
                        } else {
                            $("#DateOfBirth").val("N/A");
                        }
                        removeErrorBorderClass($("#DateOfBirth"));
                    }
                });
                //

                //llenar el drop drivers con los drivers en la seccion de Vehículo
                var $select_elem = $("#VehicleDriver_Id");
                $select_elem.empty();
                $select_elem.append('<option value=""></option>');
                $.each(quotData._drivers, function (idx, obj) {
                    //Por ahora solo sera el conductor principal
                    if (obj.IsPrincipal) {
                        var driverNameFull = obj.FirstName + ' ' + obj.FirstSurname;
                        $select_elem.append("<option value='" + obj.Id + "'>" + driverNameFull + "</option>");
                    }
                });
                $select_elem.trigger("chosen:updated");
                //

                AllVehicleDataToSave = null;
                firstTime = true;
                var hasVehicle = false;

                //Vehículos
                $.each(quotData._vehicles, function (idx, obj) {
                    var vehicle = obj;

                    if (vehicle != undefined) {

                        disableAccordionsSections(false);

                        //trayendo driver
                        $("#VehicleDriver_Id").val(vehicle.Driver_Id);
                        $("#VehicleDriver_Id").trigger("chosen:updated");
                        removeErrorBorderClass($("#VehicleDriver_Id"), true);

                        $("#lastModelSelected").val(vehicle.VehicleModel_Model_Id);

                        //Cascade
                        $("#VehicleModel_Make_Id").val(vehicle.VehicleModel_Make_Id);
                        $("#VehicleModel_Make_Id").trigger("chosen:updated");
                        $("#VehicleModel_Make_Id").trigger("change");
                        $("#lastMakeSelected").val(vehicle.VehicleModel_Make_Id);

                        $("#VehicleModel_Model_Id").val(vehicle.VehicleModel_Model_Id);
                        $("#VehicleModel_Model_Id").trigger("chosen:updated");

                        $("#yearsAvaibles").val(vehicle.Year);
                        $("#yearsAvaibles").trigger("chosen:updated");
                        $("#yearsAvaibles").trigger("change");

                        $("#VehicleType").val(vehicle.SelectedVehicleTypeName);
                        $("#VehicleType").trigger("chosen:updated");
                        $("#VehicleType").trigger("change");

                        $("#Usages").val(vehicle.UsageId);
                        $("#Usages").trigger("chosen:updated");
                        $("#Usages").trigger("change");
                        //

                        $("#VehicleYearsOld").val(vehicle.VehicleYearOld);
                        $("#VehicleYearsOld").parent().addClass('is-dirty');
                        $("#VehicleYearsOld").trigger("change");

                        $("#vehiclePrice").val(vehicle.VehiclePrice);

                        $("#StoreCar").val(vehicle.StoreId);
                        $("#StoreCar").trigger("chosen:updated");

                        LoadVehicle = true;
                        LoadVehicleCurrentID = vehicle.Id;
                        LoadVehicleCurrentSecuenciaVehicleSysflex = vehicle.SecuenciaVehicleSysflex;
                        wasLoadVehicle = true;

                        LoadVehicleQuantity = vehicle.VehicleQuantity;

                        $("#AddVehicle").trigger('click');

                        var randomID = vehicleRandomID;

                        GlobalServicesSelected = vehicle._services;

                        var theText = vehicle.SelectedProductName;
                        getOptionsByTextOfDropWithClassAndSelect('.ddlAllProducts', randomID, theText);

                        theText = vehicle.SelectedCoverageName;
                        getOptionsByTextOfDropWithClassAndSelect('.Coverages', randomID, theText);

                        var pl = vehicle.vehicleProductLimits;

                        if (pl != undefined && pl != null) {
                            var dedu = pl.SelectedDeductibleName;

                            if (dedu != null) {
                                getOptionsByTextOfDropWithClassAndSelect('.Deducible', randomID, dedu);
                            }
                        }

                        LoadVehicle = false;
                        LoadVehicleCurrentID = 0;
                        LoadVehicleCurrentSecuenciaVehicleSysflex = 0;
                        LoadVehicleQuantity = 1;
                        vehicleRandomID = 0;
                        wasLoadVehicle = false;
                        GlobalServicesSelected = null;

                        hasVehicle = true;
                    }
                });

                if (hasVehicle) {
                    $('#headInfoCC').find('a').trigger('click');
                    $('#infoVH').addClass("collapse show");
                    $('#selecCober').addClass("collapse show");
                }

                if ($('#AllowRedirect').val() == 'true') {
                    if (lasQuotationStep > 1) {
                        switch (lasQuotationStep) {
                            case 2: // redireccionar al summary
                                $('#AllowRedirect').val('false');
                                $('.returnStep2').click();
                                break;
                            case 3:
                                $('#AllowRedirect').val('false');
                                $('.returnStep3').click();
                                break;
                            case 4:
                                $('#AllowRedirect').val('false');
                                $('.returnStep4').click();
                                break;
                            default:
                                break;
                        }
                    }
                }
                //
            }
        });
}

function GetURLParameter() {
    var sPageURL = window.location.href;
    sPageURL = sPageURL.replace('#', '');
    var indexOfLastSlash = sPageURL.lastIndexOf("/");
    var returnValue = "";


    if (indexOfLastSlash > 0 && sPageURL.length - 1 != indexOfLastSlash) {
        returnValue = sPageURL.substring(indexOfLastSlash + 1);

        if (returnValue.toLowerCase() == 'index') {
            return 0;
        }

        return returnValue;
    }
    else {
        return 0;
    }
}

function GetProductsFromSysflex(brand, model, year) {

    if (brand > 0 && model > 0 && year > 0) {

        $.ajax({
            url: "/Home/GetVehicleTypes_New",
            dataType: 'json',
            async: false,
            cache: false,
            data: {
                brandId: brand,
                modelId: model,
                vehicleYear: year
            },
            success: function (data) {
                $("#lastModelSelected").val(model);

                GlobalData = data;
                fillDropVehicleTypes(GlobalData);
            }
        });
    }
    else {
        return [];
    }
}

function fillDropVehicleTypes(vehicleTypes) {

    var $select_elem = $("#VehicleType");
    $select_elem.empty();
    $select_elem.append('<option value=""></option>');

    $.each(vehicleTypes, function (idx, obj) {
        $select_elem.append("<option value='" + obj.Name + "'>" + obj.Name + "</option>");
    });
    $select_elem.trigger("chosen:updated");
}

function UsagesListByVehicleType(selectedVehicleType) {

    if (selectedVehicleType) {

        var usagebytype;

        var t = GlobalData.filter(function (item) {
            return item.Name == selectedVehicleType;
        });


        if (t != undefined) {
            usagebytype = t[0].NewUsages;
        }

        $.ajax({
            url: '/Home/GetUsageStates',
            dataType: 'json',
            async: isEditingVehicle,
            success: function (data) {

                $.each(data, function (idx, us) {

                    var obj = {
                        idUso: us.id,
                        descUso: us.name,
                        allowed: us.allowed,
                        message: us.message
                    }

                    usagebytype.push(obj);
                });
            }
        });

        GlobalDataUsages = usagebytype;

        var $select_elem = $("#Usages");
        $select_elem.empty();
        $select_elem.append('<option value=""></option>');

        $.each(usagebytype, function (idx, obj) {
            $select_elem.append("<option value='" + obj.idUso + "'>" + obj.descUso + "</option>");
        });
        $select_elem.trigger("chosen:updated");
    }
    return [];
}

function enableVehicleOldCombo(vehicleYear) {

    var VehicleYearsOld = $("#VehicleYearsOld ");

    if (vehicleYear > 0) {

        var QtyYearsBack0KmVip = "";

        $.ajax({
            url: "/Home/GetQtyYearsBack0KmVip",
            dataType: 'json',
            async: isEditingVehicle,
            success: function (data) {
                QtyYearsBack0KmVip = data;
            }
        });


        if (!QtyYearsBack0KmVip) {
            QtyYearsBack0KmVip = 2;
        }
        var currentYear = new Date().getFullYear();


        if ((currentYear - QtyYearsBack0KmVip) <= vehicleYear && vehicleYear <= (currentYear + 1)) {

            //var isFirstLoading = self.isFirstLoading();
            var isDisabled = VehicleYearsOld.is("disabled");
            var lastvalue = $("#LastSelectedVehicleYearsOld").val();
            var actualvalue = VehicleYearsOld.val();


            if (/*isFirstLoading == false &&*/ lastvalue == actualvalue) {
                VehicleYearsOld.val("");
                $("#LastSelectedVehicleYearsOld").val(VehicleYearsOld.val());
            }

            VehicleYearsOld.parent().removeClass("is-dirty");
            VehicleYearsOld.removeAttr("disabled");
        }
        else {

            VehicleYearsOld.val("Usado");
            VehicleYearsOld.trigger("chosen:updated");
            VehicleYearsOld.parent().addClass("is-dirty");
            VehicleYearsOld.trigger("change");

            $("#LastSelectedVehicleYearsOld").val(VehicleYearsOld.val());
            //self.isFirstLoading(false);

            VehicleYearsOld.attr("disabled", "disabled");
        }
    }
    else
        VehicleYearsOld.removeAttr("disabled");
}

function getStorages() {

    $.ajax({
        url: "/Home/GetStoreStates",
        dataType: 'json',
        async: false,
        success: function (data) {

            var $select_elem = $("#StoreCar");
            $select_elem.empty();
            $select_elem.append('<option value=""></option>');

            $.each(data, function (idx, obj) {
                $select_elem.append("<option value='" + obj.id + "'>" + obj.name + "</option>");
            });
            $select_elem.trigger("chosen:updated");
        }
    });
}

function ProductListByUsages(usageSelected) {

    if (usageSelected) {

        var UsageFound = GlobalDataUsages.filter(function (item) {
            return item.idUso == usageSelected;
        });

        if (UsageFound.length) {
            var currentUsageFound = UsageFound[0];

            var selectedVehicleType = $("#VehicleType").val();

            var t = GlobalData.filter(function (item) {
                return item.Name == selectedVehicleType;
            });

            var AllProductListByUsages;

            if (t.length > 0) {
                AllProductListByUsages = t[0].ProductByUsages;
                GlobalAllProducts = t[0].Products;
            }

            var FilteredProductList = AllProductListByUsages.filter(function (item) {
                return item.UsoDescripcion.indexOf(currentUsageFound.descUso) != -1;
            });

            if (FilteredProductList.length > 0) {

                var NewCurrentProductList = [];

                $.each(FilteredProductList, function (idx, plist) {

                    var prodsNews = altFind(GlobalAllProducts, function (currProd) {
                        return currProd.Name.indexOf(plist.ProductoDescripcion) != -1
                    });

                    //var prodsNews = GlobalAllProducts.find(function (currProd) {
                    //    return currProd.Name.indexOf(plist.ProductoDescripcion) != -1
                    //});

                    if (prodsNews != undefined) {
                        NewCurrentProductList.push(prodsNews);
                    }
                });

                GlobalDataProductsByUsage = NewCurrentProductList;

                var $select_elem = $(".ddlAllProducts");

                if ($select_elem.length > 1) {
                    $.each($select_elem, function (idx, obj) {
                        var randomid = $(obj).attr("data-vehiclerandomid");
                        if (randomid == vehicleRandomID) {
                            $select_elem = $(obj);
                        }
                    });
                } else {
                    var hasValue = $select_elem.val();
                    if (hasValue != "") {
                        return;
                    }
                }

                if (LoadVehicle == false && $select_elem.length == 1 && wasLoadVehicle == false) {
                    $select_elem.empty();
                    $select_elem.append('<option value="">Seleccionar</option>');
                    $.each(NewCurrentProductList, function (idx, obj) {
                        $select_elem.append("<option value='" + obj.Id + "'>" + obj.Name + "</option>");
                    });
                }
            }
        }
    }
    return [];
}

function currentCoveragesByUsage(selectedProductName, randomID) {

    if (selectedProductName) {

        var vehicle = getAllDataVehicleByRandomID(randomID);

        var usage = vehicle.UsageId; //$("#Usages").val();
        var selectedVehicleType = vehicle.SelectedVehicleTypeName; //$("#VehicleType").val();        

        var vehGlobalDataUsages = vehicle.GlobalDataUsages;
        var vehGlobalData = vehicle.GlobalData;

        var UsageFound = altFind(vehGlobalDataUsages, function (item) {
            return item.idUso == usage
        });

        //var UsageFound = vehGlobalDataUsages.find(function (item) {
        //    return item.idUso == usage
        //});

        if (UsageFound != undefined) {

            var t = vehGlobalData.filter(function (item) {
                return item.Name == selectedVehicleType;
            });

            var AllCoveragesListByUsages;

            if (t.length > 0) {
                AllCoveragesListByUsages = t[0].CoveragesByUsages;
            }

            var FilteredCovList = AllCoveragesListByUsages.filter(function (item) {
                return item.UsoDescripcion.indexOf(UsageFound.descUso) != -1 && item.ProductName == selectedProductName;
            });

            GlobalDataCoverages = FilteredCovList;

            vehicle.GlobalDataCoverages = GlobalDataCoverages
            var realv = setVehicle(vehicle);
            setAllVehicleDataToSave(realv, "UPDATE");

            $(".Coverages").off("change");
            $(".Coverages").change(function () {
                var $this = $(this);
                var randomID = $this.attr("data-vehiclerandomid");

                updateGlobalDataProductLimits(randomID, $this.val());

                showRechargeAllLawProducts($this.val(), randomID);

                var $elem = $(".servicesPopUp");
                if ($elem.length > 1) {
                    $.each($elem, function (idx, obj) {
                        var randomid = $(obj).attr("data-vehiclerandomid");
                        if (randomid == randomID) {
                            $elem = $(obj);
                        }
                    });
                }

                if ($this.val() !== '' && hasServices) {
                    $elem.removeAttr('disabled');
                } else {
                    $elem.attr('disabled', 'disabled');
                }

                var parentDiv = $this.parent();
                if ($this.val() == "") {
                    if (parentDiv.hasClass('erarequerido')) {
                        parentDiv.addClass('requerido');
                        parentDiv.removeClass('erarequerido');
                    }
                } else {
                    parentDiv.removeClass('requerido');
                    parentDiv.addClass('erarequerido');
                }
            });

            var $select_elem = $(".Coverages");
            if ($select_elem.length > 1) {
                $.each($select_elem, function (idx, obj) {
                    var randomid = $(obj).attr("data-vehiclerandomid");
                    if (randomid == randomID) {
                        $select_elem = $(obj);
                    }
                });
            }
            $select_elem.empty();
            $select_elem.append('<option value="">Seleccionar</option>');
            $.each(GlobalDataCoverages, function (idx, obj) {
                $select_elem.append("<option value='" + obj.Id + "'>" + obj.Name + "</option>");
            });

            var $select_elem = $(".Deducible");
            if ($select_elem.length > 1) {
                $.each($select_elem, function (idx, obj) {
                    var randomid = $(obj).attr("data-vehiclerandomid");
                    if (randomid == randomID) {
                        $select_elem = $(obj);
                    }
                });
            }
            $select_elem.empty();
            $select_elem.append('<option value="">Seleccionar</option>');
        }
    } else {

        var $select_elem = $(".Coverages");
        if ($select_elem.length > 1) {
            $.each($select_elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $select_elem = $(obj);
                }
            });
        }
        $select_elem.empty();
        $select_elem.append('<option value="">Seleccionar</option>');

        $select_elem = $(".Deducible");
        if ($select_elem.length > 1) {
            $.each($select_elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $select_elem = $(obj);
                }
            });
        }
        $select_elem.empty();
        $select_elem.append('<option value="">Seleccionar</option>');
    }
}

function updateGlobalDataProductLimits(randomID, realSelectedCoverage) {

    var brand = "";
    var model = "";
    var year = "";
    var vehiclePrice = "";
    var selectedCoverage = "";
    var vehicle = null;

    if (randomID == undefined) {
        brand = $("#VehicleModel_Make_Id option:selected").val();
        model = $("#VehicleModel_Model_Id option:selected").val();
        year = $("#yearsAvaibles option:selected").val();
        vehiclePrice = parseFloat($("#vehiclePrice").val().replace(/,/g, ''));
        selectedCoverage = $("#Coverages option:selected").val();
    }
    else if (isEditingVehicle && randomID != undefined) {
        brand = $("#VehicleModel_Make_Id option:selected").val();
        model = $("#VehicleModel_Model_Id option:selected").val();
        year = $("#yearsAvaibles option:selected").val();
        vehiclePrice = parseFloat($("#vehiclePrice").val().replace(/,/g, ''));
        selectedCoverage = $("#Coverages option:selected").val();
        vehicle = getAllDataVehicleByRandomID(randomID);
    } else {
        vehicle = getAllDataVehicleByRandomID(randomID);
        brand = vehicle.VehicleModel_Make_Id;
        model = vehicle.VehicleModel_Model_Id;
        year = vehicle.Year;
        vehiclePrice = vehicle.VehiclePrice;
        selectedCoverage = vehicle.SelectedCoverageCoreId == undefined ? realSelectedCoverage : (realSelectedCoverage != vehicle.SelectedCoverageCoreId ? realSelectedCoverage : vehicle.SelectedCoverageCoreId);
    }

    if (vehiclePrice == 0) {
        if (ApplyToZero(randomID)) {
            vehiclePrice = 1;
        }
    }

    if (selectedCoverage && brand && year && vehiclePrice) {

        $.ajax({
            url: "/Home/GetCoverageDetailsOfVehicle",
            dataType: 'json',
            async: isEditingVehicle,
            data: {
                coverageCoreId: selectedCoverage,
                makeId: brand,
                modelId: model,
                vehiclePrice: vehiclePrice
            },
            success: function (data) {

                GlobalDataProductLimits = data.coverageLimits;
                GlobalDataDeductibleList = data.deductibles;

                if (vehicle != undefined) {

                    vehicle.GlobalDataProductLimits = GlobalDataProductLimits;

                    //chequeo si es un semifull
                    var SelectedCoverageName = getOptionSelectedTextDropWithClass(".Coverages", randomID);
                    var isSemifull = SelectedCoverageName.toLowerCase().indexOf('semi');
                    var issemi = (isSemifull != -1);

                    if (issemi) {
                        vehicle.GlobalDataDeductibleList = [];
                    } else {
                        vehicle.GlobalDataDeductibleList = GlobalDataDeductibleList;
                    }

                    var realVehicle = setVehicle(vehicle);
                    setAllVehicleDataToSave(realVehicle, "UPDATE");

                    var ServicesCoverages = vehicle.GlobalDataProductLimits.ServicesCoverages;

                    if (ServicesCoverages.length <= 0) {
                        hasServices = false;
                    } else {
                        hasServices = true;
                    }
                }

                getDeducibles(GlobalDataDeductibleList, randomID);


                if (randomID !== undefined) {
                    SetAdditionals(randomID);
                }

                if (!isEditingVehicle) {
                    getRates(randomID);
                }
            }
        });
    }
    else {
        GlobalDataProductLimits = null;
        if (vehicle != undefined) {
            vehicle.GlobalDataProductLimits = null;
        }
    }
}

function getDeducibles(deductibleList, randomID) {

    var vh = getAllDataVehicleByRandomID(randomID);

    $(".Deducible").off("change");
    $(".Deducible").change(function () {
        var $this = $(this);

        //$("#lastDeducibleSelected").val($this.val());
        var randomID = $this.attr("data-vehiclerandomid");
        //var realSelectedCoverage = getOptionSelectedDropWithClass(".Coverages", randomID);
        //updateGlobalDataProductLimits(randomID, realSelectedCoverage);

        if ($this.val() !== "") {
            getRates(randomID);
        }

        var parentDiv = $this.parent();
        if ($this.val() == "") {
            if (parentDiv.hasClass('erarequerido')) {
                parentDiv.addClass('requerido');
                parentDiv.removeClass('erarequerido');
            }
        } else {
            parentDiv.removeClass('requerido');
            parentDiv.addClass('erarequerido');
        }
    });

    var $select_elem = $(".Deducible");

    if ($select_elem.length > 1) {

        $.each($select_elem, function (idx, obj) {

            var randomid = $(obj).attr("data-vehiclerandomid");

            if (randomid == randomID) {
                $select_elem = $(obj);
            }
        });
    }
    $select_elem.empty();
    $select_elem.append('<option value="">Seleccionar</option>');

    if ((vh != undefined && vh.GlobalDataDeductibleList.length > 0) || deductibleList.length > 0) {
        $select_elem.removeAttr('disabled');
    } else {
        $select_elem.attr('disabled', 'disabled');

        var parentDiv = $select_elem.parent();
        parentDiv.removeClass('requerido');
        parentDiv.addClass('erarequerido');
        return false;
    }

    var lastSelected = "";
    var exist = false;

    $.each(deductibleList, function (idx, obj) {
        lastSelected = parseInt($("#lastDeducibleSelected").val());
        lastSelected = !isNaN(lastSelected) ? lastSelected : "";

        if (lastSelected == obj.CoreId) {
            exist = true;
        }
        $select_elem.append("<option value='" + obj.CoreId + "'>" + obj.Name + "</option>");
    });

    var islaw = isLawProduct(randomID);
    if (islaw) {
        exist = false;
        $select_elem.attr('disabled', 'disabled');
    } else {
        //chequeo si es un semifull
        var SelectedCoverageName = getOptionSelectedTextDropWithClass(".Coverages", randomID);
        var isSemifull = SelectedCoverageName.toLowerCase().indexOf('semi');
        var issemi = (isSemifull != -1);

        if (issemi) {
            exist = false;
            $select_elem.attr('disabled', 'disabled');
        }
    }

    if (isEditingVehicle) {
        exist = false;
    }

    if (exist) {
        $select_elem.val(lastSelected);
    }
}

function getRates(randomID, isRequoting) {

    var vehicle = getAllDataVehicleByRandomID(randomID);

    if (vehicle != null) {

        if (vehicle.GlobalDataProductLimits) {

            vehicle.iscompletedVehicle = false;

            if (validateGetRates(randomID)) {

                var servicesIdList = [];

                var ServicesCoverages = vehicle.GlobalDataProductLimits.ServicesCoverages;

                if (ServicesCoverages) {
                    var allCoverages = new Array();
                    $.each(ServicesCoverages, function (idx, item) { $.each(item.Coverages, function (idx, sItem) { allCoverages.push(sItem) }); });
                    $.each(allCoverages.filter(function (idx, item) { return item.IsSelected; }), function (idx, item) { servicesIdList.push(item.CoverageDetailCoreId); });
                }

                var getQuotationNumberForRates = $("#quotationID").val();
                var getQuotationNumber = $("#QuotationNumber").val();


                isRequoting = (isRequoting == false || isRequoting == undefined) ? false : true;

                var _qtyVehiclesByVehicle = isRequoting == false ? qtyVehiclesByVehicle() : qtyVehiclesByVehicleForRequoting();

                var realTotalVehiclesForDiscountFlotilla = _qtyVehiclesByVehicle;

                var q = $(".qtyVehicles");
                if (q.length > 1) {
                    $.each(q, function (idx, obj) {
                        var randomid = $(obj).attr("data-vehiclerandomid");
                        if (randomid == randomID) {
                            q = $(obj);
                        }
                    });
                }

                var qtyVehicles = isRequoting == false ? q.val() : vehicle.VehicleQuantity;

                var quotationCoreNumber = $("#QuotationCoreNumber").val();

                //Original
                var NewAgentID = "";
                var NewAgent = getNewAgentSelected();

                if (NewAgent != null) {
                    NewAgentID = NewAgent.NameId;
                }

                var getActualAgentSelected = getOldAgentSelected();
                var ActualAgentSelected = "";

                if (getActualAgentSelected != null) {
                    ActualAgentSelected = getActualAgentSelected.NameId;
                }

                var principalDateOfBirth = isRequoting == false ? $("#DateOfBirth").val() : ((vehicle.driverdob == undefined || vehicle.driverdob == null) ? vehicle.principalDateOfBirth : vehicle.driverdob);
                var wasChangeDateBirth = false;
                if (changedDateBirth == true) {
                    wasChangeDateBirth = true;
                }

                var clientSex = isRequoting == false ? $("#Sex").val() : ((vehicle.driversex == undefined || vehicle.driversex == null) ? vehicle.principalSex : vehicle.driversex);
                var wasChangeClientSex = false;
                if (changedSex == true) {
                    wasChangeClientSex = true;
                }

                var getForeingLicenceDriver = isRequoting == false ? $("#ForeignLicense").val() : ((vehicle.driverforeignlicense == undefined || vehicle.driverforeignlicense == null) ? vehicle.principalrforeignlicense : vehicle.driverforeignlicense);

                var arraySelfAndThirdsDamage = [];
                var arrayServiceCoverages = [];

                if (vehicle.GlobalDataProductLimits.SelfDamagesCoverages) {
                    $.each(vehicle.GlobalDataProductLimits.SelfDamagesCoverages, function (idx, item) {

                        var AsociativeArraySelfAndThirdsDamage = {}
                        AsociativeArraySelfAndThirdsDamage["CoverageDetailCoreId"] = item.CoverageDetailCoreId;
                        AsociativeArraySelfAndThirdsDamage["Limit"] = item.Limit;
                        AsociativeArraySelfAndThirdsDamage["Name"] = item.Name;

                        arraySelfAndThirdsDamage.push(AsociativeArraySelfAndThirdsDamage);
                    });
                }

                if (vehicle.GlobalDataProductLimits.ThirdPartyCoverages) {
                    $.each(vehicle.GlobalDataProductLimits.ThirdPartyCoverages, function (idx, item) {

                        AsociativeArraySelfAndThirdsDamage = {}
                        AsociativeArraySelfAndThirdsDamage["CoverageDetailCoreId"] = item.CoverageDetailCoreId;
                        AsociativeArraySelfAndThirdsDamage["Limit"] = item.Limit;
                        AsociativeArraySelfAndThirdsDamage["Name"] = item.Name;

                        arraySelfAndThirdsDamage.push(AsociativeArraySelfAndThirdsDamage);
                    });
                }


                if (vehicle.GlobalDataProductLimits.ServicesCoverages) {
                    var allCoverages = new Array();
                    $.each(vehicle.GlobalDataProductLimits.ServicesCoverages, function (idx, item) {
                        $.each(item.Coverages, function (idx, sItem) {

                            var AsociativearrayServiceCoverages = {}
                            AsociativearrayServiceCoverages["CoverageDetailCoreId"] = sItem.CoverageDetailCoreId;
                            AsociativearrayServiceCoverages["Limit"] = sItem.Limit;
                            AsociativearrayServiceCoverages["Name"] = sItem.Name;
                            AsociativearrayServiceCoverages["isSelected"] = sItem.IsSelected;

                            arrayServiceCoverages.push(AsociativearrayServiceCoverages);
                        });
                    });
                }

                var limitSelfThirdJson = JSON.stringify(arraySelfAndThirdsDamage);
                var serviceCoberageJson = JSON.stringify(arrayServiceCoverages);

                var usage = vehicle.UsageId;
                var usageName = "";

                var UsageFound = altFind(vehicle.GlobalDataUsages, function (item) { return item.idUso == usage });

                //var UsageFound = vehicle.GlobalDataUsages.find(function (item) { return item.idUso == usage });

                if (UsageFound) {
                    usageName = UsageFound.descUso;

                    var allowed = UsageFound.allowed;
                    var message = UsageFound.message;
                    //var UsageInvalidMessageShow = self.parent.getLastStep();

                    //No debe generar prima
                    if (allowed == 2) {
                        return;
                    }
                }

                var asyncOrNo = false; //self.parent.changeDate() ? false : true;

                var SecuenciaVehicleSysflex = vehicle.SecuenciaVehicleSysflex;

                var coverageCoreId = isRequoting == false ? getOptionSelectedDropWithClass(".Coverages", randomID) : vehicle.SelectedCoverageCoreId;
                var SelectedCoverageName = isRequoting == false ? getOptionSelectedTextDropWithClass(".Coverages", randomID) : vehicle.SelectedCoverageName;
                var isSemifull = SelectedCoverageName;
                var selectedVehicleType = vehicle.SelectedVehicleTypeId;


                var brand = vehicle.VehicleModel_Make_Id;
                var model = vehicle.VehicleModel_Model_Id;
                var makeName = vehicle.VehicleMakeName;
                var modelName = vehicle.VehicleModelName;

                var year = vehicle.Year;

                var selectedDeductible = isRequoting == false ? getOptionSelectedDropWithClass(".Deducible", randomID) : vehicle.selectedDeductible;
                var store = vehicle.StoreId;
                var storeName = vehicle.StoreName;
                var selectedSurchargePercent = isRequoting == false ? getOptionSelectedDropWithClass(".SurchargePercent", randomID) : vehicle.SurChargePercentage;


                var _insuredAmount = insuredAmount(randomID);

                var IsFacultative = false;
                var AmountFacultative = 0;

                var selectedVehicleTypeId = -1;
                var rateJson = "";
                var porcImpuesto = 0;

                var VehicleYearsOld = vehicle.VehicleYearsOld;
                var VehicleDriver = vehicle.Driver_Id;
                var vehiclePrice = vehicle.VehiclePrice;
                var SelectedProductCore = isRequoting == false ? getOptionSelectedDropWithClass(".ddlAllProducts", randomID) : vehicle.SelectedProductCoreId;
                var SelectedProductName = isRequoting == false ? getOptionSelectedTextDropWithClass(".ddlAllProducts", randomID) : vehicle.SelectedProductName;

                var _isLawProduct = isLawProduct(randomID, isRequoting, coverageCoreId);
                var idCapacidad = getIdCapacidad(randomID, isRequoting, SelectedProductCore);
                var descCapacidad = getDescCapacidad(randomID, isRequoting, SelectedProductCore);


                $.ajax({
                    url: '/Home/GetRates',
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        coverageCoreId: coverageCoreId,
                        productId: selectedVehicleType,
                        brandId: brand,
                        modelId: model,
                        vehicleYear: year,
                        coveragePercent: GlobalpercentageToInsure,
                        startDate: GlobalcurrentStartDateSelected,
                        endDate: GlobalcurrentEndDateSelected,
                        insuredAmount: _insuredAmount,
                        servicesIdLstoreist: servicesIdList.join(),
                        deductibleId: selectedDeductible,
                        gender: clientSex,
                        principalDateOfBirth: principalDateOfBirth,
                        storageId: store,
                        percentSurCharge: selectedSurchargePercent,
                        QuotationNumberForRates: getQuotationNumberForRates,
                        LicenciaExtranjera: getForeingLicenceDriver,
                        qtyVehicles: qtyVehicles,
                        usage: usage,
                        secuencia: SecuenciaVehicleSysflex,
                        agentChangeSelected: NewAgentID,
                        quotationCore: quotationCoreNumber,
                        Esdeley: _isLawProduct,
                        idCapacidad: idCapacidad,
                        descCapacidad: descCapacidad,
                        coverages: serviceCoberageJson,
                        limitself: limitSelfThirdJson,
                        usagename: usageName,
                        isSemifull: isSemifull,
                        QuotationNumber: getQuotationNumber,
                        wasChangeDateBirth: wasChangeDateBirth,
                        wasChangeClientSex: wasChangeClientSex,
                        actualAgentSelected: ActualAgentSelected
                    },
                    async: isRequoting == false ? (LoadVehicle ? false : true) : false,//asyncOrNo,
                    success: function (data) {

                        if (data.messageError) {
                            showError([data.messageError], 'Error obteniendo la prima');
                            return false;
                        }

                        if (vehicle.GlobalDataProductLimits) {

                            if (data.TpPrime != undefined) {

                                vehicle.GlobalDataProductLimits.TpPrime = data.TpPrime;
                                vehicle.GlobalDataProductLimits.SdPrime = data.SdPrime;
                                vehicle.GlobalDataProductLimits.ServicesPrime = data.ServicesPrime;

                                var total = (data.SdPrime + data.TpPrime + data.ServicesPrime) * qtyVehicles;
                                var iscPercentage = parseFloat(GlobalCurrentIsc);
                                vehicle.GlobalDataProductLimits.TotalIsc = (total * (iscPercentage / 100));

                                selectedVehicleTypeId = data.VehicleTypeId;
                                rateJson = data.jsonRates;
                                porcImpuesto = iscPercentage;

                                var totalPrimePlusIsc = (total + vehicle.GlobalDataProductLimits.TotalIsc);
                                var ISC = vehicle.GlobalDataProductLimits.TotalIsc;

                                var $elem = $(".totalPrime");

                                if ($elem.length > 1) {
                                    $.each($elem, function (idx, obj) {
                                        var randomid = $(obj).attr("data-vehiclerandomid");
                                        if (randomid == randomID) {
                                            $elem = $(obj);
                                            $elem.html("$" + number_format(total, 2));
                                        }
                                    });
                                } else {
                                    $elem.html("$" + number_format(total, 2));
                                }

                                var $elem = $(".ISC");

                                if ($elem.length > 1) {
                                    $.each($elem, function (idx, obj) {
                                        var randomid = $(obj).attr("data-vehiclerandomid");
                                        if (randomid == randomID) {
                                            $elem = $(obj);
                                            $elem.html("$" + number_format(ISC, 2));
                                        }
                                    });
                                } else {
                                    $elem.html("$" + number_format(ISC, 2));
                                }

                                var $elem = $(".totalToPay");

                                if ($elem.length > 1) {
                                    $.each($elem, function (idx, obj) {
                                        var randomid = $(obj).attr("data-vehiclerandomid");
                                        if (randomid == randomID) {
                                            $elem = $(obj);
                                            $elem.html("$" + number_format(totalPrimePlusIsc, 2));
                                        }
                                    });
                                } else {
                                    $elem.html("$" + number_format(totalPrimePlusIsc, 2));
                                }

                                $.ajax({
                                    url: '/Home/GetPercentByQtyVehicle',
                                    type: 'POST',
                                    dataType: 'json',
                                    data: { qtyVehicles: realTotalVehiclesForDiscountFlotilla },
                                    async: false,
                                    success: function (data) {
                                        PercentByQtyVehicle = data;

                                        if (data > 0) {
                                            isFlotilla = true;
                                        } else {
                                            isFlotilla = false;
                                        }

                                    }
                                });

                                var subRamo = coverageCoreId;
                                //Solos los que no son de Ley
                                if (!_isLawProduct) {
                                    /*Reaseguro*/
                                    $.ajax({
                                        url: '/Home/getMaximoReaseguroSubRamo_New',
                                        dataType: 'json',
                                        data: { SecuenciaVehicleSysflex: SecuenciaVehicleSysflex, quotationCoreNumber: quotationCoreNumber, make: makeName, model: modelName, year: year },
                                        async: LoadVehicle ? false : true,
                                        success: function (data) {

                                            if (data.IsFacultative) {
                                                IsFacultative = data.IsFacultative;
                                                AmountFacultative = data.AmountFacultative;
                                                showWarning([data.message], 'Advertencia Reaseguro');
                                            } else {
                                                IsFacultative = false;
                                                AmountFacultative = 0;
                                            }
                                        }
                                    });
                                }
                            }

                            var totaPrimelbyVH = getTotalPrime(randomID);

                            vehicle.isLawProduct = _isLawProduct;
                            vehicle.GlobalDataProductLimits = vehicle.GlobalDataProductLimits;
                            vehicle.servicescoverages = arrayServiceCoverages;
                            vehicle.limitSelfThirdsDamages = arraySelfAndThirdsDamage;

                            vehicle.VehicleDescription = makeName + " " + modelName;

                            vehicle.InsuredAmount = _insuredAmount;
                            vehicle.PercentageToInsure = GlobalpercentageToInsure;
                            vehicle.TotalPrime = totaPrimelbyVH;
                            vehicle.TotalIsc = (totaPrimelbyVH * (iscPercentage / 100));
                            vehicle.SelectedProductCoreId = SelectedProductCore;
                            vehicle.SelectedProductName = SelectedProductName;
                            vehicle.UsageId = usage;
                            vehicle.UsageName = usageName;
                            vehicle.Quotation_Id = getQuotationNumberForRates;
                            vehicle.SelectedVehicleTypeId = selectedVehicleTypeId;
                            vehicle.SelectedCoverageCoreId = coverageCoreId;
                            vehicle.SelectedCoverageName = SelectedCoverageName;
                            vehicle.SurChargePercentage = selectedSurchargePercent == "" ? 0 : selectedSurchargePercent;
                            vehicle.RateJson = rateJson;
                            vehicle.SecuenciaVehicleSysflex = SecuenciaVehicleSysflex;
                            vehicle.IsFacultative = IsFacultative
                            vehicle.AmountFacultative = AmountFacultative
                            vehicle.VehicleQuantity = qtyVehicles;
                            vehicle.selectedDeductible = selectedDeductible;

                            vehicle.idCapacidad = idCapacidad;
                            vehicle.descCapacidad = descCapacidad;
                            vehicle.isSemifull = isSemifull;
                            vehicle.actualAgentSelected = ActualAgentSelected;
                            vehicle.porcImpuesto = porcImpuesto;
                            vehicle.principalDateOfBirth = principalDateOfBirth;
                            vehicle.principalSex = clientSex;
                            vehicle.principalrforeignlicense = getForeingLicenceDriver;

                            vehicle.startDate = GlobalcurrentStartDateSelected;
                            vehicle.endDate = GlobalcurrentEndDateSelected;

                            vehicle.PercentByQtyVehicle = PercentByQtyVehicle > 0 ? PercentByQtyVehicle : 0;
                            vehicle.TotalByQtyVehicle = TotalByQtyVehicle();

                            vehicle.iscompletedVehicle = true;

                            var realVehicle = setVehicle(vehicle, randomID);

                            setAllVehicleDataToSave(realVehicle, "UPDATE");
                        }
                    }
                });
            }
        }
    }
}

function getRecargos() {

    $.ajax({
        url: '/Home/GetSurchargePercentage',
        dataType: 'json',
        async: false,
        success: function (data) {
            var $select_elem = $("#SurchargePercent");
            $select_elem.empty();
            $select_elem.append('<option value="">Seleccione</option>');

            $.each(data, function (idx, obj) {
                $select_elem.append("<option value='" + obj.id + "'>" + obj.name + "</option>");
            });
        }
    });
}

function getRecargosForNewVehicles(dropid) {

    $.ajax({
        url: '/Home/GetSurchargePercentage',
        dataType: 'json',
        async: false,
        success: function (data) {
            var $select_elem = $("#" + dropid);
            $select_elem.empty();
            $select_elem.append('<option value="">Seleccione</option>');
            $.each(data, function (idx, obj) {
                $select_elem.append("<option value='" + obj.id + "'>" + obj.name + "</option>");
            });
        }
    });
}

function showRechargeAllLawProducts(selectedCoverage, randomID) {

    var $select_elem = $(".SurchargePercent");
    if ($select_elem.length > 1) {
        $.each($select_elem, function (idx, obj) {
            var randomid = $(obj).attr("data-vehiclerandomid");
            if (randomid == randomID) {
                $select_elem = $(obj);
            }
        });
    }

    if (selectedCoverage) {

        var vehicle = getAllDataVehicleByRandomID(randomID);

        var prod = altFind(vehicle.GlobalDataCoverages, function (item) {
            return item.Id == selectedCoverage;
        });

        //var prod = vehicle.GlobalDataCoverages.find(function (item) {
        //    return item.Id == selectedCoverage;
        //});

        if (prod) {
            var whatis = prod.IsLaw;

            if (whatis == false) {
                //Chequeao que no sea un semifull
                var isSemifull = prod.Name.toLowerCase().indexOf('semi');
                var issemi = (isSemifull != -1);

                if (issemi) {
                    $select_elem.attr('disabled', 'disabled');
                    $select_elem.val("");
                } else {
                    $select_elem.removeAttr('disabled');
                }
                return issemi;
            }
            $select_elem.attr('disabled', 'disabled');
            $select_elem.val("");
        }
    } else {
        $select_elem.removeAttr('disabled');
    }
}

function SetAdditionals(randomID) {
    var selectedCoverage = getOptionSelectedDropWithClass(".Coverages", randomID);

    var vehcicle = getAllDataVehicleByRandomID(randomID);

    if (selectedCoverage > 0) {

        var results = new Array();

        var ServicesCoverages = vehcicle.GlobalDataProductLimits.ServicesCoverages;
        var hasSelectedFromDb = false;

        for (var i = 0; i < ServicesCoverages.length; i++) {

            var sc = ServicesCoverages[i];
            var obj = { id: sc.Name, value: -2 };

            if (GlobalServicesSelected != null/* && GlobalServicesSelected.length > 0*/) {
                //Lo comparo con los servicios que yo tengo como marcados en la db                
                for (var c = 0; c < sc.Coverages.length; c++) {
                    var w = sc.Coverages[c];

                    var dd = altFind(GlobalServicesSelected, function (item) {
                        return (item.CoverageDetailCoreId == w.CoverageDetailCoreId && item.IsSelected);
                    });

                    //var dd = GlobalServicesSelected.find(function (item) {
                    //    return (item.CoverageDetailCoreId == w.CoverageDetailCoreId && item.IsSelected);
                    //});

                    if (dd !== undefined) {
                        obj.value = w.Id;
                    }
                }
                hasSelectedFromDb = true;
            } else {
                var selected = altFind(sc.Coverages, function (cov) { return cov.IsSelected; });

                //var selected = sc.Coverages.find(function (cov) { return cov.IsSelected; });
                if (selected) {
                    obj.value = selected.Id;
                }
            }

            results.push(obj);
        }

        GlobalDataPopupSelectedServices = results;

        vehcicle.GlobalDataPopupSelectedServices = GlobalDataPopupSelectedServices;

        popupCalculateAnnualTotal(vehcicle);

        var realv = setVehicle(vehcicle, randomID);

        setAllVehicleDataToSave(realv, "UPDATE");

        PaintTableServices(vehcicle.GlobalDataPopupSelectedServices, randomID);

        if (hasSelectedFromDb) {
            UpdateAdditionalSelected(randomID);
        }
    }
}

function popupCalculateAnnualTotal(vehcicle) {
    var total = 0;

    $.each(vehcicle.GlobalDataPopupSelectedServices, function (idx, item) {

        var service = altFind(vehcicle.GlobalDataProductLimits.ServicesCoverages, function (sc) { return sc.Name == item.id });

        //var service = vehcicle.GlobalDataProductLimits.ServicesCoverages.find(function (sc) { return sc.Name == item.id });
        if (service) {
            var selectedCoverage = altFind(service.Coverages, function (cov) { return cov.Id == item.value; });

            //var selectedCoverage = service.Coverages.find(function (cov) { return cov.Id == item.value; });
            if (selectedCoverage) {
                total += selectedCoverage.Amount;
            }
        }
    });

    GLobalPopupAnnualTotal = total;
    vehcicle.GLobalPopupAnnualTotal = total;

    $("#txtTotalServicesSelected").val("$" + number_format(vehcicle.GLobalPopupAnnualTotal, 2));
}

function PaintTableServices(selectedservices, randomID) {
    var tblBody = $("#servicesBody");
    tblBody.empty();

    var vehcicle = getAllDataVehicleByRandomID(randomID);

    var ServicesCoverages = vehcicle.GlobalDataProductLimits.ServicesCoverages;

    $.each(ServicesCoverages, function (idx, i) {

        //Cabecera
        var cabecera = i.Name;
        var coverages = i.Coverages;

        var rowHeader = '<tr class="table-primary">' +
            '<td align="left"><button class="cleanService" data-sname="{2}">Limpiar</button></td>' +
            '<td align="center" class="font-weight-bold text-uppercase">{1}</td>' +
            '<td align="center"></td>' +
            '</tr>';

        rowHeader = rowHeader.replace('{1}', cabecera).replace('{2}', cabecera);

        tblBody.append(rowHeader);

        //detalle
        $.each(coverages, function (idx, c) {
            var isChecked = "";

            var selServ = selectedservices.filter(function (item) {
                return item.value == c.Id;
            });


            if (selServ.length > 0) {
                isChecked = "checked='checked'";
            }

            var radio = '<label class="mb-1 mdl-radio mdl-js-radio mdl-js-ripple-effect mdl-cell--6-col" for="IdentificationTypeCedPasaport">' +
                '<input type="radio" id="chk_{5}" class="mdl-radio__button servicesChecked" name="{7}" {4} value="{6}" data-sname="{8}" data-vehiclerandomid="{9}">' +
                '<span class="mdl-radio__label"></span>' +
                '</label>';

            var rowDetail = '<tr>' +
                '<td align="left">' +
                '<span class="mdl-list__item-secondary-action float-left mr-3">' +
                radio +
                '</label>' +
                '</span >' +
                '<span class="mdl-list__item-primary-content">{1}</span>' +
                '</td>' +
                '<td align="center">{2}</td>' +
                '<td align="center">{3}</td>' +
                '</tr>';

            rowDetail = rowDetail.replace('{1}', c.Name).replace('{2}', c.Name).replace('{3}', number_format(c.Amount, 2))
                .replace('{4}', isChecked).replace('{5}', c.Name.replace(' ', '')).replace('{6}', c.Id).replace('{7}', cabecera.replace(' ', ''))
                .replace('{8}', cabecera).replace('{9}', randomID);

            tblBody.append(rowDetail);
        });
    });

    $(".servicesChecked").off("change");
    $(".servicesChecked").change(function () {
        var chk = $(this);
        var vehicle = null;

        if (chk.is(":checked")) {
            var v = chk.val();
            var sname = chk.attr('data-sname');
            var randomid = chk.attr("data-vehiclerandomid");
            vehicle = getAllDataVehicleByRandomID(randomid);


            for (var i in vehicle.GlobalDataPopupSelectedServices) {
                if (vehicle.GlobalDataPopupSelectedServices[i].id == sname) {
                    vehicle.GlobalDataPopupSelectedServices[i].value = v;
                    break;
                }
            }
        } else {
            var v = chk.val();
            var sname = chk.attr('data-sname');
            var randomid = chk.attr("data-vehiclerandomid");
            vehicle = getAllDataVehicleByRandomID(randomid);


            for (var i in vehicle.GlobalDataPopupSelectedServices) {
                if (vehicle.GlobalDataPopupSelectedServices[i].id == sname) {
                    vehicle.GlobalDataPopupSelectedServices[i].value = -2;
                    break;
                }
            }
        }
        popupCalculateAnnualTotal(vehicle);

        var realv = setVehicle(vehicle, randomID);

        setAllVehicleDataToSave(realv, "UPDATE");
    });

    $(".cleanService").click(function () {
        var b = $(this);
        var name = b.attr("data-sname");

        if (name != undefined && name != '') {
            $.each($(".servicesChecked"), function (el) {
                var radio = $(this);
                var radioName = radio.attr("data-sname");

                if (name == radioName) {
                    radio.prop('checked', false);
                    radio.trigger('change');
                }
            });
        }
    });


    $(".saveServices").off("click");
    $(".saveServices").click(function () {
        var $this = $(this);

        var randomID = $this.attr("data-vehiclerandomid");
        UpdateAdditionalSelected(randomID);

        GLobalPopupAnnualTotal = 0;

        $("#addServicios").modal('hide');

        var tblBody = $("#servicesBody");
        tblBody.empty();

        GlobalDataPopupSelectedServices = [];

        getRates(randomID);
    });
}

function getOldAgentSelected() {
    if ($("#oldAgentSelected").val() !== '') {
        var obj = JSON.parse($("#oldAgentSelected").val());
        return obj;
    }
    return null;
}

function getNewAgentSelected() {

    if ($("#AgentList").length > 0) {

        var actualAgent = JSON.parse($("#AgentList").val());
        var oldAgent = getOldAgentSelected();
        if (oldAgent != null && oldAgent.AgentCode != actualAgent.AgentCode) {
            return actualAgent;
        } else {
            return actualAgent;
        }
    }
}

function getCurrentDateTimeMomentFormat() {
    return "DD-MMM-YYYY hh:mm:ss a";
}

function insuredAmount(randomID) {
    var vehicle = getAllDataVehicleByRandomID(randomID);

    var vehiclePrice = vehicle.VehiclePrice;
    if (vehiclePrice && GlobalpercentageToInsure)
        return vehiclePrice * (GlobalpercentageToInsure / 100);
    else
        return 0;
}

function isLawProduct(randomID, isRequoting, coverageCoreId) {

    if (randomID == undefined || randomID == null) {
        return true;
    }

    var selectedCoverage = (isRequoting == false || isRequoting == undefined) ? getOptionSelectedDropWithClass(".Coverages", randomID) : coverageCoreId;
    var vehicle = getAllDataVehicleByRandomID(randomID);

    if (selectedCoverage) {

        var prod = altFind(vehicle.GlobalDataCoverages, function (item) {
            return item.Id == selectedCoverage;
        });

        //var prod = vehicle.GlobalDataCoverages.find(function (item) {
        //    return item.Id == selectedCoverage;
        //});

        if (prod) {
            return prod.IsLaw;
        }
    } else {
        return true;
    }
}

function getIdCapacidad(randomID, isRequoting, SelectedProductCore) {

    var $select_elem = $(".ddlAllProducts");
    var selectedProduct = "";
    var vehicle = null;

    if ((isRequoting == false || isRequoting == undefined)) {

        if ($select_elem.length > 1) {
            $.each($select_elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $select_elem = $(obj);
                    selectedProduct = $select_elem;
                    vehicle = getAllDataVehicleByRandomID(randomid);
                }
            });
        }
        else {
            selectedProduct = $select_elem;
            var randomid = selectedProduct.attr("data-vehiclerandomid");
            vehicle = getAllDataVehicleByRandomID(randomid);
        }

        if (vehicle.GlobalAllProducts && selectedProduct.val()) {

            var pr = altFind(vehicle.GlobalAllProducts, function (p) {
                return p.Id == selectedProduct.val();
            });

            //var pr = vehicle.GlobalAllProducts.find(function (p) {
            //    return p.Id == selectedProduct.val();
            //});

            if (pr != null) {
                return pr.IdCapacidad;
            } else {
                return 0;
            }
        }
        else {
            return 0;
        }
    } else {

        vehicle = getAllDataVehicleByRandomID(randomID);
        selectedProduct = SelectedProductCore;

        if (vehicle.GlobalAllProducts && selectedProduct) {

            var pr = altFind(vehicle.GlobalAllProducts, function (p) {
                return p.Id == selectedProduct;
            });

            //var pr = vehicle.GlobalAllProducts.find(function (p) {
            //    return p.Id == selectedProduct;
            //});

            if (pr != null) {
                return pr.IdCapacidad;
            } else {
                return 0;
            }
        }
        else {
            return 0;
        }
    }
}

function getDescCapacidad(randomID, isRequoting, SelectedProductCore) {

    var $select_elem = $(".ddlAllProducts");
    var selectedProduct = "";
    var vehicle = null;


    if ((isRequoting == false || isRequoting == undefined)) {

        if ($select_elem.length > 1) {
            $.each($select_elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $select_elem = $(obj);
                    selectedProduct = $select_elem;
                    vehicle = getAllDataVehicleByRandomID(randomid);
                }
            });
        }
        else {
            selectedProduct = $select_elem;
            var randomid = selectedProduct.attr("data-vehiclerandomid");
            vehicle = getAllDataVehicleByRandomID(randomid);
        }

        if (vehicle.GlobalAllProducts && selectedProduct.val()) {

            var pr = altFind(vehicle.GlobalAllProducts, function (p) {
                return p.Id == selectedProduct.val()
            });

            //var pr = vehicle.GlobalAllProducts.find(function (p) {
            //    return p.Id == selectedProduct.val()
            //});

            if (pr != null) {
                return pr.DescCapacidad;
            } else {
                return "";
            }
        }
        else {
            return "";
        }
    } else {
        vehicle = getAllDataVehicleByRandomID(randomID);
        selectedProduct = SelectedProductCore;

        if (vehicle.GlobalAllProducts && selectedProduct) {

            var pr = altFind(vehicle.GlobalAllProducts, function (p) {
                return p.Id == selectedProduct;
            });

            //var pr = vehicle.GlobalAllProducts.find(function (p) {
            //    return p.Id == selectedProduct;
            //});

            if (pr != null) {
                return pr.DescCapacidad;
            } else {
                return "";
            }
        }
        else {
            return "";
        }
    }
}

function validateGetRates(randomID) {
    var msgs = [];

    var vehicle = getAllDataVehicleByRandomID(randomID);

    var vehiclePrice = vehicle.VehiclePrice;
    var driver = vehicle.Driver_Id;

    var selectedCoverage = getOptionSelectedDropWithClass(".Coverages", randomID);

    var selectedDeductible = getOptionSelectedDropWithClass(".Deducible", randomID);

    if (vehiclePrice == 0)
        msgs.push('Debe ingresar el Precio del Vehículo para poder obtener su cotización.')

    if (!vehicle.GlobalDataProductLimits)
        msgs.push('Debe seleccionar un Tipo de Producto para poder obtener su cotización.');

    if (driver == 0)
        msgs.push('Debe seleccionar un Conductor para poder obtener su cotización.');

    if (selectedCoverage == 0)
        msgs.push('Debe seleccionar una Cobertura para poder obtener su cotización.');


    if (!vehicle.GlobalDataDeductibleList || (vehicle.GlobalDataDeductibleList.length > 0 && selectedDeductible == 0))
        msgs.push('Debe seleccionar un Deducible para poder obtener su cotización.');


    if (msgs.length > 0) {
        //showError(msgs, "Obtener Cotización");
        return false;
    }
    else
        return true;
}

function GetCurrentIsc() {

    $.ajax({
        url: "/Home/GetCurrentIsc",
        dataType: 'json',
        async: false,
        cache: false,
        data: {},
        success: function (data) {
            GlobalCurrentIsc = data.isc;
        }
    });
}

function getTotalPrime(randomID) {
    var total = 0;
    var vehicle = getAllDataVehicleByRandomID(randomID);

    if (vehicle.GlobalDataProductLimits) {
        total = vehicle.GlobalDataProductLimits.SdPrime + vehicle.GlobalDataProductLimits.TpPrime + vehicle.GlobalDataProductLimits.ServicesPrime;
    }
    return total;
}

function getTotalPrimeOfAllVehicles() {
    var total = 0;

    $.each(AllVehicleDataToSave, function (idx, vehicle) {

        var actualVehicleQty = vehicle.VehicleQuantity;
        var actualVehiculePrime = vehicle.TotalPrime;

        var ToPrimeAddQtyVehi = (actualVehiculePrime * actualVehicleQty);

        total += ToPrimeAddQtyVehi;
    });

    return total;
}

function setAllVehicleDataToSave(objVehicle, action) {

    if (AllVehicleDataToSave != null) {

        if (action == "UPDATE") {

            var current = altFind(AllVehicleDataToSave, function (item) {
                return item.randomId == objVehicle.randomId
            });

            //var current = AllVehicleDataToSave.find(function (item) {
            //    return item.randomId == objVehicle.randomId
            //});

            if (current != undefined) {

                AllVehicleDataToSave = AllVehicleDataToSave.filter(function (item) {
                    return item.randomId != objVehicle.randomId
                });

                AllVehicleDataToSave.push(current);
            }
        } else {
            AllVehicleDataToSave.push(objVehicle);
        }

    } else {
        AllVehicleDataToSave = new Array();
        AllVehicleDataToSave.push(objVehicle);
    }
}

function resetVehicleInfo() {

    $("#VehicleDriver_Id").val("");
    $("#VehicleDriver_Id").trigger("chosen:updated");

    $("#VehicleModel_Make_Id").val("");
    $("#VehicleModel_Make_Id").trigger("chosen:updated");

    $("#VehicleModel_Model_Id").val("");
    $("#VehicleModel_Model_Id").empty();
    $("#VehicleModel_Model_Id").trigger("chosen:updated");

    $("#yearsAvaibles").val("");
    $("#yearsAvaibles").trigger("chosen:updated");

    $("#VehicleType").val("");
    $("#VehicleType").empty();
    $("#VehicleType").trigger("chosen:updated");

    $("#Usages").val("");
    $("#Usages").empty();
    $("#Usages").trigger("chosen:updated");

    $("#StoreCar").val("");
    $("#StoreCar").trigger("chosen:updated");

    $("#vehiclePrice").val("0");
    //$("#vehiclePrice").parent().addClass('is-dirty');

    $("#VehicleYearsOld").val("");
    $("#VehicleYearsOld").parent().removeClass('is-dirty');
}

function setVehicle(obj, randomID) {

    var newVehicle = {};

    var v = getAllDataVehicleByRandomID(randomID);

    if (v != undefined) {
        newVehicle = v;
    }

    newVehicle.randomId = obj.randomId != undefined ? obj.randomId : newVehicle.randomId;
    newVehicle.Id = obj.Id != undefined ? obj.Id : newVehicle.Id;
    newVehicle.isLawProduct = obj.isLawProduct != undefined ? obj.isLawProduct : newVehicle.isLawProduct;

    newVehicle.GlobalDataProductLimits = obj.GlobalDataProductLimits != undefined ? obj.GlobalDataProductLimits : newVehicle.GlobalDataProductLimits;
    newVehicle.GlobalDataUsages = obj.GlobalDataUsages != undefined ? obj.GlobalDataUsages : newVehicle.GlobalDataUsages;
    newVehicle.GlobalData = obj.GlobalData != undefined ? obj.GlobalData : newVehicle.GlobalData;
    newVehicle.GlobalDataDeductibleList = obj.GlobalDataDeductibleList != undefined ? obj.GlobalDataDeductibleList : newVehicle.GlobalDataDeductibleList;
    newVehicle.GlobalDataCoverages = obj.GlobalDataCoverages != undefined ? obj.GlobalDataCoverages : newVehicle.GlobalDataCoverages;
    newVehicle.GlobalDataProductsByUsage = obj.GlobalDataProductsByUsage != undefined ? obj.GlobalDataProductsByUsage : newVehicle.GlobalDataProductsByUsage;
    newVehicle.GlobalAllProducts = obj.GlobalAllProducts != undefined ? obj.GlobalAllProducts : newVehicle.GlobalAllProducts;
    newVehicle.GlobalDataPopupSelectedServices = obj.GlobalDataPopupSelectedServices != undefined ? obj.GlobalDataPopupSelectedServices : newVehicle.GlobalDataPopupSelectedServices;
    newVehicle.GLobalPopupAnnualTotal = obj.GLobalPopupAnnualTotal != undefined ? obj.GLobalPopupAnnualTotal : newVehicle.GLobalPopupAnnualTotal;;

    newVehicle.servicescoverages = obj.servicescoverages != undefined ? obj.servicescoverages : newVehicle.servicescoverages;
    newVehicle.limitSelfThirdsDamages = obj.limitSelfThirdsDamages != undefined ? obj.limitSelfThirdsDamages : newVehicle.limitSelfThirdsDamages;

    newVehicle.VehicleDescription = obj.VehicleDescription != undefined ? obj.VehicleDescription : newVehicle.VehicleDescription;
    newVehicle.Year = obj.Year != undefined ? obj.Year : newVehicle.Year;
    newVehicle.VehiclePrice = obj.VehiclePrice != undefined ? (obj.VehiclePrice == 0 ? 1 : obj.VehiclePrice) : (newVehicle.VehiclePrice == 0 ? 1 : newVehicle.VehiclePrice);
    newVehicle.InsuredAmount = obj.InsuredAmount != undefined ? obj.InsuredAmount : newVehicle.InsuredAmount;
    newVehicle.PercentageToInsure = obj.PercentageToInsure != undefined ? obj.PercentageToInsure : newVehicle.PercentageToInsure;
    newVehicle.TotalPrime = obj.TotalPrime != undefined ? obj.TotalPrime : newVehicle.TotalPrime;
    newVehicle.TotalIsc = obj.TotalIsc != undefined ? obj.TotalIsc : newVehicle.TotalIsc;
    newVehicle.SelectedProductCoreId = obj.SelectedProductCoreId != undefined ? obj.SelectedProductCoreId : newVehicle.SelectedProductCoreId;
    newVehicle.SelectedProductName = obj.SelectedProductName != undefined ? obj.SelectedProductName : newVehicle.SelectedProductName;
    newVehicle.VehicleMakeName = obj.VehicleMakeName != undefined ? obj.VehicleMakeName : newVehicle.VehicleMakeName;
    newVehicle.UsageId = obj.UsageId != undefined ? obj.UsageId : newVehicle.UsageId;
    newVehicle.UsageName = obj.UsageName != undefined ? obj.UsageName : newVehicle.UsageName;
    newVehicle.StoreId = obj.StoreId != undefined ? obj.StoreId : newVehicle.StoreId;
    newVehicle.StoreName = obj.StoreName != undefined ? obj.StoreName : newVehicle.StoreName;
    newVehicle.Driver_Id = obj.Driver_Id != undefined ? obj.Driver_Id : newVehicle.Driver_Id;
    newVehicle.VehicleModel_Make_Id = obj.VehicleModel_Make_Id != undefined ? obj.VehicleModel_Make_Id : newVehicle.VehicleModel_Make_Id;
    newVehicle.VehicleModel_Model_Id = obj.VehicleModel_Model_Id != undefined ? obj.VehicleModel_Model_Id : newVehicle.VehicleModel_Model_Id;
    newVehicle.Quotation_Id = obj.Quotation_Id != undefined ? obj.Quotation_Id : newVehicle.Quotation_Id;
    newVehicle.SelectedVehicleTypeId = obj.SelectedVehicleTypeId != undefined ? obj.SelectedVehicleTypeId : newVehicle.SelectedVehicleTypeId;
    newVehicle.SelectedVehicleTypeName = obj.SelectedVehicleTypeName != undefined ? obj.SelectedVehicleTypeName : newVehicle.SelectedVehicleTypeName;
    newVehicle.SelectedCoverageCoreId = obj.SelectedCoverageCoreId != undefined ? obj.SelectedCoverageCoreId : newVehicle.SelectedCoverageCoreId;
    newVehicle.SelectedCoverageName = obj.SelectedCoverageName != undefined ? obj.SelectedCoverageName : newVehicle.SelectedCoverageName;
    newVehicle.VehicleYearOld = obj.VehicleYearOld != undefined ? obj.VehicleYearOld : newVehicle.VehicleYearOld;
    newVehicle.SurChargePercentage = obj.SurChargePercentage != undefined ? obj.SurChargePercentage : newVehicle.SurChargePercentage;
    newVehicle.RateJson = obj.RateJson != undefined ? obj.RateJson : newVehicle.RateJson;
    newVehicle.SecuenciaVehicleSysflex = obj.SecuenciaVehicleSysflex != undefined ? obj.SecuenciaVehicleSysflex : newVehicle.SecuenciaVehicleSysflex;
    newVehicle.IsFacultative = obj.IsFacultative != undefined ? obj.IsFacultative : newVehicle.IsFacultative;
    newVehicle.AmountFacultative = obj.AmountFacultative != undefined ? obj.AmountFacultative : newVehicle.AmountFacultative;
    newVehicle.VehicleQuantity = obj.VehicleQuantity != undefined ? obj.VehicleQuantity : newVehicle.VehicleQuantity;
    newVehicle.selectedDeductible = obj.selectedDeductible != undefined ? obj.selectedDeductible : newVehicle.selectedDeductible;
    newVehicle.idCapacidad = obj.idCapacidad != undefined ? obj.idCapacidad : newVehicle.idCapacidad;
    newVehicle.descCapacidad = obj.descCapacidad != undefined ? obj.descCapacidad : newVehicle.descCapacidad;
    newVehicle.isSemifull = obj.isSemifull != undefined ? obj.isSemifull : newVehicle.isSemifull;
    newVehicle.actualAgentSelected = obj.actualAgentSelected != undefined ? obj.actualAgentSelected : newVehicle.actualAgentSelected;
    newVehicle.principalDateOfBirth = obj.principalDateOfBirth != undefined ? obj.principalDateOfBirth : newVehicle.principalDateOfBirth;
    newVehicle.principalSex = obj.principalSex != undefined ? obj.principalSex : newVehicle.principalSex;
    newVehicle.principalrforeignlicense = obj.principalrforeignlicense != undefined ? obj.principalrforeignlicense : newVehicle.principalrforeignlicense;

    newVehicle.VehicleModelName = obj.VehicleModelName != undefined ? obj.VehicleModelName : newVehicle.VehicleModelName;

    newVehicle.startDate = obj.startDate != undefined ? obj.startDate : newVehicle.startDate;
    newVehicle.endDate = obj.endDate != undefined ? obj.endDate : newVehicle.endDate;

    newVehicle.PercentByQtyVehicle = obj.PercentByQtyVehicle != undefined ? obj.PercentByQtyVehicle : newVehicle.PercentByQtyVehicle;
    newVehicle.TotalByQtyVehicle = obj.TotalByQtyVehicle != undefined ? obj.TotalByQtyVehicle : newVehicle.TotalByQtyVehicle;

    newVehicle.iscompletedVehicle = obj.iscompletedVehicle != undefined ? obj.iscompletedVehicle : false;


    //Datos del driver
    newVehicle.drivername = $("#FirstName").val();
    newVehicle.driversurname = $("#FirstSurname").val();
    newVehicle.driverdob = $("#DateOfBirth").val();
    newVehicle.driversex = $("#Sex").val();
    newVehicle.driverforeignlicense = $("#ForeignLicense").val();

    var check = $("input[name='IdentificationType']");

    $.each(check, function (i, iden) {
        var objCheck = $(iden);
        if (objCheck.is(":checked")) {
            newVehicle.driveridentificationtype = objCheck.val();
        }
    });

    newVehicle.driveridentificationNumber = $("#IdentificationNumber").val();
    newVehicle.driverphonenumber = $("#PhoneNumber").val();
    newVehicle.driveremail = $("#Email").val();
    //

    newVehicle.agentSelected = $("#AgentList").val();
    newVehicle.quotationCoreNumber = $("#QuotationCoreNumber").val();

    return newVehicle;
}

function paintVehicles(AllVehicleDataToSave) {

    var divVehicles = $("#sectVehicles");
    var dv = $(".parentSectionVehicle");
    var generateNewSection = dv.length == 0;

    if (AllVehicleDataToSave.length > 1 || generateNewSection) {

        var toignoreFirstVehicle = AllVehicleDataToSave[0];//ignoro el primer registro porque es el que viene por default

        var vehicles = AllVehicleDataToSave;

        if (generateNewSection == false) {

            vehicles = AllVehicleDataToSave.filter(function (item) {
                return item.randomId != toignoreFirstVehicle.randomId;
            });
        }

        $.each(vehicles, function (idx, v) {

            if (vehicleRandomID == v.randomId) {

                var vehicledesc = (v.VehicleDescription + " " + v.Year);
                var vRandomID = v.randomId;
                var usageSelected = v.UsageId;
                var selectedVehicleType = v.SelectedVehicleTypeId;
                var vehiclePrice = v.VehiclePrice;
                var qtyVehicle = v.VehicleQuantity;

                //Si el drop original existe entonces el usuario tiene permisos para ver dicho drop
                var surchargeDrop = "";
                var SurchargeId = 'SurchargePercent_' + vRandomID;
                if ($("#SurchargePercent").length > 0) {

                    surchargeDrop = '<li class="mdl-list__item mdl-card__actions mdl-card--border">' +
                        '<strong class="mdl-list__item-primary-content mr-5">' +
                        'Recargo:' +
                        '</strong>' +
                        '<select id="{1}" class="form-control SurchargePercent" data-vehiclerandomid="{2}"></select>' +
                        '</li>';

                    surchargeDrop = surchargeDrop.replace('{1}', SurchargeId).replace('{2}', vRandomID);
                }
                //

                //Cabecera
                var header =
                    '<div class="mdl-card__media">' +
                    '<div class="mdl-card__title">' +
                    '<h2 data-vehiclerandomid="{4}" class="mdl-card__title-text m-auto mdl-color-text--white vehicleTitle">{1}</h2>' +
                    '<button id="btnEditVehicle_{2}" data-vehiclerandomid="{4}" type="button" class="btn float-right ec_btn btn-success btn-sm mr-2 editVehicle"><i class="material-icons">&#xE254;</i></button>' +
                    '<button id="btnDeleteVehicle_{3}" data-vehiclerandomid="{5}" type="button" class="btn float-right ec_btn btn-danger btn-sm deleteVehicle"><i class="material-icons">&#xE5CD;</i></button>' +
                    '</div>' +
                    '</div>';
                header = header.replace("{1}", vehicledesc).replace("{2}", vRandomID).replace("{3}", vRandomID)
                    .replace("{4}", vRandomID).replace("{4}", vRandomID).replace("{5}", vRandomID);



                //detalle
                var detail = '<div class="mdl-card__supporting-text w-100">' +
                    '<!--Icon List -->' +
                    '<ul class="demo-list-icon mdl-list">' +
                    /*'<li class="mdl-list__item text-center"><strong id="vehicleDescription_{2}" data-vehiclerandomid="{11}" class="mdl-list__item-primary-content m-auto text-success vehicleDescription">' +
                    '{1}</strong></li>' +*/
                    '<li class="mdl-list__item mdl-card__actions mdl-card--border">' +
                    '<strong class="mdl-list__item-primary-content">Valor:</strong>' +
                    '<span id="VehicleValue_{3}" data-vehiclerandomid="{12}" class="VehicleValue">{17}</span></li>' +
                    '<li class="mdl-list__item mdl-card__actions mdl-card--border putErrorBorder requerido">' +
                    '<strong class="mdl-list__item-primary-content mr-5">Plan:</strong>' +
                    '<select id="ddlAllProducts_{4}" data-vehiclerandomid="{10}" class="form-control ddlAllProducts"><option value="">Seleccione</option></select>' +
                    '</li>' +
                    '<li class="mdl-list__item mdl-card__actions mdl-card--border putErrorBorder requerido">' +
                    '<strong class="mdl-list__item-primary-content mr-5">Cobertura:</strong>' +
                    '<select id="Coverages_{5}" data-vehiclerandomid="{13}" class="form-control Coverages"><option value="">Seleccione</option></select>' +
                    //'<button id="infoCB" data-toggle="modal" data-target="#ppCobertura" class="mdl-button mdl-js-button mdl-button--icon mdl-button--colored float-right"><i class="material-icons">&#xE88E;</i></button>' +
                    '</li>' +
                    '<li class="mdl-list__item mdl-card__actions mdl-card--border putErrorBorder requerido">' +
                    '<strong class="mdl-list__item-primary-content mr-5">Deducible:</strong><select id="Deducible_{6}" data-vehiclerandomid="{14}" class="form-control Deducible"></select>' +
                    '</li>' +
                    '<li class="mdl-list__item mdl-card__actions mdl-card--border">' +
                    '<strong class="mdl-list__item-primary-content">Servicios:</strong>' +
                    '<span>' +
                    '<button id="servicesPopUp_{20}" disabled="disabled" data-vehiclerandomid="{21}" data-toggle="modal" data-target="#addServicios" class="mdl-button mdl-js-button mdl-button--icon mdl-button--colored bg-success mdl-color-text--white servicesPopUp" ><i class="material-icons">add</i></button>' +
                    '</span>' +
                    '</li>' +
                    surchargeDrop +
                    '<li class="mdl-list__item mdl-card__actions mdl-card--border putErrorBorder">' +
                    '<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label is-upgraded is-dirty" data-upgraded=",MaterialTextfield">' +
                    '<input class="mdl-textfield__input qtyVehicles" type="text" id="qtyVehicles_{9}" data-vehiclerandomid="{16}" value="{19}">' +
                    '<label class="mdl-textfield__label" for="qtyVehicles_{18}">Cantidad de Vehículo</label>' +
                    '</div>' +
                    '</li>' +

                    '<li class="mdl-list__item mdl-card__actions mdl-card--border">' +
                    '<strong class="mdl-list__item-primary-content">' +
                    'Prima Anual:' +
                    '</strong>' +
                    '<span id="totalPrime_{7}" data-vehiclerandomid="{15}" class="totalPrime">$0</span>' +
                    '</li>' +

                    '<li class="mdl-list__item mdl-card__actions mdl-card--border liflotillaDiscount" data-vehiclerandomid="{15}" style="display:none">' +
                    '<strong class="mdl-list__item-primary-content">' +
                    '   Descuento Flotilla:' +
                    '</strong>' +
                    '<span data-vehiclerandomid="{15}" class="flotillaDiscountAmount">$0</span>' +
                    '</li>' +

                    '<li class="mdl-list__item mdl-card__actions mdl-card--border liPrimeFlotillaDiscount" data-vehiclerandomid="{15}" style="display:none">' +
                    '<strong class="mdl-list__item-primary-content">' +
                    'Prima Anual con Descuento:' +
                    '</strong>' +
                    '<span data-vehiclerandomid="{15}" class="PrimeFlotillaDiscountAmount">$0</span>' +
                    '</li>' +

                    '<li class="mdl-list__item mdl-card__actions mdl-card--border">' +
                    '<strong class="mdl-list__item-primary-content">' +
                    'Impuesto:' +
                    '</strong>' +
                    '<span data-vehiclerandomid="{15}" class="ISC">$0</span>' +
                    '</li>' +

                    '<li class="mdl-list__item mdl-card__actions mdl-card--border">' +
                    '<strong class="mdl-list__item-primary-content">' +
                    'Total Pagar:' +
                    '</strong>' +
                    '<span data-vehiclerandomid="{15}" class="totalToPay">$0</span>' +
                    '</li>' +

                    '</ul>' +
                    '</div>';


                //Si aplica a 0 como valor, entonces mostrar 0 en el campo VehicleValue
                var apply = ApplyToZero(vRandomID);
                if (apply && vehiclePrice <= 1) {
                    vehiclePrice = "0";
                } else if (!apply && vehiclePrice <= 1) {
                    vehiclePrice = "0";
                }

                detail = detail.replace("{1}", vehicledesc).replace("{2}", vRandomID)
                    .replace("{3}", vRandomID).replace("{4}", vRandomID)
                    .replace("{5}", vRandomID).replace("{6}", vRandomID)
                    .replace("{7}", vRandomID).replace("{8}", vRandomID)
                    .replace("{9}", vRandomID).replace("{10}", vRandomID)
                    .replace("{11}", vRandomID).replace("{12}", vRandomID)
                    .replace("{13}", vRandomID).replace("{14}", vRandomID)
                    .replace("{15}", vRandomID).replace("{16}", vRandomID)
                    .replace("{17}", "$" + number_format(vehiclePrice, 2)).replace("{18}", vRandomID)
                    .replace("{19}", LoadVehicleQuantity).replace("{20}", vRandomID).replace("{21}", vRandomID)
                    .replace("{15}", vRandomID).replace("{15}", vRandomID).replace("{15}", vRandomID)
                    .replace("{15}", vRandomID).replace("{15}", vRandomID).replace("{15}", vRandomID)
                    ;

                var divFather =
                    '<div class="mdl-cell mdl-card mdl-shadow--4dp portfolio-card mdl-cell--6-col-tablet mdl-cell--12-col-phone parentSectionVehicle" data-vehiclerandomid="{1}">' +
                    header +
                    detail +
                    '</div>';
                divVehicles.append(divFather.replace("{1}", vRandomID));

                getRecargosForNewVehicles(SurchargeId);

                vehicleRandomID = v.randomId;

                ProductListByUsagesForNewVehicles(usageSelected, selectedVehicleType, v.randomId);

                //Asignandole Un change a todos los drops de plan dinamicos
                $(".ddlAllProducts").off("change");
                $(".ddlAllProducts").change(function () {
                    var $this = $(this);
                    var i = $this.attr('id');
                    var selectedProductName = $("#" + i + " option:selected").text();
                    var randomID = $this.attr("data-vehiclerandomid");

                    if (ApplyToZero(randomID) == false && ($this.val() !== "")) {
                        SetFieldsApplyToZero(false, randomID);
                        return false;
                    } else {
                        SetFieldsApplyToZero(true, randomID);
                    }

                    currentCoveragesByUsage(selectedProductName, randomID);

                    var parentDiv = $this.parent();
                    if ($this.val() == "") {
                        if (parentDiv.hasClass('erarequerido')) {
                            parentDiv.addClass('requerido');
                            parentDiv.removeClass('erarequerido');
                        }
                    } else {
                        parentDiv.removeClass('requerido');
                        parentDiv.addClass('erarequerido');
                    }
                });

                $(".qtyVehicles").off("focusout");
                $(".qtyVehicles").focusout(function () {
                    var v = $(this);
                    var randomID = v.attr("data-vehiclerandomid");

                    getRates(randomID);

                    var parentDiv = v.parent().parent();
                    if (v.val() == "") {
                        if (parentDiv.hasClass('erarequerido')) {
                            parentDiv.addClass('requerido');
                            parentDiv.removeClass('erarequerido');
                        } else {
                            parentDiv.addClass('requerido');
                            parentDiv.removeClass('erarequerido');
                        }
                        v.parent().removeClass('is-dirty');

                    } else {
                        parentDiv.removeClass('requerido');
                        parentDiv.addClass('erarequerido');
                        v.parent().addClass('is-dirty');
                    }
                });

                $(".deleteVehicle").off("click");
                $(".deleteVehicle").click(function () {
                    var randomid = $(this).attr("data-vehiclerandomid");
                    removeVehicle(randomid);
                });

                $(".SurchargePercent").off("change");
                $(".SurchargePercent").change(function () {
                    var $this = $(this);
                    var randomID = $this.attr("data-vehiclerandomid");

                    getRates(randomID);
                });

                $(".servicesPopUp").off("click");
                $(".servicesPopUp").click(function () {
                    var $this = $(this);
                    var randomID = $this.attr("data-vehiclerandomid");

                    SetAdditionals(randomID);
                    //$("#addServicios").modal('show');
                    $("#addServicios").modal({ backdrop: 'static', keyboard: false, show: true });
                    $(".saveServices").attr("data-vehiclerandomid", randomID);

                    return false;
                });

                $(".editVehicle").off("click");
                $(".editVehicle").click(function () {
                    var randomid = $(this).attr("data-vehiclerandomid");
                    SetEditVehicle(randomid);
                });
            }
        });
    }
}

function ProductListByUsagesForNewVehicles(usageSelected, selectedVehicleType, randomID) {

    if (usageSelected) {

        var vehicle = getAllDataVehicleByRandomID(randomID);

        var UsageFound = vehicle.GlobalDataUsages.filter(function (item) {
            return item.idUso == usageSelected;
        });

        if (UsageFound.length) {
            var currentUsageFound = UsageFound[0];

            var t = vehicle.GlobalData.filter(function (item) {
                return item.Name == selectedVehicleType;
            });


            var AllProductListByUsages;

            if (t.length > 0) {
                AllProductListByUsages = t[0].ProductByUsages;
                GlobalAllProducts = t[0].Products;
            }

            var FilteredProductList = AllProductListByUsages.filter(function (item) {
                return item.UsoDescripcion.indexOf(currentUsageFound.descUso) != -1;
            });

            if (FilteredProductList.length > 0) {

                var NewCurrentProductList = [];

                $.each(FilteredProductList, function (idx, plist) {

                    var prodsNews = altFind(GlobalAllProducts, function (currProd) {
                        return currProd.Name.indexOf(plist.ProductoDescripcion) != -1
                    });

                    //var prodsNews = GlobalAllProducts.find(function (currProd) {
                    //    return currProd.Name.indexOf(plist.ProductoDescripcion) != -1
                    //});

                    if (prodsNews != undefined) {
                        NewCurrentProductList.push(prodsNews);
                    }
                });

                GlobalDataProductsByUsage = NewCurrentProductList;

                vehicle.GlobalDataProductsByUsage = GlobalDataProductsByUsage;
                vehicle.GlobalAllProducts = GlobalAllProducts;

                var realVehicle = setVehicle(vehicle);

                setAllVehicleDataToSave(realVehicle, "UPDATE");

                var $select_elem = $(".ddlAllProducts");

                if ($select_elem.length > 1) {
                    $.each($select_elem, function (idx, obj) {
                        var randomid = $(obj).attr("data-vehiclerandomid");
                        if (randomid == vehicleRandomID) {
                            $select_elem = $(obj);
                        }
                    });
                }
                $select_elem.empty();
                $select_elem.append('<option value="">Seleccionar</option>');

                $.each(NewCurrentProductList, function (idx, obj) {
                    $select_elem.append("<option value='" + obj.Id + "'>" + obj.Name + "</option>");
                });
            }
        }
    }
    return [];
}

function getAllDataVehicleByRandomID(randomID) {

    if (AllVehicleDataToSave != null) {

        var vehicle = altFind(AllVehicleDataToSave, function (item) {
            return item.randomId == randomID;
        });

        //var vehicle = AllVehicleDataToSave.find(function (item) {
        //    return item.randomId == randomID;
        //});
    }

    return vehicle;
}

function getOptionSelectedDropWithClass(dropClass, randomID) {

    var $select_elem = $(dropClass);

    if ($select_elem.length > 1) {

        $.each($select_elem, function (idx, obj) {

            var randomid = $(obj).attr("data-vehiclerandomid");

            if (randomid == randomID) {
                $select_elem = $(obj);
            }
        });
    }

    return $select_elem.val();
}

function getOptionSelectedTextDropWithClass(dropClass, randomID) {

    var $select_elem = $(dropClass);

    if ($select_elem.length > 1) {

        $.each($select_elem, function (idx, obj) {

            var randomid = $(obj).attr("data-vehiclerandomid");

            if (randomid == randomID) {
                $select_elem = $(obj);
            }
        });
    }

    return $("#" + $select_elem.attr('id') + " option:selected").text();
}

function getOptionsByTextOfDropWithClassAndSelect(dropClass, randomID, theText) {

    var $select_elem = $(dropClass);

    if ($select_elem.length > 1) {

        $.each($select_elem, function (idx, obj) {

            var randomid = $(obj).attr("data-vehiclerandomid");

            if (randomid == randomID) {
                $select_elem = $(obj);
            }
        });
    }

    $("#" + $select_elem.attr('id') + " option").each(function () {
        if ($(this).text() == theText) {
            $(this).attr('selected', 'selected');
        }
    });
    $($select_elem).trigger('change');

}

function qtyVehiclesByVehicle() {

    var totalQtyByVehicle = 0;
    //contando la cantidad de cada Vehículo
    $.each(AllVehicleDataToSave, function (idx, vehicle) {

        var q = $(".qtyVehicles");
        if (q.length > 1) {
            $.each(q, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == vehicle.randomId) {

                    q = $(obj);
                }
            });
        }

        var actualVehicleQty = parseInt(q.val()); //vehicle.VehicleQuantity;

        totalQtyByVehicle += actualVehicleQty;
    });

    return totalQtyByVehicle;
}

function qtyVehiclesByVehicleForRequoting() {

    var totalQtyByVehicle = 0;
    //contando la cantidad de cada Vehículo
    $.each(AllVehicleDataToSave, function (idx, vehicle) {

        var actualVehicleQty = parseInt(vehicle.VehicleQuantity);

        totalQtyByVehicle += actualVehicleQty;
    });

    return totalQtyByVehicle;
}

function removeVehicle(randomID) {

    var current = altFind(AllVehicleDataToSave, function (item) {
        return item.randomId == randomID
    });

    //var current = AllVehicleDataToSave.find(function (item) {
    //    return item.randomId == randomID
    //});

    if (current != undefined) {
        AllVehicleDataToSave = AllVehicleDataToSave.filter(function (item) {
            return item.randomId != randomID
        });
    }

    var qtyVehicles = qtyVehiclesByVehicle();
    $.ajax({
        url: '/Home/GetPercentByQtyVehicle',
        type: 'POST',
        dataType: 'json',
        data: { qtyVehicles: qtyVehicles },
        async: true,
        success: function (data) {
            PercentByQtyVehicle = data;

            if (data > 0) {
                isFlotilla = true;
            } else {
                isFlotilla = false;
            }
        }
    });

    var quotationCoreNumber = getQuotationCoreNumber();
    var vehicleID = current.Id;


    if (current.SecuenciaVehicleSysflex > 0) {
        $.ajax({
            url: '/Home/DeleteVehicleOnSysflex',
            type: 'POST',
            dataType: 'json',
            data: { SecuenciaVehicleSysflex: current.SecuenciaVehicleSysflex, quotationCoreNumber: quotationCoreNumber, vehicleID: vehicleID },
            async: false,
            success: function (data) {
                if (data == "ERROR") {
                    showError(['A ocurrido un error Eliminando el Vehículo'], 'Eliminando Vehículo');
                }
            }
        });
    }

    //remuevo el Vehículo de la seccion de Vehículos
    var dv = $(".parentSectionVehicle");
    if (dv.length > 1) {
        $.each(dv, function (idx, obj) {
            var randomid = $(obj).attr("data-vehiclerandomid");
            if (randomid == randomID) {
                dv = $(obj);
            }
        });
    }
    dv.remove();
}

function getQuotationCoreNumber() {
    return $("#QuotationCoreNumber").val();
}

function SetEditVehicle(randomID) {
    var vehicle = getAllDataVehicleByRandomID(randomID);
    if (vehicle != undefined) {

        isEditingVehicle = true;
        vehicleRandomID = vehicle.randomId;
        wasLoadVehicle = false;

        //trayendo driver
        $("#VehicleDriver_Id").val(vehicle.Driver_Id);
        $("#VehicleDriver_Id").trigger("chosen:updated");
        removeErrorBorderClass($("#VehicleDriver_Id"), true);

        $("#lastModelSelected").val(vehicle.VehicleModel_Model_Id);

        //Cascade
        $("#VehicleModel_Make_Id").val(vehicle.VehicleModel_Make_Id);
        $("#VehicleModel_Make_Id").trigger("chosen:updated");
        $("#VehicleModel_Make_Id").trigger("change");
        $("#lastMakeSelected").val(vehicle.VehicleModel_Make_Id);

        $("#VehicleModel_Model_Id").val(vehicle.VehicleModel_Model_Id);
        $("#VehicleModel_Model_Id").trigger("chosen:updated");
        removeErrorBorderClass($("#VehicleModel_Model_Id"), true);

        $("#yearsAvaibles").val(vehicle.Year);
        $("#yearsAvaibles").trigger("chosen:updated");
        $("#yearsAvaibles").trigger("change");

        $("#VehicleType").val(vehicle.SelectedVehicleTypeName);
        $("#VehicleType").trigger("chosen:updated");
        $("#VehicleType").trigger("change");

        $("#Usages").val(vehicle.UsageId);
        $("#Usages").trigger("chosen:updated");
        $("#Usages").trigger("change");
        //

        $("#VehicleYearsOld").val(vehicle.VehicleYearOld);
        $("#VehicleYearsOld").parent().addClass('is-dirty');
        removeErrorBorderClass($("#VehicleYearsOld"), true);
        $("#VehicleYearsOld").trigger("change");

        $("#vehiclePrice").val(vehicle.VehiclePrice);
        removeErrorBorderClass($("#vehiclePrice"));

        $("#StoreCar").val(vehicle.StoreId);
        $("#StoreCar").trigger("chosen:updated");
        removeErrorBorderClass($("#StoreCar"), true);

        //$('#headVH').find('a').trigger('click');
        $('#headCober').find('a').trigger('click');
        $('#headCober').addClass('disabledAccordionTab');
        $("#AddVehicle").html('<i class="material-icons">add</i> Editar Vehículo');

        vehicle.iscompletedVehicle = false;
        var realVehicle = setVehicle(vehicle, randomID);
        setAllVehicleDataToSave(realVehicle, "UPDATE");

        var apply = ApplyToZero(realVehicle.randomId);
        if (!apply) {
            $("#vehiclePrice").val("0");
        }

    } else {
        $('#headCober').removeClass('disabledAccordionTab');
        $("#AddVehicle").html('<i class="material-icons">add</i> Agregar Vehículo');
    }

}

function updateHtmlValueFromVehicle(randomID) {

    var vh = getAllDataVehicleByRandomID(randomID);

    var desc = vh.VehicleDescription + " " + vh.Year;
    var p = vh.VehiclePrice;

    var $elem = $(".vehicleTitle");
    if ($elem.length > 1) {
        $.each($elem, function (idx, obj) {
            var randomid = $(obj).attr("data-vehiclerandomid");

            if (randomid == randomID) {
                $elem = $(obj);
            }
        });
    }
    $elem.html(desc);

    var $elem = $(".VehicleValue");
    if ($elem.length > 1) {
        $.each($elem, function (idx, obj) {
            var randomid = $(obj).attr("data-vehiclerandomid");

            if (randomid == randomID) {
                $elem = $(obj);
            }
        });
    }
    $elem.html("$" + number_format(p, 2));

    if (isEditingVehicle) {

        var $elem = $(".totalPrime");

        if ($elem.length > 1) {
            $.each($elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $elem = $(obj);
                    $elem.html("$" + number_format("0", 2));
                }
            });
        } else {
            $elem.html("$" + number_format("0", 2));
        }

        $elem = $(".ISC");

        if ($elem.length > 1) {
            $.each($elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $elem = $(obj);
                    $elem.html("$" + number_format("0", 2));
                }
            });
        } else {
            $elem.html("$" + number_format("0", 2));
        }

        $elem = $(".totalToPay");

        if ($elem.length > 1) {
            $.each($elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $elem = $(obj);
                    $elem.html("$" + number_format("0", 2));
                }
            });
        } else {
            $elem.html("$" + number_format("0", 2));
        }
    }
}

function UpdateVehiclesByAgentChange() {

    if (getOldAgentSelected()) {

        var agentActual = getNewAgentSelected();
        var oldAgent = getOldAgentSelected();

        if (agentActual != null && oldAgent.AgentCode != agentActual.AgentCode) {

            CallRequoting();

            /*if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
                $.each(AllVehicleDataToSave, function (idx, vehicle) {
                    getRates(vehicle.randomId, true);
                });
            }
            */

            var NewAgent = $("#AgentList").val();
            $("#oldAgentSelected").val(NewAgent);
        }
    }
}

function someDataClientWasChanged() {

    if (changedDateBirth) {
        return true;
    } else if (changedSex) {
        return true;
    } else if (changedForeingLicenceDriver) {
        return true;
    } else { return false; }
}

function CallRequoting() {

    if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {

        $.each(AllVehicleDataToSave, function (idx, vehicle) {

            var realVehicle = setVehicle(vehicle, vehicle.randomId);

            setAllVehicleDataToSave(realVehicle, "UPDATE");

            getRates(realVehicle.randomId, true);
        });

        changedDateBirth = false;
        changedSex = false;
        changedForeingLicenceDriver = false;

        SaveDataVehicle(true);

        $('#headCober').find('a').trigger('click');
    }
}

function SaveDataVehicle(requoting) {

    if ($("#hdnInvalidUsage").val() == "S") {
        showError(['No puede continuar porque tiene seleccionado un Uso Principal invalido.'], 'Uso Principal');
        return false;
    }

    if ($("#hdnChangedSomethingClient").val() == "S") {
        showError(['No puede continuar porque tiene que guardar los cambios realizados al Conductor Principal.'], 'Conductor Principal');
        return false;
    }
    if (isEditingVehicle) {
        showError(['No puede continuar porque tiene que guardar los cambios realizados al Vehículo.'], 'Cambios Vehículo');
        return false;
    }

    if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
        var incompleted = false;

        $.each(AllVehicleDataToSave, function (i, v) {

            if (v.iscompletedVehicle == false) {
                incompleted = true;
            }
        });

        if (incompleted) {
            showError(['Para poder continuar debe completar todos los datos del/los Vehículo(s).'], 'Completar Vehículo(s)');
            return false;
        }

        var objVehicle = JSON.stringify(AllVehicleDataToSave);
        var pass = false;
        $.ajax({
            url: "/Home/SaveDataVehicle",
            type: "POST",
            data: { jsondata: objVehicle, requoting: requoting },
            async: false,
            success: function (data, textStatus, jqXHR) {
                if (data.messageError) {
                    showError([data.messageError], 'Error guardando la Cotización');
                    pass = false;
                } else {

                    var datav = JSON.parse(data.VehicleDataMatch);
                    $.each(datav, function (i, item) {

                        var newVehicle = getAllDataVehicleByRandomID(item.randomId);
                        if (newVehicle != null || newVehicle != undefined) {

                            newVehicle.Id = item.vehicleID;

                            var realVehicle = setVehicle(newVehicle);
                            setAllVehicleDataToSave(realVehicle, "UPDATE");
                        }
                    });

                    pass = true;
                }
            },
            error: function (data, textStatus, jqXHR) {
                if (data.messageError) {
                    showError([data.messageError]);
                } else {
                    var textError = data + " " + textStatus + " " + jqXHR;
                    showError([textError]);
                }
            }
        });
    } else {
        showError(['Para poder continuar debe agregar al menos 1 Vehículo.'], 'Debe agregar un Vehículo');
        pass = false;
    }

    return pass;
}

function SaveBasicClientData() {

    if ($("#frmClientInfoBasic").valid() == false) {
        return false;
    }

    var newJson = {};

    newJson.FirstName = $("#FirstName").val();
    newJson.FirstSurname = $("#FirstSurname").val();
    newJson.DateOfBirth = $("#DateOfBirth").val();
    newJson.Sex = $("#Sex").val();
    newJson.ForeignLicense = $("#ForeignLicense").val();

    var check = $("input[name='IdentificationType']");

    $.each(check, function (i, iden) {
        var objCheck = $(iden);
        if (objCheck.is(":checked")) {
            newJson.IdentificationType = objCheck.val();
        }
    });

    newJson.IdentificationNumber = $("#IdentificationNumber").val();
    newJson.PhoneNumber = $("#PhoneNumber").val();
    newJson.Email = $("#Email").val();

    newJson.agentSelected = $("#AgentList").val();
    newJson.driver = $("#driver").val() == "" ? 0 : $("#driver").val();

    newJson.StartDate = GlobalcurrentStartDateSelected;
    newJson.EndDate = GlobalcurrentEndDateSelected;

    newJson.quotationID = $("#quotationID").val() == '' ? 0 : $("#quotationID").val();

    var objDriver = JSON.stringify(newJson);

    $.ajax({
        url: "/Home/SaveClientInfoBasic",
        type: "POST",
        data: { jsondata: objDriver },
        cache: false,
        success: function (data, textStatus, jqXHR) {

            //para redireccionar a una pagina y/o error
            if (data.isRedirect) {
                window.location.href = data.redirectUrl;
            }

            if (data.MessageSucess) {
                showSucess([data.MessageSucess]);
            }

            if (data.messageError) {
                showError([data.messageError]);
                return false;
            }

            if (data.showNextSection) {

                if ($('#headVH').hasClass('disabledAccordionTab')) {
                    disableAccordionsSections(false);
                }

                $('#headVH').find('a').trigger('click');
            }

            if (someDataClientWasChanged()) {

                CallRequoting();

                //$('#headCober').find('a').trigger('click');
                $('#selecCober').addClass("collapse show");

                return false;
            }

            var QuotationId = data.quotationIdEncript;
            window.history.pushState({ order: 1 }, document.title, '/Home/Index/' + data.quotationIdEncript);
            loadQuotation(QuotationId);
        },
        error: function (data, textStatus, jqXHR) {
            if (data.messageError) {
                showError([data.messageError]);
            } else {
                var textError = data + " " + textStatus + " " + jqXHR;
                showError([textError]);
            }
        }
    });

    return false;
}

function TotalByQtyVehicle() {

    if (PercentByQtyVehicle > 0) {

        var totalPrime = getTotalPrimeOfAllVehicles();
        var _percentByQtyVehicle = PercentByQtyVehicle;

        var result = totalPrime * (_percentByQtyVehicle / 100);

        return result;
    }
    return 0;
}

function getCountriesByBl() {

    $.ajax({
        url: "/Home/getCountyBL",
        type: "POST",
        data: { countryID: 0 },
        cache: false,
        success: function (data, textStatus, jqXHR) {
            var countries = data;
            var bl = "";
            var defaultCountry = 129;//RD           

            var $select_elem = $("#ddlCountry");
            $select_elem.empty();
            //$select_elem.append('<option value=""></option>');
            $.each(countries, function (idx, obj) {

                if (defaultCountry == obj.countryID) {
                    $select_elem.append("<option value='" + obj.countryID + "' selected='selected'>" + obj.countryName + "</option>");
                } else {
                    $select_elem.append("<option value='" + obj.countryID + "'>" + obj.countryName + "</option>");
                }
            });
            $select_elem.trigger("chosen:updated");
            $select_elem.trigger("change");

        },
        error: function (data, textStatus, jqXHR) {
            if (data.messageError) {
                showError([data.messageError]);
            } else {
                var textError = data + " " + textStatus + " " + jqXHR;
                showError([textError]);
            }
        }
    });
}

function getBlByCountry() {

    $("#ddlCountry").change(function () {
        var cid = $(this);

        if (cid.val() !== '') {

            $.ajax({
                url: "/Home/getCountyBL",
                type: "POST",
                data: { countryID: cid.val() },
                cache: false,
                success: function (data, textStatus, jqXHR) {
                    var countries = data;

                    var $select_elem = $("#ddlbussinessline");
                    $select_elem.empty();

                    $.each(countries, function (idx, obj) {
                        var bl = obj._BussinesLines;
                        $.each(bl, function (idx, objBL) {
                            $select_elem.append("<option value='" + objBL.blID + "'>" + objBL.blName + "</option>");
                        });
                    });
                    $select_elem.trigger("chosen:updated");
                    $select_elem.trigger("change");

                },
                error: function (data, textStatus, jqXHR) {
                    if (data.messageError) {
                        showError([data.messageError]);
                    } else {
                        var textError = data + " " + textStatus + " " + jqXHR;
                        showError([textError]);
                    }
                }
            });

        } else {
            var $select_elem = $("#ddlbussinessline");
            $select_elem.empty();
        }
    });
}

function redirectByBl() {

    $("#ddlbussinessline").change(function () {
        var cid = $(this);

        if (cid.val() !== '') {

            $.ajax({
                url: "/Home/redirectToApp",
                type: "POST",
                data: { blName: $("#ddlbussinessline option:selected").text() },
                cache: false,
                success: function (data, textStatus, jqXHR) {

                    if (data.pathredirect != "") {
                        //Le notifico al cliente que perdera la informacion
                        showQuestion("En caso de que no haya guardado los datos que se han editado o capturado van a perderse.    Esta seguro que desea abandonar la pagina?", "Cambiar de Aplicacion",
                            function () {

                                location.href = data.pathredirect;
                                return false;
                            },
                            function () {
                                return false;
                            });
                    }

                },
                error: function (data, textStatus, jqXHR) {
                    if (data.messageError) {
                        showError([data.messageError]);
                    } else {
                        var textError = data + " " + textStatus + " " + jqXHR;
                        showError([textError]);
                    }
                }
            });

        }
    });
}

function getMarbete() {

    var qid = parseInt($('#quotationID').val());

    $.ajax({
        url: "/Home/GetMarbete",
        type: "POST",
        data: { quotationId: qid },
        cache: false,
        success: function (data, textStatus, jqXHR) {
            if (data.error == undefined || data.error == '') {
                window.open(data.reportName, '_blank');
            } else {
                showError([data.error], 'Error obteniendo su marbete');
                return false;
            }
        },
        error: function (data, textStatus, jqXHR) {
            if (data.error) {
                showError([data.error], 'Error obteniendo su marbete');
            } else {
                var textError = data.error + " " + textStatus + " " + jqXHR;
                showError([textError], 'Error obteniendo su marbete');
            }

            return false;
        }
    });

}

function remove0kmIfIsNotNew(randomID) {

    var vehicle = getAllDataVehicleByRandomID(randomID);

    if (vehicle != null && vehicle.VehicleYearOld) {

        if (vehicle.GlobalDataProductsByUsage.length > 0) {

            var prods = altFind(vehicle.GlobalDataProductsByUsage, function (item) { return item.Name.indexOf('0 KM') != -1 });

            //var prods = vehicle.GlobalDataProductsByUsage.find(function (item) { return item.Name.indexOf('0 KM') != -1 });

            if (prods) {

                var exit = false;

                if (vehicle.VehicleYearOld == "Usado") {

                    var $select_elem = $('.ddlAllProducts');

                    if ($select_elem.length > 1) {

                        $.each($select_elem, function (idx, obj) {

                            var randomid = $(obj).attr("data-vehiclerandomid");

                            if (randomid == randomID) {
                                $select_elem = $(obj);
                            }
                        });
                    }

                    var ddlProdID = $select_elem.attr('id');

                    $("#" + ddlProdID + " option").each(function () {
                        var t = this;

                        if (t.text.indexOf('0 KM') != -1) {
                            var index = t.index;
                            document.getElementById(ddlProdID).options[index].disabled = true;
                            exit = true;
                        }

                        if (exit) {
                            return false;
                        }
                    });
                }
                else {

                    var $select_elem = $('.ddlAllProducts');

                    if ($select_elem.length > 1) {

                        $.each($select_elem, function (idx, obj) {

                            var randomid = $(obj).attr("data-vehiclerandomid");

                            if (randomid == randomID) {
                                $select_elem = $(obj);
                            }
                        });
                    }

                    var ddlProdID = $select_elem.attr('id');

                    $("#" + ddlProdID + " option").each(function () {
                        var t = this;

                        if (t.text.indexOf('0 KM') != -1) {
                            var index = t.index;
                            document.getElementById(ddlProdID).options[index].disabled = false;
                            exit = true;
                        }

                        if (exit) {
                            return false;
                        }
                    });
                }

            } else {

                var $select_elem = $('.ddlAllProducts');

                if ($select_elem.length > 1) {

                    $.each($select_elem, function (idx, obj) {

                        var randomid = $(obj).attr("data-vehiclerandomid");

                        if (randomid == randomID) {
                            $select_elem = $(obj);
                        }
                    });
                }

                var ddlProdID = $select_elem.attr('id');

                $("#" + ddlProdID + " option").each(function () {
                    var t = this;

                    if (t.text.indexOf('0 KM') != -1) {
                        var index = t.index;
                        document.getElementById(ddlProdID).options[index].disabled = false;
                        exit = true;
                    }

                    if (exit) {
                        return false;
                    }
                });
            }
        }
    }
}

function fillDdlActions() {

    var d = [];
    d.push({ id: '1', name: 'Nueva Cotización' });
    d.push({ id: '2', name: 'Historico Cotizaciónes' });
    d.push({ id: '3', name: 'Inclusión' });

    var $select_elem = $("#filtroHistorico");
    $select_elem.empty();
    var first = true;

    $.each(d, function (idx, item) {

        var sel = "";
        if (first) {

            sel = "selected='selected'";

            first = false;
        }

        $select_elem.append("<option value='" + item.id + "' " + sel + ">" + item.name + "</option>");
    });
    $select_elem.trigger("chosen:updated");
}

function disableAccordionsSections(disabled) {
    if (disabled) {
        $("#headVH").addClass('disabledAccordionTab');
        //$("#headCober").addClass('disabledAccordionTab');
        $("#hdnChangedSomethingClient").val("S");
    } else {
        $("#headVH").removeClass('disabledAccordionTab');
        //$("#headCober").removeClass('disabledAccordionTab');
        $("#hdnChangedSomethingClient").val("N");
    }
}

function resetDateOfBirth(reset) {
    if (reset) {

        $(".dateOfBirth.datepicker").val("N/A");
        $(".dateOfBirth.datepicker").parent().addClass("is-dirty");
        $(".dateOfBirth.datepicker").datepicker("destroy");
        $(".dateOfBirth.datepicker").parent().removeClass("requerido");
        $(".dateOfBirth.datepicker").parent().addClass("erarequerido");

    } else {
        //Edad maxima para poder asegurar un Vehículo (86 anos)
        var currDate = moment(new Date());
        var minDate = currDate.add(18 * -1, 'years');
        //
        if ($(".dateOfBirth.datepicker").val() === "N/A") {
            $(".dateOfBirth.datepicker").datepicker("destroy");
            $(".dateOfBirth.datepicker").val("");
            $(".dateOfBirth.datepicker").parent().removeClass("is-dirty");
        }

        $('.dateOfBirth.datepicker').datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "-80:+0",
            maxDate: new Date(minDate),
            onSelect: function (dateText) {
                var $parent = $(this).parent();
                $parent.addClass("is-dirty");
                $parent.removeClass('requerido');
                $parent.removeClass('erarequerido');
                $parent.addClass('erarequerido');

                if (AllVehicleDataToSave != null && AllVehicleDataToSave.length > 0) {
                    changedDateBirth = true;
                    disableAccordionsSections(true);
                }
                /*else {
                    $("#headVH").removeClass('disabledAccordionTab');
                    $("#headCober").removeClass('disabledAccordionTab');
                    $("#hdnChangedSomethingClient").val("N");
                }*/
            }
        });

        $(".dateOfBirth.datepicker").focusout();
    }
}

function UpdateAdditionalSelected(randomID) {

    var veh = getAllDataVehicleByRandomID(randomID);

    var ServicesCoverages = veh.GlobalDataProductLimits.ServicesCoverages;

    $.each(veh.GlobalDataPopupSelectedServices, function (idx, item) {

        var service = altFind(ServicesCoverages, function (sc) { return sc.Name == item.id });

        //var service = ServicesCoverages.find(function (sc) { return sc.Name == item.id });

        $.each(service.Coverages, function (idx, cov) { cov.IsSelected = (cov.Id == item.value); });

    });
}

function ApplyToZero(randomID) {

    if (randomID == null || randomID == 0) {
        return true;
    }

    var vehiclePrice = 0;

    var vh = getAllDataVehicleByRandomID(randomID);
    if (vh !== null) {
        vehiclePrice = vh.VehiclePrice;
    }

    var $select_elem = $('.ddlAllProducts');

    if ($select_elem.length > 1) {

        $.each($select_elem, function (idx, obj) {

            var randomid = $(obj).attr("data-vehiclerandomid");

            if (randomid == randomID) {
                $select_elem = $(obj);
            }
        });
    }

    var plan = $("#" + $select_elem.attr("id") + " option:selected").text();

    if (plan !== "" && (plan.toLowerCase().indexOf('ley') != -1 || plan.toLowerCase().indexOf('ultra') != -1)) {
        return true;
    }
    else if (parseFloat(vehiclePrice) > 1) {
        return true;
    }
    return false;
}

function SetFieldsApplyToZero(obj, randomID) {

    var vehiclePrice = $("#vehiclePrice");

    if (obj == true) {
        $("#lnkContinue").show();

    } else {
        showWarning(['El Valor del vehículo debe ser mayor a 0 para este plan.', 'Favor Editar el vehículo y ponerle el Valor correcto.'], "Valor vehículo incorrecto");

        $("#lnkContinue").hide();

        vehiclePrice.removeClass("erarequerido");
        vehiclePrice.addClass("requerido");
        //putErrorBorder addAgain erarequerido;

        var $select_elem = $('.Coverages');
        if ($select_elem.length > 1) {

            $.each($select_elem, function (idx, obj) {
                var randomid = $(obj).attr("data-vehiclerandomid");
                if (randomid == randomID) {
                    $select_elem = $(obj);
                }
            });
        }
        $select_elem.empty();
        $select_elem.append('<option value="">Seleccionar</option>');
        $select_elem.trigger("chosen:updated");
    }
}

function getMainOptions() {
    $.ajax({
        url: "/Home/getMainOptions",
        dataType: "json",
        data: {},
        success: function (result) {
            var $select_elem = $("#filtroHistorico");
            $select_elem.empty();
            //$select_elem.append('<option value="">Nueva Cotización</option>');

            $.each(result, function (idx, obj) {
                $select_elem.append('<option value="' + obj.Value + '">' + obj.name + '</option>');
            });
            $select_elem.val('1');
            $select_elem.trigger("chosen:updated");
        },
        error: function (response) {
            showError([response.responseText], "Error buscando opciones de navegación");
        }
    });
}

//esto es por si hay que traducir el mensaje de notificacion de la seguridad(lo ideal seria hacer el arreglo en la dll)
function setTextNotification() {
    /*if ($("div.loading2").length > 0) {
            $("div.loading2").remove();
        }*/

    if ($("#container").hasClass("ui-notify")) {

        //Espanol
        $("#STFBtnSessionYes").val("Si");
        $("#STFBtnSessionNo").val("No");
        var $ptag = $("#container").find('p');
        var $htag = $("#container").find('h1');

        var ptext = "";

        if ($htag.length > 0) {
            $htag.html("Advertencia");
        }

        if ($ptag.length > 0) {
            var k = $ptag.html();
            k = k.replace("Your session will expire in ", "Su sesión expirará en <span id='STFSessionCountDown' class='style colorDefinition size_sm'>00:43</span>");
            k = k.replace(" min, do you want to extend the session?", "minuto(s), ¿desea extender la sesión?");
            $ptag.html(k);
        }
    }
    //
}

//Sobrescribiendo la funcion de la dll de seguridad que permite que la sesion siga abierta si el cliente le da a si
btnSTFNotificationYes = function () {

    STFValidateSessionOver();

    clearTimeout(redirectToWelcomePageTimer);
    clearTimeout(sessionWarningTimer);

    SetSessionTimeOuts();

    /*Quitando el BackGround*/
    $(".loading2").remove();
    /**/
};