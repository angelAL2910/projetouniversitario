using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using STL.POS.Frontend.Web.NewVersion.CustomCode;
using Newtonsoft.Json;
using System.Globalization;
using System.Text;

namespace STL.POS.Frontend.Web.NewVersion.Controllers
{
    public partial class HomeController : BaseController
    {
        public ActionResult InfoAddDriver()
        {
            ViewBag.TitlePage = "INFORMACIÓN ADICIONAL CONDUCTORES";
            ViewBag.QuoId = QuotationId;
            QuotationViewModel quotation = GetDataQuotation(ViewBag.QuoId);
            ViewBag.CountryList = getCountries();
            ViewBag.JobList = getJobs();
            ViewBag.SocialReasonList = getSocialReasonList();

            ViewBag.idetificationTypes = getIdentificationTypes();
            ViewBag.InvoceTypeList = getInvoiceTypes();
            ViewBag.OwnerShipStructureList = getOwnerShipStructure();
            ViewBag.CreditCardTypes = getCreditCardTypes();
            ViewBag.YearList = getYearList();
            var principal = quotation._drivers.FirstOrDefault(x => x.IsPrincipal);

            ViewBag.IdentificationFinalBeneficiaryOptionsList = getIdentificationFinalBeneficiaryOptionsList(principal.IdentificationType == "RNC" ? true : false);

            ViewBag.PepFormularyOptionsList = getPepFormularyOptionsList(principal.PepFormularyOptionsId.GetValueOrDefault());

            if (quotation != null)
            {
                ViewBag.DriverList =  new SelectList(quotation._drivers.ToList().Select(i => new SelectListItem { Text = string.Concat(i.FirstName, " ", i.FirstSurname), Value = i.Id.ToString() }), "Value", "Text");
                ViewBag.QuotationNumber = quotation.QuotationNumber;
            }

            return
                View(principal);
        }


        #region Get
        private SelectList getCountries()
        {
            var countries = oDropDownManager.GetDropDown(CommonEnums.DropDownType.COUNTRY.ToString());

            return new SelectList(countries.ToList().Select(i => new SelectListItem { Text = i.name, Value = i.Value }), "Value", "Text");
        }

        private SelectList getJobs()
        {
            var countries = oDropDownManager.GetDropDown(CommonEnums.DropDownType.JOBS.ToString());

            return new SelectList(countries.ToList().Select(i => new SelectListItem { Text = i.name, Value = i.name }), "Value", "Text");
        }

        private SelectList getSocialReasonList()
        {
            var countries = oDropDownManager.GetDropDown(CommonEnums.DropDownType.SOCIALREASON.ToString());

            return new SelectList(countries.ToList().Select(i => new SelectListItem { Text = i.name, Value = i.Value }), "Value", "Text");
        }

        private SelectList getIdentificationFinalBeneficiaryOptionsList(bool IsCompany)
        {
            var countries = oDropDownManager.GetIdentificationFinalBeneficaryOptions(IsCompany);

            return new SelectList(countries.ToList().Select(i => new SelectListItem { Text = i.Name, Value = i.Id.ToString() }), "Value", "Text");
        }

        private SelectList getIdentificationTypes()
        {
            var param = oDropDownManager.GetParameter("PARAMETER_KEY_IDENTIFICATION_TYPE").Value;

            Dictionary<string, string> values = JsonConvert.DeserializeObject<Dictionary<string, string>>(param);
            var output = from pair in values
                         select new { id = pair.Value, name = pair.Value };

            return new SelectList(output.ToList().Select(i => new SelectListItem { Text = i.name, Value = i.name }), "Value", "Text");
        }

        private SelectList getInvoiceTypes()
        {
            var param = oDropDownManager.GetParameter("PARAMETER_KEY_TYPE_INVOICE").Value;

            Dictionary<int, string> values = JsonConvert.DeserializeObject<Dictionary<int, string>>(param);

            var output = from pair in values
                         select new { id = pair.Key, name = pair.Value };

            return new SelectList(output.ToList().Select(i => new SelectListItem { Text = i.name, Value = i.id.ToString() }), "Value", "Text");
        }


        public ActionResult GetTypesInvoice()
        {
            var param = oDropDownManager.GetParameter("PARAMETER_KEY_TYPE_INVOICE").Value;

            Dictionary<int, string> values = JsonConvert.DeserializeObject<Dictionary<int, string>>(param);

            var output = from pair in values
                         select new { id = pair.Key, name = pair.Value };

            return Json(output, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetProvinces(int countryID)
        {
            var provinces = oDropDownManager.GetProvices(countryID);

            return Json(provinces.ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetMunicipalities(int countryID, int provinceID)
        {
            var municipalities = oDropDownManager.GetMunicipalities(countryID, provinceID);

            return Json(municipalities.ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetSectors(int countryID, string municipalityID)
        {

            var keys = !string.IsNullOrEmpty(municipalityID) ? (municipalityID).Split('-') : new object[] { };

            var stprovId = Convert.ToInt32(keys[1]);
            var municipalityId = Convert.ToInt32(keys[2]);

            var cities = oDropDownManager.GetCities(countryID, stprovId, municipalityId);

            return Json(cities.ToList(), JsonRequestBehavior.AllowGet);
        }

        private SelectList getOwnerShipStructure()
        {
            var param = oDropDownManager.GetDropDown(CommonEnums.DropDownType.OWNERSHIPSTRUCTURE.ToString());

            return new SelectList(param.ToList().Select(i => new SelectListItem { Text = i.name, Value = i.Value }), "Value", "Text");
        }

        private SelectList getPepFormularyOptionsList(int SelectedValue)
        {
            var param = oDropDownManager.GetPepFormularyOptions();
            return new SelectList(param.ToList().Select(i => new SelectListItem { Text = i.Name, Value = i.Id.ToString(), Selected = i.Id.ToString() == SelectedValue.ToString() ? true : false }), "Value", "Text");
        }

        public ActionResult GetDriver(int driverID)
        {
            var driver = oDriverManager.GetDriver(driverID);
            driver.BirthDay = driver.DateOfBirth.ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture).ToLower();
            driver.IdentificationValidDate = driver.IdentificationNumberValidDate.GetValueOrDefault().ToString("dd-MMM-yyyy", CultureInfo.InvariantCulture).ToLower();

            return Json(driver, JsonRequestBehavior.AllowGet);
        }

        private SelectList getYearList()
        {
            int anioActual = DateTime.Now.Year;
            int paramTop = 0;
            List<Entity.Entities.Generic> ListYear = new List<Entity.Entities.Generic>();
            Entity.Entities.Generic result;
            paramTop = anioActual + oDropDownManager.GetParameter("PARAMETER_KEY_TOP_LIST_YEAR").Value.ToInt();

            for (int i = anioActual; i <= paramTop; i++)
            {
                result = new Entity.Entities.Generic();
                result.Value = i.ToString();
                result.name = i.ToString();
                ListYear.Add(result);
            }

            return new SelectList(ListYear.Select(i => new SelectListItem { Text = i.name, Value = i.Value }), "Value", "Text");
        }

        private SelectList getCreditCardTypes()
        {
            var param = oDropDownManager.GetDropDown(CommonEnums.DropDownType.CRIDITCARTYPES.ToString());

            return new SelectList(param.ToList().Select(i => new SelectListItem { Text = i.name, Value = i.Value }), "Value", "Text");
        }

        public ActionResult GetRelationShip()
        {
            var Param = oDropDownManager.GetDropDown(CommonEnums.DropDownType.RELATIONSHIP.ToString());

            return Json(Param.ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult getPepsFormularyByDriver(int driverID)
        {

            var peps = oDriverManager.GetPepsFormularyByDriver(driverID);

            return Json(peps.ToList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult getBeneficiariesByDriver(int driverID)
        {

            var beneficiaries = oDriverManager.GetDriverBeneficiaries(driverID);

            return Json(beneficiaries.ToList(), JsonRequestBehavior.AllowGet);
        }
        public ActionResult ShowPepExplication()
        {
            var Param = oDropDownManager.GetParameter("PARAMETER_KEY_PEP_EXPLICACION").Value;

            StringBuilder text = new StringBuilder();
            text.AppendFormat("{0}", Param);
            //text.AppendFormat("<p>{0}</p>", Param);
            //text.AppendFormat("<p>Definición de Opciones:</p>");
            //text.AppendFormat("<p>Si, Designado: {0}</p>", des);
            //text.AppendFormat("<p>Si, Vinculado: {0}</p>", vin);

            return Json(text.ToString(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult ShowBenefExplication()
        {
            var Param = oDropDownManager.GetParameter("PARAMETER_KEY_BENEFICIARY_FINAL_EXPLICACION").Value;

            StringBuilder text = new StringBuilder();
            text.AppendFormat("{0}", Param);
            //text.AppendFormat("<p>{0}</p>", Param);
            //text.AppendFormat("<p>Definición de Opciones:</p>");
            //text.AppendFormat("<p>Si, Designado: {0}</p>", des);
            //text.AppendFormat("<p>Si, Vinculado: {0}</p>", vin);

            return Json(text.ToString(), JsonRequestBehavior.AllowGet);
        }
        
        public ActionResult GetQuotationData()
        {
            var quotation = getDataQuotation(QuotationId);

            return Json(quotation, JsonRequestBehavior.AllowGet);
        }
        public bool HasPEP(int driverID)
        {
            var pep = oDriverManager.GetPepsFormularyByDriver(driverID);
            return (pep.ToList().Count > 0);
        }
        public bool HasBenef(int driverID)
        {
            var benef = oDriverManager.GetDriverBeneficiaries(driverID);
            return (benef.ToList().Count > 0);
        }

        public ActionResult DocumentValidator(string Number, string DocumentType, string noQuot)
        {           
            var result = true;
            result = ValidateDocument(Number, DocumentType, noQuot);
         
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public bool ValidateDocument(string Number, string DocumentType, string noQuot)
        {
            var result = true;
            //valido si el QuotationNumber que se envió desde el Hidden field no esta vacio para entonces tomarlo desde la db con el quotationID que tenemos en la sesion
            if (string.IsNullOrEmpty(noQuot))
            {
                var quotation = getQuotationData(QuotationId);
                if (quotation != null)
                {
                    noQuot = quotation.QuotationNumber;
                }
            }

            

            if (!string.IsNullOrEmpty(noQuot))
            {
                var r = oQuotationManager.getQuotationToNotValidate(noQuot);
                if (r)
                {
                    result = true;
                }

                Number = Number.Replace("-", "");
                var documentType = (Entity.Entities.DocumentValidator.DocumentType)Enum.Parse(typeof(Entity.Entities.DocumentValidator.DocumentType), DocumentType);

                var oDocumentValidator = new Entity.Entities.DocumentValidator();

                switch (documentType)
                {
                    case Entity.Entities.DocumentValidator.DocumentType.Cedula:
                    case Entity.Entities.DocumentValidator.DocumentType.Licencia:
                        result = oDocumentValidator.IsValidModulo10(Number);
                        break;
                    case Entity.Entities.DocumentValidator.DocumentType.Rnc:
                        result = oDocumentValidator.IsValidModulo11(Number);
                        break;
                }
            }
            return result;
        }
        public ActionResult getBeneficiaryPercents()
        {   
            Entity.Entities.Generic result = new Entity.Entities.Generic();
            var param = oDropDownManager.GetParameter("PARAMETER_KEY_BENEFICIARY_PERCENTS").Value;
            string[] separators = { "|" };
            var Key = param.Split(separators, StringSplitOptions.RemoveEmptyEntries).ToArray();
            result.Value = Key[0];
            result.name = Key[1];

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Set

        public ActionResult SetAditionalInformationDriver(QuotationViewModel.drivers drivers)
        {
            Entity.Entities.Generic result = new Entity.Entities.Generic();
            try
            {

                string[] separators = { "-" };
                var cityKey = drivers.strCityID.Split(separators, StringSplitOptions.RemoveEmptyEntries).ToArray();
                int muncicipalty = 0;
                int cityID = 0;
                int domesticregID = 0;
                string action = "";
                if (cityKey != null)
                {
                    domesticregID = cityKey[0].ToInt();
                    muncicipalty = cityKey[2].ToInt();
                    cityID = cityKey[3].ToInt();
                }

                

                if (drivers.Id <= 0)
                {
                    throw new Exception("El id del conductor no fue seleccionado correctamente");
                }

                if (string.IsNullOrEmpty(drivers.IdentificationType))
                {
                    throw new Exception("Debe seleccionar el Tipo de Identificación");
                }
                else if (string.IsNullOrEmpty(drivers.IdentificationNumber))
                {
                    throw new Exception("Debe indicar el Número de Identificación");
                }
                else
                {
                    var docType = "";
                    if (drivers.IdentificationType != "Pasaporte")
                    {
                        if (drivers.IdentificationType == "Cédula")
                        {
                            docType = "Cedula";
                            var deleted = oDriverManager.DeleteBeneficiariesByDriver(drivers.Id);
                        }
                        else if (drivers.IdentificationType == "RNC")
                        {
                            docType = "Rnc";
                            var deleted = oDriverManager.DeletePepsByDriver(drivers.Id);
                        }

                        var IsValid =  ValidateDocument(drivers.IdentificationNumber, docType, string.Empty);
                        if (!IsValid)
                        {
                            throw new Exception("El Número de Identificación '" + drivers.IdentificationNumber + "' no es valido, por favor verifique.");
                        }
                    }
                }

                //pregunto si posee calidad pep para validar que hayan insertado los registros correspondientes
                if (drivers.PepFormularyOptionsId != null && drivers.PepFormularyOptionsId != CommonEnums.PepFormularyOptions.No.ToInt())
                {
                    if (!HasPEP(drivers.Id))
                    {
                        throw new Exception("Debe indicar las personas que están políticamente Expuestas");
                    }
                }

                //pregunto si posee calidad pep para validar que hayan insertado los registros correspondientes
                if (drivers.IdentificationFinalBeneficiaryOptionsId != null && drivers.IdentificationFinalBeneficiaryOptionsId != CommonEnums.FinalBeneficiaryOptions.No.ToInt())
                {
                    if (!HasBenef(drivers.Id))
                    {
                        throw new Exception("Debe indicar los beneficiarios Finales");
                    }
                }

                var parameter = new QuotationViewModel.drivers.PersonParameters
                {
                    id = drivers.Id,
                    firstName = drivers.FirstName,
                    secondName = drivers.SecondName,
                    firstSurname = drivers.FirstSurname,
                    secondSurname = drivers.SecondSurname,
                    dateOfBirth =  drivers.IdentificationType != "RNC"? drivers.DateOfBirth: new DateTime(1753, 01, 01),
                    address = drivers.Address,
                    phoneNumber = drivers.PhoneNumber,
                    mobile = drivers.Mobile,
                    workPhone = drivers.WorkPhone,
                    maritalStatus = drivers.MaritalStatus,
                    job = drivers.Job,
                    company = drivers.Company,
                    yearsInCompany = drivers.YearsInCompany,
                    sex = drivers.Sex,
                    country_Id = null,
                    domesticreg_Id = domesticregID,
                    state_Prov_Id = drivers.City_State_Prov_Id,
                    city_Id = cityID,
                    nationalityGlobalCountry_Id = drivers.Nationality_Global_Country_Id,
                    email = drivers.Email,
                    identificationType = drivers.IdentificationType,
                    identificationNumber = drivers.IdentificationNumber,
                    identificationNumberValidDate = drivers.IdentificationNumberValidDate,
                    invoiceTypeId = drivers.InvoiceTypeId,
                    userId = GetCurrentUserID(),
                    postalCode = drivers.PostalCode,
                    annualIncome = drivers.AnnualIncome,
                    socialReasonId = drivers.SocialReasonId,
                    ownershipStructureId = drivers.OwnershipStructureId,
                    identificationFinalBeneficiaryOptionsId = drivers.IdentificationFinalBeneficiaryOptionsId,
                    pepFormularyOptionsId = drivers.PepFormularyOptionsId,
                    isPrincipal = drivers.IsPrincipal,
                    home_Owner = drivers.Home_Owner.GetValueOrDefault(),
                    linked = drivers.Linked,
                    segment = drivers.Segment,
                    qtyPersonsDepend = drivers.QtyPersonsDepend.GetValueOrDefault() > 0 ? drivers.QtyPersonsDepend.GetValueOrDefault() : 0,
                    qtyEmployees = drivers.QtyEmployees.GetValueOrDefault() > 0 ? drivers.QtyEmployees.GetValueOrDefault() : 0
                };


                var oresult = oPersonManagerManager.SetPerson(parameter);
                result.Value = "success";
                result.name = "success";
            }
            catch (Exception ex)
            {
                result.Value = "Error";
                result.name = ex.Message;
            }
            return Json(new { result }, JsonRequestBehavior.AllowGet);

        }

        public ActionResult SetDomiciliationQuotation(QuotationViewModel thisQuotation)
        {
            string strCreditCardNumber = string.Empty;
            string Credit_Card_Number_Key = "";
            int longitudMask = 0;
            int capturedLeght = 0;
            string MaskValidation = "";
            Entity.Entities.Generic result = new Entity.Entities.Generic();
            try
            {
                var quotation = oQuotationManager.GetQuotation(thisQuotation.Id);
                string Mask = oDropDownManager.GetParameter("PARAMETER_KEY_CREDIT_CARD_MASK").Value; //leo desde la base de datos el key completo de la tarjeta para reemplazar los * necesarios

                if (quotation.Financed.GetValueOrDefault())
                {
                    #region Validaciones de la domiciliación
                    if (thisQuotation.Credit_Card_Type_Id.GetValueOrDefault() <= 0)
                    {
                        throw new Exception("El tipo de tarjeta de crédito no fue seleccionado correctamente");
                    }

                    if (string.IsNullOrEmpty(thisQuotation.Credit_Card_Number.Replace("-", "")))
                    {
                        throw new Exception("El número de tarjeta de crédito no fue capturado");
                    }

                    if (thisQuotation.Expiration_Date_Year.GetValueOrDefault() <= 0)
                    {
                        throw new Exception("El año de expiración de la tarjeta de crédito no fue capturado");
                    }
                    if (thisQuotation.Expiration_Date_Month.GetValueOrDefault() <= 0)
                    {
                        throw new Exception("El mes de expiración de la tarjeta de crédito no fue capturado");
                    }

                    if (string.IsNullOrEmpty(thisQuotation.Card_Holder))
                    {
                        throw new Exception("El Tarjetahabiente de la tarjeta de crédito no fue capturado");
                    }

                    if (thisQuotation.Credit_Card_Type_Id.GetValueOrDefault() == CommonEnums.CreditCardType.AmericanExpress.ToInt())
                    {
                        MaskValidation = oDropDownManager.GetParameter("PARAMETER_KEY_CREDIT_CARD_AMERICAN_EXPRESS_MASK").Value.Replace("-", string.Empty);
                    }
                    else if (thisQuotation.Credit_Card_Type_Id.GetValueOrDefault() == CommonEnums.CreditCardType.Visa.ToInt())
                    {
                        MaskValidation = oDropDownManager.GetParameter("PARAMETER_KEY_CREDIT_CARD_VISA_MASK").Value.Replace("-", string.Empty);
                    }
                    else if (thisQuotation.Credit_Card_Type_Id.GetValueOrDefault() == CommonEnums.CreditCardType.MasterCard.ToInt())
                    {
                        MaskValidation = oDropDownManager.GetParameter("PARAMETER_KEY_CREDIT_CARD_MASTER_CARD_MASK").Value.Replace("-", string.Empty);
                    }

                    //valido que se haya encontrado la mascara de las tarjetas de creditos contempladas
                    if (string.IsNullOrEmpty(MaskValidation))
                    {
                        throw new Exception("No se encontró el parámetro de la tarjeta de crédito seleccionado; consulte al administrador del sistema");
                    }

                    capturedLeght = thisQuotation.Credit_Card_Number.Replace("-", "").Replace("_", "").Length;

                    if (capturedLeght != MaskValidation.Length)
                    {
                        throw new Exception("El número de tarjeta suministrado es incorrecto, favor verificar");
                    }
                    #endregion
                }

                

                quotation.Credit_Card_Type_Id = thisQuotation.Credit_Card_Type_Id;
                quotation.Card_Holder = thisQuotation.Card_Holder;

                if (!string.IsNullOrEmpty(thisQuotation.Credit_Card_Number))
                {
                    if (!thisQuotation.Credit_Card_Number.Contains("*"))
                    {
                        Credit_Card_Number_Key = thisQuotation.Credit_Card_Number.Replace("-", "");
                        longitudMask = Credit_Card_Number_Key.Length - 4;
                        strCreditCardNumber = Utility.Encrypt_Query(Credit_Card_Number_Key);
                        quotation.Credit_Card_Number_Key = string.Concat(Mask.Substring(0, longitudMask), Credit_Card_Number_Key.Substring(longitudMask, Credit_Card_Number_Key.Length - longitudMask));
                    }
                    else
                        strCreditCardNumber = quotation.Credit_Card_Number;
                }
                else
                {
                    strCreditCardNumber = string.Empty;
                }
                quotation.Credit_Card_Number = strCreditCardNumber;


                var parameter = new QuotationViewModel.parameter
                {
                    id = quotation.Id,
                    productNumber = quotation.ProductNumber,
                    quotationDailyNumber = quotation.QuotationDailyNumber,
                    quotationNumber = quotation.QuotationNumber,
                    policyNumber = quotation.PolicyNumber,
                    startDate = quotation.StartDate,
                    endDate = quotation.EndDate,
                    paymentFrequencyId = quotation.PaymentFrequencyId,
                    paymentFrequency = quotation.PaymentFrequency,
                    paymentWay = quotation.PaymentWay,
                    amountToPayEnteredByUser = quotation.AmountToPayEnteredByUser,
                    cardnetLastResponseCode = quotation.CardnetLastResponseCode,
                    cardnetLastResponseMessage = quotation.CardnetLastResponseMessage,
                    cardnetAuthorizationCode = quotation.CardnetAuthorizationCode,
                    cardnetPaymentStatus = quotation.CardnetPaymentStatus,
                    totalPrime = quotation.TotalPrime,
                    totalISC = quotation.TotalISC,
                    iSCPercentage = quotation.ISCPercentage,
                    totalDiscount = quotation.TotalDiscount,
                    discountPercentage = quotation.DiscountPercentage,
                    quotationCoreIdNumber = quotation.QuotationCoreIdNumber,
                    clientCoreIdNumber = quotation.ClientCoreIdNumber,
                    sendInspectionOnly = quotation.SendInspectionOnly,
                    status = quotation.Status,
                    termType_Id = quotation.TermType_Id,
                    user_Id = quotation.User_Id,
                    achName = quotation.AchName,
                    achAccountHolderGovId = quotation.AchAccountHolderGovId,
                    achBankRoutingNumber = quotation.AchBankRoutingNumber,
                    achType = quotation.AchType,
                    achNumber = quotation.AchNumber,
                    principalFullName = quotation.PrincipalFullName,
                    businessLine_Id = quotation.BusinessLine_Id,
                    quotationProduct = quotation.QuotationProduct,
                    principalIdentificationNumber = quotation.PrincipalIdentificationNumber,
                    lastStepVisited = quotation.LastStepVisited,
                    currencySymbol = quotation.CurrencySymbol,
                    currency_Id = quotation.Currency_Id,
                    messaging = quotation.Messaging,
                    declined = quotation.Declined,
                    flotillaDiscountPercent = quotation.FlotillaDiscountPercent,
                    totalFlotillaDiscount = quotation.TotalFlotillaDiscount,
                    quotationCoreNumber = quotation.QuotationCoreNumber,
                    qtyDayOfVigency = quotation.QtyDayOfVigency,
                    monthlyPayment = quotation.MonthlyPayment,
                    financed = quotation.Financed,
                    period = quotation.Period,
                    credit_Card_Type_Id = quotation.Credit_Card_Type_Id,
                    credit_Card_Number_Key = quotation.Credit_Card_Number_Key,
                    credit_Card_Number = quotation.Credit_Card_Number,
                    expiration_Date_Year = quotation.Expiration_Date_Year,
                    expiration_Date_Month = quotation.Expiration_Date_Month,
                    card_Holder = quotation.Card_Holder,
                    domiciliation = quotation.Domiciliation,
                    modi_UserId = GetCurrentUserID()
                };

                var oresult = oQuotationManager.SetQuotation(parameter);
                Credit_Card_Number_Key = quotation.Credit_Card_Number_Key;
                quotation = null;

                result.Value = "success";
                result.name = "success";

            }
            catch (Exception ex)
            {
                result.Value = "Error";
                result.name = ex.Message;

                Credit_Card_Number_Key = "";
            }
            
            return Json(new {result, Credit_Card_Number = Credit_Card_Number_Key }, JsonRequestBehavior.AllowGet);

        }

        public ActionResult SetPepsFormularyDriver(string pep)
        {
            Entity.Entities.Generic result = new Entity.Entities.Generic();

            var param = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Entity.Entities.PepFormulary>>(pep);

            if (param.Count > 0)
            {
                if (param.FirstOrDefault().PersonsID.ToInt() <= 0)
                    return Json(new { result }, JsonRequestBehavior.AllowGet);

                if (string.IsNullOrEmpty(param.FirstOrDefault().name))
                    return Json(new { result }, JsonRequestBehavior.AllowGet);

                if (string.IsNullOrEmpty(param.FirstOrDefault().Position))
                    return Json(new { result }, JsonRequestBehavior.AllowGet);


                var Deleted = oDriverManager.DeletePepsByDriver(param.FirstOrDefault().PersonsID.ToInt());

                try
                {
                    foreach (var item in param)
                    {
                        var parameter = new Entity.Entities.PepFormulary.Parameter
                        {
                            personsID = item.PersonsID,
                            name = item.name,
                            position = item.Position,
                            fromYear = item.FromYear,
                            toYear = item.ToYear,
                            relationshipId = item.RelationshipId,
                            userId = GetCurrentUserID()
                        };
                        var ExecutionResult = oDriverManager.SetPepByDriver(parameter);
                    }
                    result.Value = "success";
                    result.name = "success";
                }
                catch (Exception ex)
                {
                    result.Value = "Error";
                    result.name = ex.Message;
                }
            }

            return Json(new { result }, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SetDriverBeneficiaries(string beneficiaries)
        {
            
            Entity.Entities.Generic result = new Entity.Entities.Generic();
            if (string.IsNullOrEmpty(beneficiaries)) {
                return Json(new { result }, JsonRequestBehavior.AllowGet);
            };
            var param = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Entity.Entities.IdentificationFinalBeneficiary>>(beneficiaries);

            if (param.Count > 0)
            {
                var Deleted = oDriverManager.DeleteBeneficiariesByDriver(param.FirstOrDefault().personsID.ToInt());

                try
                {
                    foreach (var item in param)
                    {
                        if (item.personsID.ToInt() <= 0)
                        {
                            result.Value = "Error";
                            result.name = "El id del conductor no fue seleccionado correctamente";
                            return Json(new { result }, JsonRequestBehavior.AllowGet);
                        }

                        if (string.IsNullOrEmpty(item.name))
                        {
                            result.Value = "Error";
                            result.name = "El nombre del beneficiario no fue seleccionado correctamente";
                            return Json(new { result }, JsonRequestBehavior.AllowGet);
                        }

                        if (item.percentageParticipation == null)
                        {
                            result.Value = "Error";
                            result.name = "Debe indicar el porcentaje de participación";
                            return Json(new { result }, JsonRequestBehavior.AllowGet);
                        }

                        var parameter = new Entity.Entities.IdentificationFinalBeneficiary.Parameter
                        {
                            personsID = item.personsID,
                            name = item.name,
                            percentageParticipation = item.percentageParticipation,
                            userId = GetCurrentUserID()
                        };
                        var ExecutionResult = oDriverManager.SetBeneficiariesByDriver(parameter);
                    }
                    result.Value = "success";
                    result.name = "success";
                }
                catch (Exception ex)
                {
                    result.Value = "Error";
                    result.name = ex.Message;
                }
            }

            return Json(new { result }, JsonRequestBehavior.AllowGet);
        }

        #endregion
    }
}