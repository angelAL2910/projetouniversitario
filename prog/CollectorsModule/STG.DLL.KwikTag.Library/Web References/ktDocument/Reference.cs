//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace STG.DLL.KwikTag.Library.ktDocument {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DocumentSoap", Namespace="http://kwiktag.com/webservices/")]
    public partial class Document : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback IndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveVersionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchSystemFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveMergedVersionImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchBySystemFieldDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCustomFieldsWithReturnFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveEncryptedImageParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveDocumentImageUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateImageExternalRetrievalUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchKGSOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteVersionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Document() {
            this.Url = global::STG.DLL.KwikTag.Library.Properties.Settings.Default.STG_DLL_KwikTag_Library_ktDocument_Document;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ArchiveCompletedEventHandler ArchiveCompleted;
        
        /// <remarks/>
        public event IndexCompletedEventHandler IndexCompleted;
        
        /// <remarks/>
        public event RetrieveVersionListCompletedEventHandler RetrieveVersionListCompleted;
        
        /// <remarks/>
        public event SearchSystemFieldsCompletedEventHandler SearchSystemFieldsCompleted;
        
        /// <remarks/>
        public event RetrieveAllFieldsCompletedEventHandler RetrieveAllFieldsCompleted;
        
        /// <remarks/>
        public event RetrieveMergedVersionImageCompletedEventHandler RetrieveMergedVersionImageCompleted;
        
        /// <remarks/>
        public event RetrieveImageCompletedEventHandler RetrieveImageCompleted;
        
        /// <remarks/>
        public event SearchBySystemFieldDateRangeCompletedEventHandler SearchBySystemFieldDateRangeCompleted;
        
        /// <remarks/>
        public event SearchDateRangeCompletedEventHandler SearchDateRangeCompleted;
        
        /// <remarks/>
        public event SearchCustomFieldsWithReturnFieldCompletedEventHandler SearchCustomFieldsWithReturnFieldCompleted;
        
        /// <remarks/>
        public event SearchCompletedEventHandler SearchCompleted;
        
        /// <remarks/>
        public event RetrieveEncryptedImageParametersCompletedEventHandler RetrieveEncryptedImageParametersCompleted;
        
        /// <remarks/>
        public event RetrieveDocumentImageUrlCompletedEventHandler RetrieveDocumentImageUrlCompleted;
        
        /// <remarks/>
        public event UpdateImageExternalRetrievalUrlCompletedEventHandler UpdateImageExternalRetrievalUrlCompleted;
        
        /// <remarks/>
        public event SearchKGSCompletedEventHandler SearchKGSCompleted;
        
        /// <remarks/>
        public event DeleteVersionCompletedEventHandler DeleteVersionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/Archive", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Archive(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, bool AlwaysArchive) {
            object[] results = this.Invoke("Archive", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode,
                        AlwaysArchive});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ArchiveAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, bool AlwaysArchive) {
            this.ArchiveAsync(CompanyID, UserName, Password, DrawerName, Barcode, AlwaysArchive, null);
        }
        
        /// <remarks/>
        public void ArchiveAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, bool AlwaysArchive, object userState) {
            if ((this.ArchiveOperationCompleted == null)) {
                this.ArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveOperationCompleted);
            }
            this.InvokeAsync("Archive", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode,
                        AlwaysArchive}, this.ArchiveOperationCompleted, userState);
        }
        
        private void OnArchiveOperationCompleted(object arg) {
            if ((this.ArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveCompleted(this, new ArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/Index", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Index(
                    string CompanyID, 
                    string UserName, 
                    string Password, 
                    string DrawerName, 
                    string Barcode, 
                    string RetrievalTagsXML, 
                    int ExpectedPageCount, 
                    string VeritagEmailAddressList, 
                    string VeritagFromEmailAddress, 
                    string NotifyDate, 
                    int GMTOffset, 
                    string NotifySubject, 
                    string NotifyBody, 
                    bool AttachLink, 
                    bool AttachImage, 
                    string NotifyEmailAddressList, 
                    string NotifyEmailCCList, 
                    string NotifyFromEmailAddress, 
                    bool AddToExisting, 
                    bool OverwriteExisting, 
                    string ImageFileType, 
                    bool AutoRotate, 
                    int RotateDegrees, 
                    bool Deskew) {
            object[] results = this.Invoke("Index", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode,
                        RetrievalTagsXML,
                        ExpectedPageCount,
                        VeritagEmailAddressList,
                        VeritagFromEmailAddress,
                        NotifyDate,
                        GMTOffset,
                        NotifySubject,
                        NotifyBody,
                        AttachLink,
                        AttachImage,
                        NotifyEmailAddressList,
                        NotifyEmailCCList,
                        NotifyFromEmailAddress,
                        AddToExisting,
                        OverwriteExisting,
                        ImageFileType,
                        AutoRotate,
                        RotateDegrees,
                        Deskew});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IndexAsync(
                    string CompanyID, 
                    string UserName, 
                    string Password, 
                    string DrawerName, 
                    string Barcode, 
                    string RetrievalTagsXML, 
                    int ExpectedPageCount, 
                    string VeritagEmailAddressList, 
                    string VeritagFromEmailAddress, 
                    string NotifyDate, 
                    int GMTOffset, 
                    string NotifySubject, 
                    string NotifyBody, 
                    bool AttachLink, 
                    bool AttachImage, 
                    string NotifyEmailAddressList, 
                    string NotifyEmailCCList, 
                    string NotifyFromEmailAddress, 
                    bool AddToExisting, 
                    bool OverwriteExisting, 
                    string ImageFileType, 
                    bool AutoRotate, 
                    int RotateDegrees, 
                    bool Deskew) {
            this.IndexAsync(CompanyID, UserName, Password, DrawerName, Barcode, RetrievalTagsXML, ExpectedPageCount, VeritagEmailAddressList, VeritagFromEmailAddress, NotifyDate, GMTOffset, NotifySubject, NotifyBody, AttachLink, AttachImage, NotifyEmailAddressList, NotifyEmailCCList, NotifyFromEmailAddress, AddToExisting, OverwriteExisting, ImageFileType, AutoRotate, RotateDegrees, Deskew, null);
        }
        
        /// <remarks/>
        public void IndexAsync(
                    string CompanyID, 
                    string UserName, 
                    string Password, 
                    string DrawerName, 
                    string Barcode, 
                    string RetrievalTagsXML, 
                    int ExpectedPageCount, 
                    string VeritagEmailAddressList, 
                    string VeritagFromEmailAddress, 
                    string NotifyDate, 
                    int GMTOffset, 
                    string NotifySubject, 
                    string NotifyBody, 
                    bool AttachLink, 
                    bool AttachImage, 
                    string NotifyEmailAddressList, 
                    string NotifyEmailCCList, 
                    string NotifyFromEmailAddress, 
                    bool AddToExisting, 
                    bool OverwriteExisting, 
                    string ImageFileType, 
                    bool AutoRotate, 
                    int RotateDegrees, 
                    bool Deskew, 
                    object userState) {
            if ((this.IndexOperationCompleted == null)) {
                this.IndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndexOperationCompleted);
            }
            this.InvokeAsync("Index", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode,
                        RetrievalTagsXML,
                        ExpectedPageCount,
                        VeritagEmailAddressList,
                        VeritagFromEmailAddress,
                        NotifyDate,
                        GMTOffset,
                        NotifySubject,
                        NotifyBody,
                        AttachLink,
                        AttachImage,
                        NotifyEmailAddressList,
                        NotifyEmailCCList,
                        NotifyFromEmailAddress,
                        AddToExisting,
                        OverwriteExisting,
                        ImageFileType,
                        AutoRotate,
                        RotateDegrees,
                        Deskew}, this.IndexOperationCompleted, userState);
        }
        
        private void OnIndexOperationCompleted(object arg) {
            if ((this.IndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndexCompleted(this, new IndexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/RetrieveVersionList", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveVersionList(string CompanyID, string UserName, string Password, string DrawerName, string Barcode) {
            object[] results = this.Invoke("RetrieveVersionList", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveVersionListAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode) {
            this.RetrieveVersionListAsync(CompanyID, UserName, Password, DrawerName, Barcode, null);
        }
        
        /// <remarks/>
        public void RetrieveVersionListAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, object userState) {
            if ((this.RetrieveVersionListOperationCompleted == null)) {
                this.RetrieveVersionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveVersionListOperationCompleted);
            }
            this.InvokeAsync("RetrieveVersionList", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode}, this.RetrieveVersionListOperationCompleted, userState);
        }
        
        private void OnRetrieveVersionListOperationCompleted(object arg) {
            if ((this.RetrieveVersionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveVersionListCompleted(this, new RetrieveVersionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/SearchSystemFields", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchSystemFields(string CompanyID, string UserName, string Password, string SearchValue) {
            object[] results = this.Invoke("SearchSystemFields", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        SearchValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchSystemFieldsAsync(string CompanyID, string UserName, string Password, string SearchValue) {
            this.SearchSystemFieldsAsync(CompanyID, UserName, Password, SearchValue, null);
        }
        
        /// <remarks/>
        public void SearchSystemFieldsAsync(string CompanyID, string UserName, string Password, string SearchValue, object userState) {
            if ((this.SearchSystemFieldsOperationCompleted == null)) {
                this.SearchSystemFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchSystemFieldsOperationCompleted);
            }
            this.InvokeAsync("SearchSystemFields", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        SearchValue}, this.SearchSystemFieldsOperationCompleted, userState);
        }
        
        private void OnSearchSystemFieldsOperationCompleted(object arg) {
            if ((this.SearchSystemFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchSystemFieldsCompleted(this, new SearchSystemFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/RetrieveAllFields", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveAllFields(string CompanyID, string UserName, string Password, string DrawerName, string Barcode) {
            object[] results = this.Invoke("RetrieveAllFields", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllFieldsAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode) {
            this.RetrieveAllFieldsAsync(CompanyID, UserName, Password, DrawerName, Barcode, null);
        }
        
        /// <remarks/>
        public void RetrieveAllFieldsAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, object userState) {
            if ((this.RetrieveAllFieldsOperationCompleted == null)) {
                this.RetrieveAllFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllFieldsOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllFields", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode}, this.RetrieveAllFieldsOperationCompleted, userState);
        }
        
        private void OnRetrieveAllFieldsOperationCompleted(object arg) {
            if ((this.RetrieveAllFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllFieldsCompleted(this, new RetrieveAllFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/RetrieveMergedVersionImage", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveMergedVersionImage(string CompanyID, string UserName, string Password, string Barcode, string ReturnImageType) {
            object[] results = this.Invoke("RetrieveMergedVersionImage", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        ReturnImageType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveMergedVersionImageAsync(string CompanyID, string UserName, string Password, string Barcode, string ReturnImageType) {
            this.RetrieveMergedVersionImageAsync(CompanyID, UserName, Password, Barcode, ReturnImageType, null);
        }
        
        /// <remarks/>
        public void RetrieveMergedVersionImageAsync(string CompanyID, string UserName, string Password, string Barcode, string ReturnImageType, object userState) {
            if ((this.RetrieveMergedVersionImageOperationCompleted == null)) {
                this.RetrieveMergedVersionImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveMergedVersionImageOperationCompleted);
            }
            this.InvokeAsync("RetrieveMergedVersionImage", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        ReturnImageType}, this.RetrieveMergedVersionImageOperationCompleted, userState);
        }
        
        private void OnRetrieveMergedVersionImageOperationCompleted(object arg) {
            if ((this.RetrieveMergedVersionImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveMergedVersionImageCompleted(this, new RetrieveMergedVersionImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/RetrieveImage", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveImage(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, short Version) {
            object[] results = this.Invoke("RetrieveImage", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode,
                        Version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveImageAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, short Version) {
            this.RetrieveImageAsync(CompanyID, UserName, Password, DrawerName, Barcode, Version, null);
        }
        
        /// <remarks/>
        public void RetrieveImageAsync(string CompanyID, string UserName, string Password, string DrawerName, string Barcode, short Version, object userState) {
            if ((this.RetrieveImageOperationCompleted == null)) {
                this.RetrieveImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveImageOperationCompleted);
            }
            this.InvokeAsync("RetrieveImage", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DrawerName,
                        Barcode,
                        Version}, this.RetrieveImageOperationCompleted, userState);
        }
        
        private void OnRetrieveImageOperationCompleted(object arg) {
            if ((this.RetrieveImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveImageCompleted(this, new RetrieveImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/SearchBySystemFieldDateRange", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchBySystemFieldDateRange(string CompanyID, string UserName, string Password, string DateType, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset) {
            object[] results = this.Invoke("SearchBySystemFieldDateRange", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DateType,
                        FromDate,
                        ToDate,
                        GMTOffset});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchBySystemFieldDateRangeAsync(string CompanyID, string UserName, string Password, string DateType, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset) {
            this.SearchBySystemFieldDateRangeAsync(CompanyID, UserName, Password, DateType, FromDate, ToDate, GMTOffset, null);
        }
        
        /// <remarks/>
        public void SearchBySystemFieldDateRangeAsync(string CompanyID, string UserName, string Password, string DateType, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset, object userState) {
            if ((this.SearchBySystemFieldDateRangeOperationCompleted == null)) {
                this.SearchBySystemFieldDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchBySystemFieldDateRangeOperationCompleted);
            }
            this.InvokeAsync("SearchBySystemFieldDateRange", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        DateType,
                        FromDate,
                        ToDate,
                        GMTOffset}, this.SearchBySystemFieldDateRangeOperationCompleted, userState);
        }
        
        private void OnSearchBySystemFieldDateRangeOperationCompleted(object arg) {
            if ((this.SearchBySystemFieldDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchBySystemFieldDateRangeCompleted(this, new SearchBySystemFieldDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/SearchDateRange", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchDateRange(string CompanyID, string UserName, string Password, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset) {
            object[] results = this.Invoke("SearchDateRange", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        FromDate,
                        ToDate,
                        GMTOffset});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchDateRangeAsync(string CompanyID, string UserName, string Password, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset) {
            this.SearchDateRangeAsync(CompanyID, UserName, Password, FromDate, ToDate, GMTOffset, null);
        }
        
        /// <remarks/>
        public void SearchDateRangeAsync(string CompanyID, string UserName, string Password, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset, object userState) {
            if ((this.SearchDateRangeOperationCompleted == null)) {
                this.SearchDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchDateRangeOperationCompleted);
            }
            this.InvokeAsync("SearchDateRange", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        FromDate,
                        ToDate,
                        GMTOffset}, this.SearchDateRangeOperationCompleted, userState);
        }
        
        private void OnSearchDateRangeOperationCompleted(object arg) {
            if ((this.SearchDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchDateRangeCompleted(this, new SearchDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/SearchCustomFieldsWithReturnField", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchCustomFieldsWithReturnField(string CompanyID, string UserName, string Password, string SearchValue, string ReturnField, bool UseSoundex) {
            object[] results = this.Invoke("SearchCustomFieldsWithReturnField", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        SearchValue,
                        ReturnField,
                        UseSoundex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCustomFieldsWithReturnFieldAsync(string CompanyID, string UserName, string Password, string SearchValue, string ReturnField, bool UseSoundex) {
            this.SearchCustomFieldsWithReturnFieldAsync(CompanyID, UserName, Password, SearchValue, ReturnField, UseSoundex, null);
        }
        
        /// <remarks/>
        public void SearchCustomFieldsWithReturnFieldAsync(string CompanyID, string UserName, string Password, string SearchValue, string ReturnField, bool UseSoundex, object userState) {
            if ((this.SearchCustomFieldsWithReturnFieldOperationCompleted == null)) {
                this.SearchCustomFieldsWithReturnFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCustomFieldsWithReturnFieldOperationCompleted);
            }
            this.InvokeAsync("SearchCustomFieldsWithReturnField", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        SearchValue,
                        ReturnField,
                        UseSoundex}, this.SearchCustomFieldsWithReturnFieldOperationCompleted, userState);
        }
        
        private void OnSearchCustomFieldsWithReturnFieldOperationCompleted(object arg) {
            if ((this.SearchCustomFieldsWithReturnFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCustomFieldsWithReturnFieldCompleted(this, new SearchCustomFieldsWithReturnFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/Search", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Search(string CompanyID, string UserName, string Password, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset) {
            object[] results = this.Invoke("Search", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        FromDate,
                        ToDate,
                        GMTOffset});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchAsync(string CompanyID, string UserName, string Password, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset) {
            this.SearchAsync(CompanyID, UserName, Password, FromDate, ToDate, GMTOffset, null);
        }
        
        /// <remarks/>
        public void SearchAsync(string CompanyID, string UserName, string Password, System.DateTime FromDate, System.DateTime ToDate, int GMTOffset, object userState) {
            if ((this.SearchOperationCompleted == null)) {
                this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOperationCompleted);
            }
            this.InvokeAsync("Search", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        FromDate,
                        ToDate,
                        GMTOffset}, this.SearchOperationCompleted, userState);
        }
        
        private void OnSearchOperationCompleted(object arg) {
            if ((this.SearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/RetrieveEncryptedImageParameters", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveEncryptedImageParameters(string CompanyID, string UserName, string Password, string Barcode, short Version) {
            object[] results = this.Invoke("RetrieveEncryptedImageParameters", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        Version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveEncryptedImageParametersAsync(string CompanyID, string UserName, string Password, string Barcode, short Version) {
            this.RetrieveEncryptedImageParametersAsync(CompanyID, UserName, Password, Barcode, Version, null);
        }
        
        /// <remarks/>
        public void RetrieveEncryptedImageParametersAsync(string CompanyID, string UserName, string Password, string Barcode, short Version, object userState) {
            if ((this.RetrieveEncryptedImageParametersOperationCompleted == null)) {
                this.RetrieveEncryptedImageParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveEncryptedImageParametersOperationCompleted);
            }
            this.InvokeAsync("RetrieveEncryptedImageParameters", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        Version}, this.RetrieveEncryptedImageParametersOperationCompleted, userState);
        }
        
        private void OnRetrieveEncryptedImageParametersOperationCompleted(object arg) {
            if ((this.RetrieveEncryptedImageParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveEncryptedImageParametersCompleted(this, new RetrieveEncryptedImageParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/RetrieveDocumentImageUrl", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveDocumentImageUrl(string CompanyID, string UserName, string Password, string Barcode, short Version) {
            object[] results = this.Invoke("RetrieveDocumentImageUrl", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        Version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveDocumentImageUrlAsync(string CompanyID, string UserName, string Password, string Barcode, short Version) {
            this.RetrieveDocumentImageUrlAsync(CompanyID, UserName, Password, Barcode, Version, null);
        }
        
        /// <remarks/>
        public void RetrieveDocumentImageUrlAsync(string CompanyID, string UserName, string Password, string Barcode, short Version, object userState) {
            if ((this.RetrieveDocumentImageUrlOperationCompleted == null)) {
                this.RetrieveDocumentImageUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveDocumentImageUrlOperationCompleted);
            }
            this.InvokeAsync("RetrieveDocumentImageUrl", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        Version}, this.RetrieveDocumentImageUrlOperationCompleted, userState);
        }
        
        private void OnRetrieveDocumentImageUrlOperationCompleted(object arg) {
            if ((this.RetrieveDocumentImageUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveDocumentImageUrlCompleted(this, new RetrieveDocumentImageUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/UpdateImageExternalRetrievalUrl", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateImageExternalRetrievalUrl(string CompanyID, string UserName, string Password, string Barcode, string ExternalImageRetrievalUrl) {
            object[] results = this.Invoke("UpdateImageExternalRetrievalUrl", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        ExternalImageRetrievalUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateImageExternalRetrievalUrlAsync(string CompanyID, string UserName, string Password, string Barcode, string ExternalImageRetrievalUrl) {
            this.UpdateImageExternalRetrievalUrlAsync(CompanyID, UserName, Password, Barcode, ExternalImageRetrievalUrl, null);
        }
        
        /// <remarks/>
        public void UpdateImageExternalRetrievalUrlAsync(string CompanyID, string UserName, string Password, string Barcode, string ExternalImageRetrievalUrl, object userState) {
            if ((this.UpdateImageExternalRetrievalUrlOperationCompleted == null)) {
                this.UpdateImageExternalRetrievalUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateImageExternalRetrievalUrlOperationCompleted);
            }
            this.InvokeAsync("UpdateImageExternalRetrievalUrl", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        ExternalImageRetrievalUrl}, this.UpdateImageExternalRetrievalUrlOperationCompleted, userState);
        }
        
        private void OnUpdateImageExternalRetrievalUrlOperationCompleted(object arg) {
            if ((this.UpdateImageExternalRetrievalUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateImageExternalRetrievalUrlCompleted(this, new UpdateImageExternalRetrievalUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/SearchKGS", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchKGS(
                    string CompanyID, 
                    string UserName, 
                    string Password, 
                    string SearchValue, 
                    string DrawerName, 
                    string FromDate, 
                    string ToDate, 
                    int GMTOffset, 
                    string DateType, 
                    string SearchType, 
                    string SortBy, 
                    bool SortAscending, 
                    bool PhonicSearch, 
                    int FuzzySearchWeight, 
                    bool HighlightXml, 
                    int MaxFilesToRetrieve, 
                    int TimeoutSeconds, 
                    int StartResult, 
                    int EndResult) {
            object[] results = this.Invoke("SearchKGS", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        SearchValue,
                        DrawerName,
                        FromDate,
                        ToDate,
                        GMTOffset,
                        DateType,
                        SearchType,
                        SortBy,
                        SortAscending,
                        PhonicSearch,
                        FuzzySearchWeight,
                        HighlightXml,
                        MaxFilesToRetrieve,
                        TimeoutSeconds,
                        StartResult,
                        EndResult});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchKGSAsync(
                    string CompanyID, 
                    string UserName, 
                    string Password, 
                    string SearchValue, 
                    string DrawerName, 
                    string FromDate, 
                    string ToDate, 
                    int GMTOffset, 
                    string DateType, 
                    string SearchType, 
                    string SortBy, 
                    bool SortAscending, 
                    bool PhonicSearch, 
                    int FuzzySearchWeight, 
                    bool HighlightXml, 
                    int MaxFilesToRetrieve, 
                    int TimeoutSeconds, 
                    int StartResult, 
                    int EndResult) {
            this.SearchKGSAsync(CompanyID, UserName, Password, SearchValue, DrawerName, FromDate, ToDate, GMTOffset, DateType, SearchType, SortBy, SortAscending, PhonicSearch, FuzzySearchWeight, HighlightXml, MaxFilesToRetrieve, TimeoutSeconds, StartResult, EndResult, null);
        }
        
        /// <remarks/>
        public void SearchKGSAsync(
                    string CompanyID, 
                    string UserName, 
                    string Password, 
                    string SearchValue, 
                    string DrawerName, 
                    string FromDate, 
                    string ToDate, 
                    int GMTOffset, 
                    string DateType, 
                    string SearchType, 
                    string SortBy, 
                    bool SortAscending, 
                    bool PhonicSearch, 
                    int FuzzySearchWeight, 
                    bool HighlightXml, 
                    int MaxFilesToRetrieve, 
                    int TimeoutSeconds, 
                    int StartResult, 
                    int EndResult, 
                    object userState) {
            if ((this.SearchKGSOperationCompleted == null)) {
                this.SearchKGSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchKGSOperationCompleted);
            }
            this.InvokeAsync("SearchKGS", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        SearchValue,
                        DrawerName,
                        FromDate,
                        ToDate,
                        GMTOffset,
                        DateType,
                        SearchType,
                        SortBy,
                        SortAscending,
                        PhonicSearch,
                        FuzzySearchWeight,
                        HighlightXml,
                        MaxFilesToRetrieve,
                        TimeoutSeconds,
                        StartResult,
                        EndResult}, this.SearchKGSOperationCompleted, userState);
        }
        
        private void OnSearchKGSOperationCompleted(object arg) {
            if ((this.SearchKGSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchKGSCompleted(this, new SearchKGSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kwiktag.com/webservices/DeleteVersion", RequestNamespace="http://kwiktag.com/webservices/", ResponseNamespace="http://kwiktag.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteVersion(string CompanyID, string UserName, string Password, string Barcode, int Version) {
            object[] results = this.Invoke("DeleteVersion", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        Version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteVersionAsync(string CompanyID, string UserName, string Password, string Barcode, int Version) {
            this.DeleteVersionAsync(CompanyID, UserName, Password, Barcode, Version, null);
        }
        
        /// <remarks/>
        public void DeleteVersionAsync(string CompanyID, string UserName, string Password, string Barcode, int Version, object userState) {
            if ((this.DeleteVersionOperationCompleted == null)) {
                this.DeleteVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVersionOperationCompleted);
            }
            this.InvokeAsync("DeleteVersion", new object[] {
                        CompanyID,
                        UserName,
                        Password,
                        Barcode,
                        Version}, this.DeleteVersionOperationCompleted, userState);
        }
        
        private void OnDeleteVersionOperationCompleted(object arg) {
            if ((this.DeleteVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVersionCompleted(this, new DeleteVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void ArchiveCompletedEventHandler(object sender, ArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void IndexCompletedEventHandler(object sender, IndexCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndexCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndexCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void RetrieveVersionListCompletedEventHandler(object sender, RetrieveVersionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveVersionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveVersionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SearchSystemFieldsCompletedEventHandler(object sender, SearchSystemFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchSystemFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchSystemFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void RetrieveAllFieldsCompletedEventHandler(object sender, RetrieveAllFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void RetrieveMergedVersionImageCompletedEventHandler(object sender, RetrieveMergedVersionImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveMergedVersionImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveMergedVersionImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void RetrieveImageCompletedEventHandler(object sender, RetrieveImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SearchBySystemFieldDateRangeCompletedEventHandler(object sender, SearchBySystemFieldDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchBySystemFieldDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchBySystemFieldDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SearchDateRangeCompletedEventHandler(object sender, SearchDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SearchCustomFieldsWithReturnFieldCompletedEventHandler(object sender, SearchCustomFieldsWithReturnFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCustomFieldsWithReturnFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCustomFieldsWithReturnFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void RetrieveEncryptedImageParametersCompletedEventHandler(object sender, RetrieveEncryptedImageParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveEncryptedImageParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveEncryptedImageParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void RetrieveDocumentImageUrlCompletedEventHandler(object sender, RetrieveDocumentImageUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveDocumentImageUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveDocumentImageUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void UpdateImageExternalRetrievalUrlCompletedEventHandler(object sender, UpdateImageExternalRetrievalUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateImageExternalRetrievalUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateImageExternalRetrievalUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void SearchKGSCompletedEventHandler(object sender, SearchKGSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchKGSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchKGSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void DeleteVersionCompletedEventHandler(object sender, DeleteVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591