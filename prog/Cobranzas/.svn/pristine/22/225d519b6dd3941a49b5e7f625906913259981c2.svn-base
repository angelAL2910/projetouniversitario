//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KSI.Cobranza.DataLayer.EFModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LoansEntities : DbContext
    {
        public LoansEntities()
            : base("name=LoansEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<SP_GET_CLIENT_INFORMATIONS_Result> SP_GET_CLIENT_INFORMATIONS(Nullable<long> clientId, string identificationNumber)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(long));
    
            var identificationNumberParameter = identificationNumber != null ?
                new ObjectParameter("IdentificationNumber", identificationNumber) :
                new ObjectParameter("IdentificationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_CLIENT_INFORMATIONS_Result>("SP_GET_CLIENT_INFORMATIONS", clientIdParameter, identificationNumberParameter);
        }
    
        public virtual ObjectResult<SP_GET_CONTACT_PHONE_Result> SP_GET_CONTACT_PHONE(Nullable<long> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_CONTACT_PHONE_Result>("SP_GET_CONTACT_PHONE", clientIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_CONTACT_EMAIL_Result> SP_GET_CONTACT_EMAIL(Nullable<long> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_CONTACT_EMAIL_Result>("SP_GET_CONTACT_EMAIL", clientIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_INFORMATIONS_DETAIL_Result> SP_GET_LOANS_INFORMATIONS_DETAIL(Nullable<long> quotationId, Nullable<int> loanNumber, Nullable<long> accountId)
        {
            var quotationIdParameter = quotationId.HasValue ?
                new ObjectParameter("quotationId", quotationId) :
                new ObjectParameter("quotationId", typeof(long));
    
            var loanNumberParameter = loanNumber.HasValue ?
                new ObjectParameter("LoanNumber", loanNumber) :
                new ObjectParameter("LoanNumber", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_INFORMATIONS_DETAIL_Result>("SP_GET_LOANS_INFORMATIONS_DETAIL", quotationIdParameter, loanNumberParameter, accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_COLLATERAL_INFORMATIONS_RESUMEN_Result> SP_GET_LOANS_COLLATERAL_INFORMATIONS_RESUMEN(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_COLLATERAL_INFORMATIONS_RESUMEN_Result>("SP_GET_LOANS_COLLATERAL_INFORMATIONS_RESUMEN", accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_COLLATERAL_INFORMATIONS_DETAIL_Result> SP_GET_LOANS_COLLATERAL_INFORMATIONS_DETAIL(Nullable<long> collateralId)
        {
            var collateralIdParameter = collateralId.HasValue ?
                new ObjectParameter("collateralId", collateralId) :
                new ObjectParameter("collateralId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_COLLATERAL_INFORMATIONS_DETAIL_Result>("SP_GET_LOANS_COLLATERAL_INFORMATIONS_DETAIL", collateralIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_CODEBTOR_INFORMATIONS_DETAIL_Result> SP_GET_LOANS_CODEBTOR_INFORMATIONS_DETAIL(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_CODEBTOR_INFORMATIONS_DETAIL_Result>("SP_GET_LOANS_CODEBTOR_INFORMATIONS_DETAIL", accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_PAYMENT_PLAN_Result> SP_GET_LOANS_PAYMENT_PLAN(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_PAYMENT_PLAN_Result>("SP_GET_LOANS_PAYMENT_PLAN", accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_ENDORSE_COLLATERAL_INFORMATIONS_DETAIL_Result> SP_GET_LOANS_ENDORSE_COLLATERAL_INFORMATIONS_DETAIL(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_ENDORSE_COLLATERAL_INFORMATIONS_DETAIL_Result>("SP_GET_LOANS_ENDORSE_COLLATERAL_INFORMATIONS_DETAIL", accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_QUOTA_HEADER_Result> SP_GET_LOANS_QUOTA_HEADER(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_QUOTA_HEADER_Result>("SP_GET_LOANS_QUOTA_HEADER", accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_INFORMATIONS_Result> SP_GET_LOANS_INFORMATIONS(string clienteName, string identificationNumber, Nullable<long> quotationId, Nullable<long> accountId, string collateralReference, string chassis)
        {
            var clienteNameParameter = clienteName != null ?
                new ObjectParameter("clienteName", clienteName) :
                new ObjectParameter("clienteName", typeof(string));
    
            var identificationNumberParameter = identificationNumber != null ?
                new ObjectParameter("identificationNumber", identificationNumber) :
                new ObjectParameter("identificationNumber", typeof(string));
    
            var quotationIdParameter = quotationId.HasValue ?
                new ObjectParameter("quotationId", quotationId) :
                new ObjectParameter("quotationId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var collateralReferenceParameter = collateralReference != null ?
                new ObjectParameter("collateralReference", collateralReference) :
                new ObjectParameter("collateralReference", typeof(string));
    
            var chassisParameter = chassis != null ?
                new ObjectParameter("Chassis", chassis) :
                new ObjectParameter("Chassis", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_INFORMATIONS_Result>("SP_GET_LOANS_INFORMATIONS", clienteNameParameter, identificationNumberParameter, quotationIdParameter, accountIdParameter, collateralReferenceParameter, chassisParameter);
        }
    
        public virtual ObjectResult<FILL_DROP_DOWN_Result> FILL_DROP_DOWN(string dropDownName)
        {
            var dropDownNameParameter = dropDownName != null ?
                new ObjectParameter("DropDownName", dropDownName) :
                new ObjectParameter("DropDownName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FILL_DROP_DOWN_Result>("FILL_DROP_DOWN", dropDownNameParameter);
        }
    
        public virtual ObjectResult<SP_SET_CONTACT_PHONES_Result> SP_SET_CONTACT_PHONES(Nullable<long> contactPhoneId, Nullable<long> relatedContactId, Nullable<int> countryID, string areaCode, string phone, string phoneType, string comments, Nullable<bool> isPrimary, Nullable<bool> isActive, Nullable<int> userId)
        {
            var contactPhoneIdParameter = contactPhoneId.HasValue ?
                new ObjectParameter("contactPhoneId", contactPhoneId) :
                new ObjectParameter("contactPhoneId", typeof(long));
    
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("AreaCode", areaCode) :
                new ObjectParameter("AreaCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var phoneTypeParameter = phoneType != null ?
                new ObjectParameter("PhoneType", phoneType) :
                new ObjectParameter("PhoneType", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_CONTACT_PHONES_Result>("SP_SET_CONTACT_PHONES", contactPhoneIdParameter, relatedContactIdParameter, countryIDParameter, areaCodeParameter, phoneParameter, phoneTypeParameter, commentsParameter, isPrimaryParameter, isActiveParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_SET_CONTACT_EMAIL_Result> SP_SET_CONTACT_EMAIL(Nullable<long> contactEmailId, Nullable<long> relatedContactId, string email, string emailType, string comments, Nullable<bool> isPrimary, Nullable<bool> isActive, Nullable<int> userId)
        {
            var contactEmailIdParameter = contactEmailId.HasValue ?
                new ObjectParameter("contactEmailId", contactEmailId) :
                new ObjectParameter("contactEmailId", typeof(long));
    
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var emailTypeParameter = emailType != null ?
                new ObjectParameter("emailType", emailType) :
                new ObjectParameter("emailType", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_CONTACT_EMAIL_Result>("SP_SET_CONTACT_EMAIL", contactEmailIdParameter, relatedContactIdParameter, emailParameter, emailTypeParameter, commentsParameter, isPrimaryParameter, isActiveParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_PAYMENT_PLAN_PROYECTIONS_Result> SP_GET_LOANS_PAYMENT_PLAN_PROYECTIONS(Nullable<long> accountId, Nullable<System.DateTime> dateStatement, Nullable<int> idTipo, Nullable<decimal> montoPago)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var dateStatementParameter = dateStatement.HasValue ?
                new ObjectParameter("DateStatement", dateStatement) :
                new ObjectParameter("DateStatement", typeof(System.DateTime));
    
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("IdTipo", idTipo) :
                new ObjectParameter("IdTipo", typeof(int));
    
            var montoPagoParameter = montoPago.HasValue ?
                new ObjectParameter("MontoPago", montoPago) :
                new ObjectParameter("MontoPago", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_PAYMENT_PLAN_PROYECTIONS_Result>("SP_GET_LOANS_PAYMENT_PLAN_PROYECTIONS", accountIdParameter, dateStatementParameter, idTipoParameter, montoPagoParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_PAYMENT_AND_DEBTS_Result> SP_GET_LOANS_PAYMENT_AND_DEBTS(Nullable<long> accountId, Nullable<System.DateTime> fDateDebt, Nullable<System.DateTime> tDateDebt, Nullable<System.DateTime> fDatePay, Nullable<System.DateTime> tDatePay)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var fDateDebtParameter = fDateDebt.HasValue ?
                new ObjectParameter("FDateDebt", fDateDebt) :
                new ObjectParameter("FDateDebt", typeof(System.DateTime));
    
            var tDateDebtParameter = tDateDebt.HasValue ?
                new ObjectParameter("TDateDebt", tDateDebt) :
                new ObjectParameter("TDateDebt", typeof(System.DateTime));
    
            var fDatePayParameter = fDatePay.HasValue ?
                new ObjectParameter("FDatePay", fDatePay) :
                new ObjectParameter("FDatePay", typeof(System.DateTime));
    
            var tDatePayParameter = tDatePay.HasValue ?
                new ObjectParameter("TDatePay", tDatePay) :
                new ObjectParameter("TDatePay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_PAYMENT_AND_DEBTS_Result>("SP_GET_LOANS_PAYMENT_AND_DEBTS", accountIdParameter, fDateDebtParameter, tDateDebtParameter, fDatePayParameter, tDatePayParameter);
        }
    
        public virtual ObjectResult<SP_SET_CONTACT_DOMICILIATION_CARD_Result> SP_SET_CONTACT_DOMICILIATION_CARD(Nullable<long> clientId, Nullable<int> cardTypeId, string lastFourDigits, string cardNumber, Nullable<System.DateTime> expirationDate, string cVV2, string cardHolder, string expirationDateMMYYYY, Nullable<bool> isActive, Nullable<int> userId, Nullable<long> accountId, Nullable<bool> isMain, Nullable<bool> applyRange, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isActiveLoan)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(long));
    
            var cardTypeIdParameter = cardTypeId.HasValue ?
                new ObjectParameter("CardTypeId", cardTypeId) :
                new ObjectParameter("CardTypeId", typeof(int));
    
            var lastFourDigitsParameter = lastFourDigits != null ?
                new ObjectParameter("LastFourDigits", lastFourDigits) :
                new ObjectParameter("LastFourDigits", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var cVV2Parameter = cVV2 != null ?
                new ObjectParameter("CVV2", cVV2) :
                new ObjectParameter("CVV2", typeof(string));
    
            var cardHolderParameter = cardHolder != null ?
                new ObjectParameter("CardHolder", cardHolder) :
                new ObjectParameter("CardHolder", typeof(string));
    
            var expirationDateMMYYYYParameter = expirationDateMMYYYY != null ?
                new ObjectParameter("ExpirationDateMMYYYY", expirationDateMMYYYY) :
                new ObjectParameter("ExpirationDateMMYYYY", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var isMainParameter = isMain.HasValue ?
                new ObjectParameter("IsMain", isMain) :
                new ObjectParameter("IsMain", typeof(bool));
    
            var applyRangeParameter = applyRange.HasValue ?
                new ObjectParameter("ApplyRange", applyRange) :
                new ObjectParameter("ApplyRange", typeof(bool));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isActiveLoanParameter = isActiveLoan.HasValue ?
                new ObjectParameter("isActiveLoan", isActiveLoan) :
                new ObjectParameter("isActiveLoan", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_CONTACT_DOMICILIATION_CARD_Result>("SP_SET_CONTACT_DOMICILIATION_CARD", clientIdParameter, cardTypeIdParameter, lastFourDigitsParameter, cardNumberParameter, expirationDateParameter, cVV2Parameter, cardHolderParameter, expirationDateMMYYYYParameter, isActiveParameter, userIdParameter, accountIdParameter, isMainParameter, applyRangeParameter, dateFromParameter, dateToParameter, isActiveLoanParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOANS_DOMICILIATION_CARD_Result> SP_GET_LOANS_DOMICILIATION_CARD(Nullable<long> accountId, Nullable<long> clientId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOANS_DOMICILIATION_CARD_Result>("SP_GET_LOANS_DOMICILIATION_CARD", accountIdParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<SP_SET_CREDIT_DEBIT_DIRECT_PAYMENT_Result> SP_SET_CREDIT_DEBIT_DIRECT_PAYMENT(Nullable<long> creditDebitDirectPaymentId, Nullable<long> accountId, Nullable<int> cardTypeId, Nullable<int> directPaymentStatusId, string cardNumber, string lastFourDigits, string cardName, Nullable<int> yearExpiration, Nullable<int> monthExpiration, Nullable<decimal> quotaAmount, Nullable<decimal> balance, Nullable<decimal> amountPaid, Nullable<System.DateTime> datePaid, Nullable<System.DateTime> dateProcessedCard, Nullable<System.DateTime> dateProcessedEasybank, string authorizationNumber, string receiptNumberEasybank, Nullable<int> userId, string userName)
        {
            var creditDebitDirectPaymentIdParameter = creditDebitDirectPaymentId.HasValue ?
                new ObjectParameter("CreditDebitDirectPaymentId", creditDebitDirectPaymentId) :
                new ObjectParameter("CreditDebitDirectPaymentId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var cardTypeIdParameter = cardTypeId.HasValue ?
                new ObjectParameter("CardTypeId", cardTypeId) :
                new ObjectParameter("CardTypeId", typeof(int));
    
            var directPaymentStatusIdParameter = directPaymentStatusId.HasValue ?
                new ObjectParameter("DirectPaymentStatusId", directPaymentStatusId) :
                new ObjectParameter("DirectPaymentStatusId", typeof(int));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var lastFourDigitsParameter = lastFourDigits != null ?
                new ObjectParameter("LastFourDigits", lastFourDigits) :
                new ObjectParameter("LastFourDigits", typeof(string));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var yearExpirationParameter = yearExpiration.HasValue ?
                new ObjectParameter("YearExpiration", yearExpiration) :
                new ObjectParameter("YearExpiration", typeof(int));
    
            var monthExpirationParameter = monthExpiration.HasValue ?
                new ObjectParameter("MonthExpiration", monthExpiration) :
                new ObjectParameter("MonthExpiration", typeof(int));
    
            var quotaAmountParameter = quotaAmount.HasValue ?
                new ObjectParameter("QuotaAmount", quotaAmount) :
                new ObjectParameter("QuotaAmount", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var amountPaidParameter = amountPaid.HasValue ?
                new ObjectParameter("AmountPaid", amountPaid) :
                new ObjectParameter("AmountPaid", typeof(decimal));
    
            var datePaidParameter = datePaid.HasValue ?
                new ObjectParameter("DatePaid", datePaid) :
                new ObjectParameter("DatePaid", typeof(System.DateTime));
    
            var dateProcessedCardParameter = dateProcessedCard.HasValue ?
                new ObjectParameter("DateProcessedCard", dateProcessedCard) :
                new ObjectParameter("DateProcessedCard", typeof(System.DateTime));
    
            var dateProcessedEasybankParameter = dateProcessedEasybank.HasValue ?
                new ObjectParameter("DateProcessedEasybank", dateProcessedEasybank) :
                new ObjectParameter("DateProcessedEasybank", typeof(System.DateTime));
    
            var authorizationNumberParameter = authorizationNumber != null ?
                new ObjectParameter("AuthorizationNumber", authorizationNumber) :
                new ObjectParameter("AuthorizationNumber", typeof(string));
    
            var receiptNumberEasybankParameter = receiptNumberEasybank != null ?
                new ObjectParameter("receiptNumberEasybank", receiptNumberEasybank) :
                new ObjectParameter("receiptNumberEasybank", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_CREDIT_DEBIT_DIRECT_PAYMENT_Result>("SP_SET_CREDIT_DEBIT_DIRECT_PAYMENT", creditDebitDirectPaymentIdParameter, accountIdParameter, cardTypeIdParameter, directPaymentStatusIdParameter, cardNumberParameter, lastFourDigitsParameter, cardNameParameter, yearExpirationParameter, monthExpirationParameter, quotaAmountParameter, balanceParameter, amountPaidParameter, datePaidParameter, dateProcessedCardParameter, dateProcessedEasybankParameter, authorizationNumberParameter, receiptNumberEasybankParameter, userIdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOAN_CORRESPONDENCE_Result> SP_GET_LOAN_CORRESPONDENCE(Nullable<long> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOAN_CORRESPONDENCE_Result>("SP_GET_LOAN_CORRESPONDENCE", accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOAN_TEMPLATE_SENT_RELATED_FILE_TH_Result> SP_GET_LOAN_TEMPLATE_SENT_RELATED_FILE_TH(Nullable<long> templateId, Nullable<long> accountId, Nullable<long> templateSentId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var templateSentIdParameter = templateSentId.HasValue ?
                new ObjectParameter("TemplateSentId", templateSentId) :
                new ObjectParameter("TemplateSentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOAN_TEMPLATE_SENT_RELATED_FILE_TH_Result>("SP_GET_LOAN_TEMPLATE_SENT_RELATED_FILE_TH", templateIdParameter, accountIdParameter, templateSentIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_LOAN_TEMPLATE_SENT_TH_Result> SP_GET_LOAN_TEMPLATE_SENT_TH(Nullable<long> templateId, Nullable<long> accountId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_LOAN_TEMPLATE_SENT_TH_Result>("SP_GET_LOAN_TEMPLATE_SENT_TH", templateIdParameter, accountIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_TEMPLATES_TH_Result> SP_GET_TEMPLATES_TH(Nullable<long> templateId)
        {
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_TEMPLATES_TH_Result>("SP_GET_TEMPLATES_TH", templateIdParameter);
        }
    
        public virtual ObjectResult<SP_SET_TEMPLATE_SEND_Result> SP_SET_TEMPLATE_SEND(Nullable<long> templateSentId, Nullable<short> templateId, Nullable<long> accountId, Nullable<long> clienteId, Nullable<System.DateTime> sendDate, string clientName, string documentPath, string documentName, string emails, string comments, Nullable<bool> isActive, Nullable<bool> isSendToClient, Nullable<bool> isSendToOffice, Nullable<bool> isSendToAgent, Nullable<int> caseDepartmentID, Nullable<System.DateTime> caseDate, Nullable<System.TimeSpan> caseHour, string caseComment, Nullable<long> caseNo, Nullable<int> userId, string userName)
        {
            var templateSentIdParameter = templateSentId.HasValue ?
                new ObjectParameter("TemplateSentId", templateSentId) :
                new ObjectParameter("TemplateSentId", typeof(long));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(short));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var clienteIdParameter = clienteId.HasValue ?
                new ObjectParameter("ClienteId", clienteId) :
                new ObjectParameter("ClienteId", typeof(long));
    
            var sendDateParameter = sendDate.HasValue ?
                new ObjectParameter("SendDate", sendDate) :
                new ObjectParameter("SendDate", typeof(System.DateTime));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var documentPathParameter = documentPath != null ?
                new ObjectParameter("DocumentPath", documentPath) :
                new ObjectParameter("DocumentPath", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("documentName", documentName) :
                new ObjectParameter("documentName", typeof(string));
    
            var emailsParameter = emails != null ?
                new ObjectParameter("emails", emails) :
                new ObjectParameter("emails", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isSendToClientParameter = isSendToClient.HasValue ?
                new ObjectParameter("IsSendToClient", isSendToClient) :
                new ObjectParameter("IsSendToClient", typeof(bool));
    
            var isSendToOfficeParameter = isSendToOffice.HasValue ?
                new ObjectParameter("IsSendToOffice", isSendToOffice) :
                new ObjectParameter("IsSendToOffice", typeof(bool));
    
            var isSendToAgentParameter = isSendToAgent.HasValue ?
                new ObjectParameter("IsSendToAgent", isSendToAgent) :
                new ObjectParameter("IsSendToAgent", typeof(bool));
    
            var caseDepartmentIDParameter = caseDepartmentID.HasValue ?
                new ObjectParameter("CaseDepartmentID", caseDepartmentID) :
                new ObjectParameter("CaseDepartmentID", typeof(int));
    
            var caseDateParameter = caseDate.HasValue ?
                new ObjectParameter("CaseDate", caseDate) :
                new ObjectParameter("CaseDate", typeof(System.DateTime));
    
            var caseHourParameter = caseHour.HasValue ?
                new ObjectParameter("CaseHour", caseHour) :
                new ObjectParameter("CaseHour", typeof(System.TimeSpan));
    
            var caseCommentParameter = caseComment != null ?
                new ObjectParameter("CaseComment", caseComment) :
                new ObjectParameter("CaseComment", typeof(string));
    
            var caseNoParameter = caseNo.HasValue ?
                new ObjectParameter("CaseNo", caseNo) :
                new ObjectParameter("CaseNo", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_TEMPLATE_SEND_Result>("SP_SET_TEMPLATE_SEND", templateSentIdParameter, templateIdParameter, accountIdParameter, clienteIdParameter, sendDateParameter, clientNameParameter, documentPathParameter, documentNameParameter, emailsParameter, commentsParameter, isActiveParameter, isSendToClientParameter, isSendToOfficeParameter, isSendToAgentParameter, caseDepartmentIDParameter, caseDateParameter, caseHourParameter, caseCommentParameter, caseNoParameter, userIdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<SP_SET_TEMPLATE_SEND_RELATED_DOCUMENT_Result> SP_SET_TEMPLATE_SEND_RELATED_DOCUMENT(Nullable<long> templateSentRelatedFileId, Nullable<long> templateSentId, Nullable<int> documentTypeGroupId, string documentPath, string documentName, string comments, Nullable<bool> isActive, Nullable<int> userId, string userName, Nullable<decimal> sizeFile)
        {
            var templateSentRelatedFileIdParameter = templateSentRelatedFileId.HasValue ?
                new ObjectParameter("TemplateSentRelatedFileId", templateSentRelatedFileId) :
                new ObjectParameter("TemplateSentRelatedFileId", typeof(long));
    
            var templateSentIdParameter = templateSentId.HasValue ?
                new ObjectParameter("TemplateSentId", templateSentId) :
                new ObjectParameter("TemplateSentId", typeof(long));
    
            var documentTypeGroupIdParameter = documentTypeGroupId.HasValue ?
                new ObjectParameter("documentTypeGroupId", documentTypeGroupId) :
                new ObjectParameter("documentTypeGroupId", typeof(int));
    
            var documentPathParameter = documentPath != null ?
                new ObjectParameter("DocumentPath", documentPath) :
                new ObjectParameter("DocumentPath", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("documentName", documentName) :
                new ObjectParameter("documentName", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var sizeFileParameter = sizeFile.HasValue ?
                new ObjectParameter("SizeFile", sizeFile) :
                new ObjectParameter("SizeFile", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_TEMPLATE_SEND_RELATED_DOCUMENT_Result>("SP_SET_TEMPLATE_SEND_RELATED_DOCUMENT", templateSentRelatedFileIdParameter, templateSentIdParameter, documentTypeGroupIdParameter, documentPathParameter, documentNameParameter, commentsParameter, isActiveParameter, userIdParameter, userNameParameter, sizeFileParameter);
        }
    
        public virtual ObjectResult<SP_SET_DELETE_TEMPLATE_SEND_RELATED_DOCUMENT_Result> SP_SET_DELETE_TEMPLATE_SEND_RELATED_DOCUMENT(Nullable<long> templateSentId, Nullable<long> templateSentRelatedFileId)
        {
            var templateSentIdParameter = templateSentId.HasValue ?
                new ObjectParameter("TemplateSentId", templateSentId) :
                new ObjectParameter("TemplateSentId", typeof(long));
    
            var templateSentRelatedFileIdParameter = templateSentRelatedFileId.HasValue ?
                new ObjectParameter("TemplateSentRelatedFileId", templateSentRelatedFileId) :
                new ObjectParameter("TemplateSentRelatedFileId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_DELETE_TEMPLATE_SEND_RELATED_DOCUMENT_Result>("SP_SET_DELETE_TEMPLATE_SEND_RELATED_DOCUMENT", templateSentIdParameter, templateSentRelatedFileIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_MEETING_CASE_Result> SP_GET_MEETING_CASE(Nullable<long> relatedContactId, Nullable<long> accountId, Nullable<long> caseNumber, Nullable<int> meetingStatusId)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var caseNumberParameter = caseNumber.HasValue ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(long));
    
            var meetingStatusIdParameter = meetingStatusId.HasValue ?
                new ObjectParameter("MeetingStatusId", meetingStatusId) :
                new ObjectParameter("MeetingStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_MEETING_CASE_Result>("SP_GET_MEETING_CASE", relatedContactIdParameter, accountIdParameter, caseNumberParameter, meetingStatusIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_MEETING_CASE_NOTE_Result> SP_GET_MEETING_CASE_NOTE(Nullable<long> relatedContactId, Nullable<int> meetingTypeId, Nullable<int> meetingSubTypeId, Nullable<int> meetingCaseId)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var meetingTypeIdParameter = meetingTypeId.HasValue ?
                new ObjectParameter("MeetingTypeId", meetingTypeId) :
                new ObjectParameter("MeetingTypeId", typeof(int));
    
            var meetingSubTypeIdParameter = meetingSubTypeId.HasValue ?
                new ObjectParameter("MeetingSubTypeId", meetingSubTypeId) :
                new ObjectParameter("MeetingSubTypeId", typeof(int));
    
            var meetingCaseIdParameter = meetingCaseId.HasValue ?
                new ObjectParameter("MeetingCaseId", meetingCaseId) :
                new ObjectParameter("MeetingCaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_MEETING_CASE_NOTE_Result>("SP_GET_MEETING_CASE_NOTE", relatedContactIdParameter, meetingTypeIdParameter, meetingSubTypeIdParameter, meetingCaseIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_MEETING_CASE_NOTE_CALL_Result> SP_GET_MEETING_CASE_NOTE_CALL(Nullable<long> relatedContactId, Nullable<int> meetingTypeId, Nullable<int> meetingSubTypeId, Nullable<int> meetingCaseId, Nullable<int> meetingCaseNoteId)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var meetingTypeIdParameter = meetingTypeId.HasValue ?
                new ObjectParameter("MeetingTypeId", meetingTypeId) :
                new ObjectParameter("MeetingTypeId", typeof(int));
    
            var meetingSubTypeIdParameter = meetingSubTypeId.HasValue ?
                new ObjectParameter("MeetingSubTypeId", meetingSubTypeId) :
                new ObjectParameter("MeetingSubTypeId", typeof(int));
    
            var meetingCaseIdParameter = meetingCaseId.HasValue ?
                new ObjectParameter("MeetingCaseId", meetingCaseId) :
                new ObjectParameter("MeetingCaseId", typeof(int));
    
            var meetingCaseNoteIdParameter = meetingCaseNoteId.HasValue ?
                new ObjectParameter("MeetingCaseNoteId", meetingCaseNoteId) :
                new ObjectParameter("MeetingCaseNoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_MEETING_CASE_NOTE_CALL_Result>("SP_GET_MEETING_CASE_NOTE_CALL", relatedContactIdParameter, meetingTypeIdParameter, meetingSubTypeIdParameter, meetingCaseIdParameter, meetingCaseNoteIdParameter);
        }
    
        public virtual ObjectResult<SP_GET_QUEUE_BY_USER_Result> SP_GET_QUEUE_BY_USER(Nullable<int> queueTypeId, Nullable<int> assingToId, Nullable<int> vendorId)
        {
            var queueTypeIdParameter = queueTypeId.HasValue ?
                new ObjectParameter("QueueTypeId", queueTypeId) :
                new ObjectParameter("QueueTypeId", typeof(int));
    
            var assingToIdParameter = assingToId.HasValue ?
                new ObjectParameter("AssingToId", assingToId) :
                new ObjectParameter("AssingToId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_QUEUE_BY_USER_Result>("SP_GET_QUEUE_BY_USER", queueTypeIdParameter, assingToIdParameter, vendorIdParameter);
        }
    
        public virtual ObjectResult<SP_SET_MEETING_CASE_Result> SP_SET_MEETING_CASE(Nullable<long> relatedContactId, Nullable<int> meetingTypeId, Nullable<int> meetingSubTypeId, Nullable<int> meetingCaseId, Nullable<long> accountId, Nullable<int> meetingStatusId, Nullable<int> reasonId, Nullable<int> departmentId, Nullable<int> categoryId, Nullable<long> caseNumber, Nullable<System.DateTime> meetingDate, string meetingShortNote, Nullable<int> callAssignedId, string notifiedToEmail, Nullable<bool> notified, Nullable<int> attemptNo, Nullable<bool> isActive, Nullable<int> userId, string userName, Nullable<System.DateTime> meetingClosedDate, Nullable<int> queueId)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var meetingTypeIdParameter = meetingTypeId.HasValue ?
                new ObjectParameter("MeetingTypeId", meetingTypeId) :
                new ObjectParameter("MeetingTypeId", typeof(int));
    
            var meetingSubTypeIdParameter = meetingSubTypeId.HasValue ?
                new ObjectParameter("MeetingSubTypeId", meetingSubTypeId) :
                new ObjectParameter("MeetingSubTypeId", typeof(int));
    
            var meetingCaseIdParameter = meetingCaseId.HasValue ?
                new ObjectParameter("MeetingCaseId", meetingCaseId) :
                new ObjectParameter("MeetingCaseId", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var meetingStatusIdParameter = meetingStatusId.HasValue ?
                new ObjectParameter("MeetingStatusId", meetingStatusId) :
                new ObjectParameter("MeetingStatusId", typeof(int));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var caseNumberParameter = caseNumber.HasValue ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(long));
    
            var meetingDateParameter = meetingDate.HasValue ?
                new ObjectParameter("MeetingDate", meetingDate) :
                new ObjectParameter("MeetingDate", typeof(System.DateTime));
    
            var meetingShortNoteParameter = meetingShortNote != null ?
                new ObjectParameter("MeetingShortNote", meetingShortNote) :
                new ObjectParameter("MeetingShortNote", typeof(string));
    
            var callAssignedIdParameter = callAssignedId.HasValue ?
                new ObjectParameter("CallAssignedId", callAssignedId) :
                new ObjectParameter("CallAssignedId", typeof(int));
    
            var notifiedToEmailParameter = notifiedToEmail != null ?
                new ObjectParameter("NotifiedToEmail", notifiedToEmail) :
                new ObjectParameter("NotifiedToEmail", typeof(string));
    
            var notifiedParameter = notified.HasValue ?
                new ObjectParameter("Notified", notified) :
                new ObjectParameter("Notified", typeof(bool));
    
            var attemptNoParameter = attemptNo.HasValue ?
                new ObjectParameter("AttemptNo", attemptNo) :
                new ObjectParameter("AttemptNo", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var meetingClosedDateParameter = meetingClosedDate.HasValue ?
                new ObjectParameter("MeetingClosedDate", meetingClosedDate) :
                new ObjectParameter("MeetingClosedDate", typeof(System.DateTime));
    
            var queueIdParameter = queueId.HasValue ?
                new ObjectParameter("QueueId", queueId) :
                new ObjectParameter("QueueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_MEETING_CASE_Result>("SP_SET_MEETING_CASE", relatedContactIdParameter, meetingTypeIdParameter, meetingSubTypeIdParameter, meetingCaseIdParameter, accountIdParameter, meetingStatusIdParameter, reasonIdParameter, departmentIdParameter, categoryIdParameter, caseNumberParameter, meetingDateParameter, meetingShortNoteParameter, callAssignedIdParameter, notifiedToEmailParameter, notifiedParameter, attemptNoParameter, isActiveParameter, userIdParameter, userNameParameter, meetingClosedDateParameter, queueIdParameter);
        }
    
        public virtual ObjectResult<SP_SET_MEETING_CASE_NOTE_Result> SP_SET_MEETING_CASE_NOTE(Nullable<long> relatedContactId, Nullable<int> meetingTypeId, Nullable<int> meetingSubTypeId, Nullable<int> meetingCaseId, Nullable<int> meetingCaseNoteId, Nullable<int> priorityId, Nullable<int> serviceChannelId, Nullable<int> originatedById, string note, Nullable<bool> isActive, Nullable<int> userId, string userName)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var meetingTypeIdParameter = meetingTypeId.HasValue ?
                new ObjectParameter("MeetingTypeId", meetingTypeId) :
                new ObjectParameter("MeetingTypeId", typeof(int));
    
            var meetingSubTypeIdParameter = meetingSubTypeId.HasValue ?
                new ObjectParameter("MeetingSubTypeId", meetingSubTypeId) :
                new ObjectParameter("MeetingSubTypeId", typeof(int));
    
            var meetingCaseIdParameter = meetingCaseId.HasValue ?
                new ObjectParameter("MeetingCaseId", meetingCaseId) :
                new ObjectParameter("MeetingCaseId", typeof(int));
    
            var meetingCaseNoteIdParameter = meetingCaseNoteId.HasValue ?
                new ObjectParameter("MeetingCaseNoteId", meetingCaseNoteId) :
                new ObjectParameter("MeetingCaseNoteId", typeof(int));
    
            var priorityIdParameter = priorityId.HasValue ?
                new ObjectParameter("PriorityId", priorityId) :
                new ObjectParameter("PriorityId", typeof(int));
    
            var serviceChannelIdParameter = serviceChannelId.HasValue ?
                new ObjectParameter("ServiceChannelId", serviceChannelId) :
                new ObjectParameter("ServiceChannelId", typeof(int));
    
            var originatedByIdParameter = originatedById.HasValue ?
                new ObjectParameter("OriginatedById", originatedById) :
                new ObjectParameter("OriginatedById", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_MEETING_CASE_NOTE_Result>("SP_SET_MEETING_CASE_NOTE", relatedContactIdParameter, meetingTypeIdParameter, meetingSubTypeIdParameter, meetingCaseIdParameter, meetingCaseNoteIdParameter, priorityIdParameter, serviceChannelIdParameter, originatedByIdParameter, noteParameter, isActiveParameter, userIdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<SP_SET_MEETING_CASE_NOTE_CALL_Result> SP_SET_MEETING_CASE_NOTE_CALL(Nullable<long> relatedContactId, Nullable<int> meetingTypeId, Nullable<int> meetingSubTypeId, Nullable<int> meetingCaseId, Nullable<int> meetingCaseNoteId, Nullable<int> meetingCaseNoteCallId, Nullable<System.TimeSpan> callDuration, Nullable<System.DateTime> callStart, Nullable<System.DateTime> callStop, string dialedNumber, string extension, string fileName, string fullPathFile, string callLogId, string callRexUserId, string userFirstName, string userLastName, Nullable<bool> isActive, Nullable<int> userId, string userName)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var meetingTypeIdParameter = meetingTypeId.HasValue ?
                new ObjectParameter("MeetingTypeId", meetingTypeId) :
                new ObjectParameter("MeetingTypeId", typeof(int));
    
            var meetingSubTypeIdParameter = meetingSubTypeId.HasValue ?
                new ObjectParameter("MeetingSubTypeId", meetingSubTypeId) :
                new ObjectParameter("MeetingSubTypeId", typeof(int));
    
            var meetingCaseIdParameter = meetingCaseId.HasValue ?
                new ObjectParameter("MeetingCaseId", meetingCaseId) :
                new ObjectParameter("MeetingCaseId", typeof(int));
    
            var meetingCaseNoteIdParameter = meetingCaseNoteId.HasValue ?
                new ObjectParameter("MeetingCaseNoteId", meetingCaseNoteId) :
                new ObjectParameter("MeetingCaseNoteId", typeof(int));
    
            var meetingCaseNoteCallIdParameter = meetingCaseNoteCallId.HasValue ?
                new ObjectParameter("MeetingCaseNoteCallId", meetingCaseNoteCallId) :
                new ObjectParameter("MeetingCaseNoteCallId", typeof(int));
    
            var callDurationParameter = callDuration.HasValue ?
                new ObjectParameter("CallDuration", callDuration) :
                new ObjectParameter("CallDuration", typeof(System.TimeSpan));
    
            var callStartParameter = callStart.HasValue ?
                new ObjectParameter("CallStart", callStart) :
                new ObjectParameter("CallStart", typeof(System.DateTime));
    
            var callStopParameter = callStop.HasValue ?
                new ObjectParameter("CallStop", callStop) :
                new ObjectParameter("CallStop", typeof(System.DateTime));
    
            var dialedNumberParameter = dialedNumber != null ?
                new ObjectParameter("DialedNumber", dialedNumber) :
                new ObjectParameter("DialedNumber", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fullPathFileParameter = fullPathFile != null ?
                new ObjectParameter("FullPathFile", fullPathFile) :
                new ObjectParameter("FullPathFile", typeof(string));
    
            var callLogIdParameter = callLogId != null ?
                new ObjectParameter("CallLogId", callLogId) :
                new ObjectParameter("CallLogId", typeof(string));
    
            var callRexUserIdParameter = callRexUserId != null ?
                new ObjectParameter("CallRexUserId", callRexUserId) :
                new ObjectParameter("CallRexUserId", typeof(string));
    
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userLastNameParameter = userLastName != null ?
                new ObjectParameter("UserLastName", userLastName) :
                new ObjectParameter("UserLastName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_MEETING_CASE_NOTE_CALL_Result>("SP_SET_MEETING_CASE_NOTE_CALL", relatedContactIdParameter, meetingTypeIdParameter, meetingSubTypeIdParameter, meetingCaseIdParameter, meetingCaseNoteIdParameter, meetingCaseNoteCallIdParameter, callDurationParameter, callStartParameter, callStopParameter, dialedNumberParameter, extensionParameter, fileNameParameter, fullPathFileParameter, callLogIdParameter, callRexUserIdParameter, userFirstNameParameter, userLastNameParameter, isActiveParameter, userIdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<SP_GET_MEETING_CASE_FILE_Result> SP_GET_MEETING_CASE_FILE(Nullable<long> relatedContactId, Nullable<int> meetingTypeId, Nullable<int> meetingSubTypeId, Nullable<int> meetingCaseId, Nullable<int> meetingCaseNoteId)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var meetingTypeIdParameter = meetingTypeId.HasValue ?
                new ObjectParameter("MeetingTypeId", meetingTypeId) :
                new ObjectParameter("MeetingTypeId", typeof(int));
    
            var meetingSubTypeIdParameter = meetingSubTypeId.HasValue ?
                new ObjectParameter("MeetingSubTypeId", meetingSubTypeId) :
                new ObjectParameter("MeetingSubTypeId", typeof(int));
    
            var meetingCaseIdParameter = meetingCaseId.HasValue ?
                new ObjectParameter("MeetingCaseId", meetingCaseId) :
                new ObjectParameter("MeetingCaseId", typeof(int));
    
            var meetingCaseNoteIdParameter = meetingCaseNoteId.HasValue ?
                new ObjectParameter("MeetingCaseNoteId", meetingCaseNoteId) :
                new ObjectParameter("MeetingCaseNoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_MEETING_CASE_FILE_Result>("SP_GET_MEETING_CASE_FILE", relatedContactIdParameter, meetingTypeIdParameter, meetingSubTypeIdParameter, meetingCaseIdParameter, meetingCaseNoteIdParameter);
        }
    
        public virtual ObjectResult<SP_SET_MEETING_CASE_FILE_Result> SP_SET_MEETING_CASE_FILE(Nullable<long> relatedContactId, Nullable<int> meetingTypeId, Nullable<int> meetingSubTypeId, Nullable<int> meetingCaseId, Nullable<int> meetingCaseNoteId, Nullable<int> meetingCaseNoteFileId, Nullable<int> documentTypeGroupId, string documentPath, string documentName, string comments, Nullable<bool> isActive, Nullable<int> userId, string userName, Nullable<decimal> sizeFile)
        {
            var relatedContactIdParameter = relatedContactId.HasValue ?
                new ObjectParameter("relatedContactId", relatedContactId) :
                new ObjectParameter("relatedContactId", typeof(long));
    
            var meetingTypeIdParameter = meetingTypeId.HasValue ?
                new ObjectParameter("MeetingTypeId", meetingTypeId) :
                new ObjectParameter("MeetingTypeId", typeof(int));
    
            var meetingSubTypeIdParameter = meetingSubTypeId.HasValue ?
                new ObjectParameter("MeetingSubTypeId", meetingSubTypeId) :
                new ObjectParameter("MeetingSubTypeId", typeof(int));
    
            var meetingCaseIdParameter = meetingCaseId.HasValue ?
                new ObjectParameter("MeetingCaseId", meetingCaseId) :
                new ObjectParameter("MeetingCaseId", typeof(int));
    
            var meetingCaseNoteIdParameter = meetingCaseNoteId.HasValue ?
                new ObjectParameter("MeetingCaseNoteId", meetingCaseNoteId) :
                new ObjectParameter("MeetingCaseNoteId", typeof(int));
    
            var meetingCaseNoteFileIdParameter = meetingCaseNoteFileId.HasValue ?
                new ObjectParameter("MeetingCaseNoteFileId", meetingCaseNoteFileId) :
                new ObjectParameter("MeetingCaseNoteFileId", typeof(int));
    
            var documentTypeGroupIdParameter = documentTypeGroupId.HasValue ?
                new ObjectParameter("documentTypeGroupId", documentTypeGroupId) :
                new ObjectParameter("documentTypeGroupId", typeof(int));
    
            var documentPathParameter = documentPath != null ?
                new ObjectParameter("DocumentPath", documentPath) :
                new ObjectParameter("DocumentPath", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("documentName", documentName) :
                new ObjectParameter("documentName", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var sizeFileParameter = sizeFile.HasValue ?
                new ObjectParameter("SizeFile", sizeFile) :
                new ObjectParameter("SizeFile", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SET_MEETING_CASE_FILE_Result>("SP_SET_MEETING_CASE_FILE", relatedContactIdParameter, meetingTypeIdParameter, meetingSubTypeIdParameter, meetingCaseIdParameter, meetingCaseNoteIdParameter, meetingCaseNoteFileIdParameter, documentTypeGroupIdParameter, documentPathParameter, documentNameParameter, commentsParameter, isActiveParameter, userIdParameter, userNameParameter, sizeFileParameter);
        }
    }
}
