controlador   

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Logic.Global_Logic;
using Entity.Global_Entity;


namespace Asp.NETMVCCRUD.Controllers
{
    public class PagosController : Controller
    {
        private PagosLogica pago = new PagosLogica();
        public ActionResult Index()
        {
            return View();
        }
        public ActionResult GetAllPagos()
        {
            var PagoListado =pago.GetAllClienteDeudas();
            return Json(new { data = PagoListado }, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult ObtenerClienteApagar(int idCxc = 1)
        {
            var entity = new Entity.Global_Entity.ClienteEntity();
            

            if (idCxc == 0)
                return View(entity);
            else
            {
                var m = pago.GetAllClienteDeudaOne(idCxc);
                return View(m);

            }
        }
        [HttpPost]
        public ActionResult ObtenerClienteApagar(GetDeudores entity)
        {
            if(entity.MontoPendiente>entity.MontoApagar)
            {
                return Json(new { success = true, message = "La Cantidad digitada Sobrepasa la cantidad Adeudada" }, JsonRequestBehavior.AllowGet);

            }
            //var ver = entity.LimiteTarjeta;

            //var save = pago.SaveCliente(entity);

            if (entity.idCx > 0)
            {
                return Json(new { success = true, message = "Registro Actualizado Satisfactoriamente" }, JsonRequestBehavior.AllowGet);

            }
            else
            {
                return Json(new { success = true, message = "Registro Guardado Satisfactoriamente" }, JsonRequestBehavior.AllowGet);
            }
        }
    }
}



@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>



@{
    ViewBag.Title = "Clientes";
}

<h2>Clientes</h2>

<div class="container"> 
  <table id="PagosTable" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr> 
               
                <th>Cedula</th>
                <th>NombreCompleto</th> 
                <th>prestamoSolicitado</th>
                <th>MontoPagado</th> 
                <th>MontoPendiente</th>
                <th>numeroPrestamo</th> 
                <th></th>
            </tr>
        </thead>
    </table>
</div>
<link href="https://cdn.datatables.net/1.10.15/css/dataTables.bootstrap.min.css" rel="stylesheet" />
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />

@section scripts{
    <script src="//cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.15/js/dataTables.bootstrap.min.js"></script>

    <script>
        var Popup, dataTable;
        $(document).ready(function () {
            dataTable =  $("#PagosTable").DataTable({
                "ajax": {
                    "url": "/Pagos/GetAllPagos",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                       
                    { "data": "Cedula" },            
                    { "data": "NombreCompleto" },  
                    { "data": "prestamoSolicitado" },
                    { "data": "MontoPagado" },  
                    { "data": "MontoPendiente" },    
                    { "data": "numeroPrestamo" },  
                    {
                        "data":"idCx" , "render" : function (data) {
                            return "<a class='btn btn-success' style='width: 100%' onclick=PopupForm('@Url.Action("ObtenerClienteApagar", "Pagos")/" + data + "')><i class='fa fa-pencil'></i> Pagar</a>";
                    },
                        "orderable": false,
                        "searchable":false,
                        "width":"150px"
                    }

                ],
                "language": {

                    "emptyTable" : "No data found, Please click on <b>Add New</b> Button"
                }
            });
        });

        function PopupForm(url) {
            var formDiv = $('<div/>');
            $.get(url)
            .done(function (response) {
                formDiv.html(response);

                Popup = formDiv.dialog({
                    autoOpen: true,
                    resizable: false,
                    title: 'Fill Employee Details',
                    height: 500,
                    width: 700,
                    close: function () {
                        Popup.dialog('destroy').remove();
                    }

                });
            });
        }

        function SubmitForm(form) {
            $.validator.unobtrusive.parse(form);
            if($(form).valid()){
                $.ajax({
                    type : "POST",
                    url : form.action,
                    data : $(form).serialize(),
                    success : function (data) {
                        if(data.success)
                        {
                            Popup.dialog('close');
                            dataTable.ajax.reload();

                            $.notify(data.message,{
                                globalPosition :"top center",
                                className : "success"
                            })

                        }
                    }
                });
            }
            return false;
        }

        function Delete(id) {
            if(confirm('Are You Sure to Delete this Employee Record ?'))
            {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Delete","Employee")/' + id,
                    success: function (data) {
                        if (data.success)
                        {
                            dataTable.ajax.reload();

                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "success"
                            })

                        }
                    }

                });
            }
        }
    </script>
}


@model Entity.Global_Entity.GetDeudores

@{
    Layout = null;
}


@using (Html.BeginForm("ObtenerClienteApagar", "Pagos", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
    @Html.HiddenFor(model => model.idCx)
    @Html.HiddenFor(model => model.idprestamo)
    @Html.HiddenFor(model => model.id_cliente)

    <div class="form-group">
        @Html.LabelFor(model => model.numeroPrestamo, new { @class = "control-label" })
        @Html.EditorFor(model => model.numeroPrestamo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Cedula, new { @class = "control-label" })
        @Html.EditorFor(model => model.Cedula, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.NombreCompleto, new { @class = "control-label" })
        @Html.EditorFor(model => model.NombreCompleto, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

    </div>
     
    <div class="form-group">
        @Html.LabelFor(model => model.prestamoSolicitado, new { @class = "control-label" })
        @Html.EditorFor(model => model.prestamoSolicitado, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.MontoPagado, new { @class = "control-label" })
        @Html.EditorFor(model => model.MontoPagado, new { htmlAttributes = new { @class = "form-control",  @readonly = "readonly" } })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MontoPendiente, new { @class = "control-label", @type = "number" })
        @Html.EditorFor(model => model.MontoPendiente,  new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MontoApagar, new { @class = "control-label" })
        @Html.EditorFor(model => model.MontoApagar, new { htmlAttributes = new { @class = "form-control"} })

    </div>

    

    @*<div class="form-group">
            @Html.ValidationMessageFor(model => model.Nombre)
            @Html.ValidationMessageFor(model => model.Apellido)
            @Html.ValidationMessageFor(model => model.Apodo)
            @Html.ValidationMessageFor(model => model.Cedula)
            @Html.ValidationMessageFor(model => model.Telefono)
        </div>*@

    <div class="form-group">
        <input type="submit" value="Submit" class="btn btn-primary" />
        <input type="reset" value="Reset" class="btn" />
    </div>
}